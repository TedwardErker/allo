#+TITLE: Multilevel Urban Tree Allometric equations
#+AUTHOR: Tedward Erker
#+email: erker@wisc.edu
#+PROPERTY:  header-args:R :cache no :results output :exports both :comments link :session *R:allo2* :eval yes
#+startup: indent
#+FILETAGS: work allo
#+HTML_HEAD: <link rel="stylesheet" href="main.css" type="text/css">
* Objective
To create better allometric equations for urban trees
* Caveat
I am not an expert on this, but I think I have a contribution to
make.  I'm using a dataset I did not work to collect and it may have
idiosyncrasies that I may not understand.  I also don't fully understand
the modelling approach used to create the equations, namely the
weighting.

* Why needed
Whoops.  They do have equations by tree type:
Tree types: BDL = broadleaf deciduous large, BDM = broadleaf deciduous
medium, BDS = broadleaf deciduous small, BEL = broadleaf evergreen
large, BEM = broadleaf evergreen medium, BES = broadleaf evergreen
small, CEL = conifer evergreen large, CEM = conifer evergreen medium,
CES = conifer evergreen small, PEL = palm evergreen large, PEM = palm
evergreen medium, PES= palm evergreen small.

http://www.cpp.edu/~sagarver/GEO309/exercises/allometry/Predicting_Diameter_Height_Crown_Width_Leaf_Area_peper.pdf

The urban tree allometry dataset is an incredibly valuable resource
for making better predictions about tree growth in urban environments,
and it is essential for accurate ecosystem service evaluation.
However, there are a number of limitations with the current set of
equations that multilevel modelling can address.

Limitations:
1) Limited number of species in each region.  There are only equations
   for the ten most common urban tree species in each region.  If a
   user wants an equation for a different species, they either need to
   use an equation for that species from a different region, or select
   the equation from the species they think is most similar.

2) Hard boundaries of regions.  There are separate allometric
   equations for 16 distinct climatic regions in the US.  However
   climate varies continuously across space.  Users of the equations
   have to pick which region they are closest to, or consider
   averaging two equations, but the weighting could be difficult to
   determine.  Climatic differences have been discretized/binned into
   relatively few groups, when it could be more continuous.

3) Some of the existing equations are based on smaller sample sizes
   than reported.  For example, dbh as a function of age for...  only
   has two observations and so the best fitting equation is a straight
   line, but we know that isn't right.

4) used the best fitting model of several forms based on AIC (i
   think).  This could potentially lead to overfitting, and depending
   on the model form selected, makes extrapolation very tenuous.

Solution: Allow for information to be shared across species and across
regions when fitting models.  Include climate variables as predictors
in the model so that the allometric equations vary continuously across
space.

A multilevel model would allow for the partial pooling of information
across species and across cities, so that in the cases where we have
little or even no data, we can still make reasonable predictions.  If
we want to make predictions about red maple in our city where we have
no observations, a multilevel model would allow us to take the red
maple equation from another city and adjust it to fit the climate of
our city.

Improvements:
1) Climate based rather than regions based.  Continuous rather than
   discrete, gradient rather than hard boundaries.
2) Rather than set Apps min and Apps Max, we can relax these hard
   boundaries, but include information about how uncertainty
   increases.  Appsmin and Appsmax significantly truncates predictive
   envelope.
3) Can use an equation form that makes sense to extrapolate with (this
   is probably more realistic and worth the decrease in equation form flexibility).
4) Species can be nested within Genus, Genus within broader type
   (conifer/broadleaf/palm etc).


1) One equation for 10 species in each region.  What about species not
   on the list?  What if I'm interested in the equation for red maple
   in the southeast, but the only equation comes from the northeast
   region?  How should I adjust the equation?
2) What if my location is on the border of two regions?  How should I
   average the equations from each region, espcially if they are of
   two different forms (e.g. cubic and log-log)?
   1) this could allow for easy integration of new cities too, because
      right now equations for each region just come from 1 or 2 cities.


1) Currently urban tree allometric equations are built separately for
   each species and for each region.  So there is a separate equation
   for red maple in the northeast and a separate equation for red
   maple in the midwest. These are hard differences when such hard
   divisions don't exist.  Better models for red maple could probably
   be made if the different regions could be pooled to the extent that
   their climates are similar.
2)


 For practicioners who wish to use

what was the metric used to select from models?  was it r^2?  they
used AIC
shouldn't we select the model form based on expert knowledge about
universal tree growth patterns, rather than a small sample of
observations?  We'd expect to occasionally find with small samples
that a cubic relationship best fits the data.  But this relationship
suffers from lack of basis in what we know about how trees grow and
may give grossly inaccurate predictions if considered outside the
range of the data.


cite:Weiskittel_ForestGrowthAndYieldModeling
note on pg 130: for biomass equations:
"Zianis et al. (2005) found that more than two-thirds of the
 equations they examined were functions of just DBH, and more than 75%
 of the studies that reported a sample size had less than 50
 trees. The use of just DBH assumes that the relationship between DBH
 and height is static, which is often not the case, as noted above."

"The application to other populations of simple model forms fitted to
small datasets can produce large prediction errors (e.g. Wang et al.,
2002a). In addition, development of universal (Pilli et al., 2006) and
generalized (Muukkonen, 2007) static equations ignores significant
species variability and complex relationships, particularly when the
goal is to estimate regional and national biomass (Zianis and
Mancuccini, 2004)."

* What should the structure of the equations be?



DBH ~ age

assymetrical




** Height
from cite:Weiskittel_ForestGrowthAndYieldModeling:
For example, a cumulative growth curve of height over age shows three
primary stages: (1) juvenile period where growth is rapid and often
exponential; (2) a long period of maturation where the trend is nearly
linear; and (3) old age, where growth is nearly asymptotic

height ~ dbh - weibull? see pg 116 cite:Weiskittel_ForestGrowthAndYieldModeling

Constraining the model with very low dbh's
In addition to asymptotic behavior, most height-to-diameter equation
forms are also constrained to predict a height of 1.3 or 1.37
(i.e. breast height) when DBH is equal to zero, but this constraint
may cause poorer model performance across the full range of DBH
(Newton and Amponsah, 2007).

Hardwood heights tend to be harder to predict because of the lack of a
true leader and the difficulty of measuring hardwood heights
accurately (e.g. Kitahara et al., 2010).


Why Weibull is a decent option:  pg116 cite:Weiskittel_ForestGrowthAndYieldModeling
#+BEGIN_QUOTE
Significant differences between model forms can exist, however, when
limited data are available. For example, Temesgen and von Gadow (2004)
found that the percentage difference in root mean square error between
the best and worst equation for five commonly used model forms varied
from 5 to 33%. Huang et al. (1992) found in their analysis that the
Chapman–Richards, Weibull, and a modified logistic-type function were
consistently among the best performing models because they were
flexible, able to assume a variety of shapes, and extrapolated well.
#+END_QUOTE


** DBH
cite:Weiskittel_ForestGrowthAndYieldModeling
A diameter growth curve would show much the same trend, except there
is a tendency toward more sustained growth rate as the tree matures
(Hann and Hanus, 2002b). While height increment may nearly cease in
maturity, diameter increment must continue in order to produce the
xylem and phloem needed for tree survival
** sigmoidal forms, see the citations within:
cite:Weiskittel_ForestGrowthAndYieldModeling
Various theoretical sigmoid model forms are used to predict growth in
forestry (Zeide, 1993), but most of them can be generalized with a
single equation form (Garcıa, 2005c). The most common sigmoid model
forms include the Gompertz (1825), Bertalanffy (1949), and Richards
(1959) equations.

Although these theoretical models offer some biological
interpretability (e.g. Zeide, 2004), it is easily shown that
well-formulated empirical sigmoid equations can be just as accurate or
even more accurate for a wide range of data (e.g. Martin and Ek, 1984)



cite:garcia_2005

cite:zeide_2004

** It would be nice to have repeat measures of trees to get diameter increments.  Individual variation can be large and noisy.
** Could the response be multivariate?  For example: height, crown length, leaf area etc are covariate.  Modeling them together could make sense :ATTACH:
:PROPERTIES:
:Attachments: Screenshot%202018-04-26%2008.17.38.png
:ID:       4B81E555-8C81-4BD7-8DA9-0827A9F2FB79
:END:

cite:dietze_e_2008 have a multivariate response
The decision to fit all three-response variables simultaneously using
a full covariance matrix, rather than to fit each variable separately,
acknowledges the fact that response variables are likely related to
each other.

[[file:/Users/erker/projects/allo/data/4B/81E555-8C81-4BD7-8DA9-0827A9F2FB79/Screenshot 2018-04-26 08.17.38.png]]
** cite:mcpherson_simpson_99
see pg 168

they follow frelich 1992
 look at his equation form.
also

* Methods
** Data
repeat measures on the same individuals would help much.

I wonder if the UFIA would have this eventually and if I could write
the code to incorporate the data.

*** Species
**** taxonomy
Nesting of taxonomy.

Cultivar < Species < Genus < Functional Type

Functional types:
1) Broad leaf
2) Conifer
3) Palm
4) ...
5) ...
| FunctionalType      |
|---------------------|
| broadleaf deciduous |
| broadleaf evergreen |
| conifer evergreen   |
| palm evergreen      |



|     | SpCode | ScientificName                         | FunctionalType      |                     |
|-----+--------+----------------------------------------+---------------------+---------------------|
|   1 | ACFA   | Acacia farnesiana                      | broadleaf deciduous |                     |
|   2 | ACME   | Acacia melanoxylon                     | broadleaf evergreen |                     |
|   3 | ACSA3  | Acacia salicina                        | broadleaf evergreen |                     |
|   4 | ACMA   | Acer macrophyllum                      | broadleaf deciduous |                     |
|   5 | ACNE   | Acer negundo                           | broadleaf deciduous |                     |
|   6 | ACPA   | Acer palmatum                          | broadleaf deciduous |                     |
|   7 | ACPL   | Acer platanoides                       | broadleaf deciduous |                     |
|   8 | ACRU   | Acer rubrum                            | broadleaf deciduous |                     |
|   9 | ACSA1  | Acer saccharinum                       | broadleaf deciduous |                     |
|  10 | ACSA2  | Acer saccharum                         | broadleaf deciduous |                     |
|  11 | AEHI   | Aesculus hippocastanum                 | broadleaf deciduous |                     |
|  12 | BABL   | Bauhinia x blakeana                    | broadleaf evergreen |                     |
|  13 | BENI   | Betula nigra                           | broadleaf deciduous |                     |
|  14 | BEPE   | Betula pendula                         | broadleaf deciduous |                     |
|  15 | BRPO   | Brachychiton populneum                 | broadleaf evergreen |                     |
|  16 | BUCA   | Butia capitata                         | palm evergreen      |                     |
|  17 | CACI   | Callistemon citrinus                   | broadleaf evergreen |                     |
|  18 | CADE2  | Calocedrus decurrens                   | conifer evergreen   |                     |
|  19 | CAIN4  | Calophyllum inophyllum                 | broadleaf evergreen |                     |
|  20 | CABEF  | Carpinus betulus 'Fastigiata'          | broadleaf deciduous |                     |
|  21 | CAIL   | Carya illinoinensis                    | broadleaf deciduous |                     |
|  22 | CANE33 | Cassia x nealiae                       | broadleaf deciduous |                     |
|  23 | CAEQ   | Casuarina equisetifolia                | broadleaf evergreen |                     |
|  24 | CASP   | Catalpa speciosa                       | broadleaf deciduous |                     |
|  25 | CEDE   | Cedrus deodara                         | conifer evergreen   |                     |
|  26 | CELA   | Celtis laevigata                       | conifer evergreen   | This can't be right |
|  27 | CEOC   | Celtis occidentalis                    | broadleaf deciduous |                     |
|  28 | CESI4  | Celtis sinensis                        | broadleaf deciduous |                     |
|  29 | CESI3  | Ceratonia siliqua                      | broadleaf evergreen |                     |
|  30 | CECA   | Cercis canadensis                      | broadleaf deciduous |                     |
|  31 | CHLI   | Chilopsis linearis                     | broadleaf deciduous |                     |
|  32 | CICA   | Cinnamomum camphora                    | broadleaf evergreen |                     |
|  33 | CISP2  | Citharexylum spinosum                  | broadleaf evergreen |                     |
|  34 | CONU   | Cocos nucifera                         | palm evergreen      |                     |
|  35 | COERA2 | Conocarpus erectus var. argenteus      | broadleaf evergreen |                     |
|  36 | COSU2  | Cordia subcordata                      | broadleaf evergreen |                     |
|  37 | COFL   | Cornus florida                         | broadleaf deciduous |                     |
|  38 | CR     | Crataegus sp.                          | broadleaf deciduous |                     |
|  39 | CRLA   | Crataegus x lavallei                   | broadleaf deciduous |                     |
|  40 | CUAN   | Cupaniopsis anacardioides              | broadleaf evergreen |                     |
|  41 | DERE   | Delonix regia                          | broadleaf deciduous |                     |
|  42 | ELAN   | Elaeagnus angustifolia                 | broadleaf deciduous |                     |
|  43 | ELOR2  | Elaeodendron orientale                 | broadleaf evergreen |                     |
|  44 | ERJA   | Eriobotrya japonica                    | broadleaf evergreen |                     |
|  45 | EUFI81 | Eucalyptus ficifolia                   | broadleaf evergreen |                     |
|  46 | EUGL   | Eucalyptus globulus                    | broadleaf evergreen |                     |
|  47 | EUMI2  | Eucalyptus microtheca                  | broadleaf evergreen |                     |
|  48 | EUSI   | Eucalyptus sideroxylon                 | broadleaf evergreen |                     |
|  49 | FASY   | Fagus sylvatica                        | broadleaf deciduous |                     |
|  50 | FIBE   | Ficus benjamina                        | broadleaf evergreen |                     |
|  51 | FIMI   | Ficus thonningii                       | broadleaf evergreen |                     |
|  52 | FIDE6  | Filicium decipiens                     | broadleaf evergreen |                     |
|  53 | FRAM   | Fraxinus americana                     | broadleaf deciduous |                     |
|  54 | FRAN2  | Fraxinus angustifolia                  | broadleaf deciduous |                     |
|  55 | FRAN_R | Fraxinus angustifolia 'Raywood'        | broadleaf deciduous |                     |
|  56 | FREX_H | Fraxinus excelsior 'Hessei'            | broadleaf deciduous |                     |
|  57 | FRHO   | Fraxinus holotricha                    | broadleaf deciduous |                     |
|  58 | FRLA   | Fraxinus latifolia                     | broadleaf deciduous |                     |
|  59 | FRPE   | Fraxinus pennsylvanica                 | broadleaf deciduous |                     |
|  60 | FRPE_M | Fraxinus pennsylvanica 'Marshall'      | broadleaf deciduous |                     |
|  61 | FRUH   | Fraxinus uhdei                         | broadleaf deciduous |                     |
|  62 | FRVE   | Fraxinus velutina                      | broadleaf deciduous |                     |
|  63 | FRVE_G | Fraxinus velutina 'Modesto'            | broadleaf deciduous |                     |
|  64 | GIBI   | Ginkgo biloba                          | broadleaf deciduous |                     |
|  65 | GLTR   | Gleditsia triacanthos                  | broadleaf deciduous |                     |
|  66 | GYDI   | Gymnocladus dioicus                    | broadleaf deciduous |                     |
|  67 | ILOP   | Ilex opaca                             | broadleaf evergreen |                     |
|  68 | ILPA2  | Ilex paraguariensis                    | broadleaf evergreen |                     |
|  69 | JAMI   | Jacaranda mimosifolia                  | broadleaf deciduous |                     |
|  70 | JUNI   | Juglans nigra                          | broadleaf deciduous |                     |
|  71 | JUVI   | Juniperus virginiana                   | conifer evergreen   |                     |
|  72 | JUSI   | Juniperus virginiana var. silicicola   | conifer evergreen   |                     |
|  73 | KOELFO | Koelreuteria elegans                   | broadleaf deciduous |                     |
|  74 | KOPA   | Koelreuteria paniculata                | broadleaf deciduous |                     |
|  75 | LAIN   | Lagerstroemia indica                   | broadleaf deciduous |                     |
|  76 | LA6    | Lagerstroemia sp.                      | broadleaf deciduous |                     |
|  77 | LASP   | Lagerstroemia speciosa                 | broadleaf deciduous |                     |
|  78 | LIST   | Liquidambar styraciflua                | broadleaf deciduous |                     |
|  79 | LITU   | Liriodendron tulipifera                | broadleaf deciduous |                     |
|  80 | MAGR   | Magnolia grandiflora                   | broadleaf evergreen |                     |
|  81 | PYAN   | Malus angustifolia                     | broadleaf deciduous |                     |
|  82 | MA2    | Malus sp.                              | broadleaf deciduous |                     |
|  83 | MEQU   | Melaleuca quinquenervia                | broadleaf evergreen |                     |
|  84 | MEEX   | Metrosideros excelsa                   | broadleaf evergreen |                     |
|  85 | MOAL   | Morus alba                             | broadleaf deciduous |                     |
|  86 | MO     | Morus sp.                              | broadleaf deciduous |                     |
|  87 | OLEU   | Olea europaea                          | broadleaf evergreen |                     |
|  88 | PAAC   | Parkinsonia aculeata                   | broadleaf deciduous |                     |
|  89 | CEFL   | Parkinsonia florida                    | broadleaf deciduous |                     |
|  90 | PHCA   | Phoenix canariensis                    | palm evergreen      |                     |
|  91 | PHDA4  | Phoenix dactylifera                    | palm evergreen      |                     |
|  92 | PIPU   | Picea pungens                          | conifer evergreen   |                     |
|  93 | PIBR2  | Pinus brutia                           | conifer evergreen   |                     |
|  94 | PICA   | Pinus canariensis                      | conifer evergreen   |                     |
|  95 | PICO   | Pinus contorta                         | conifer evergreen   |                     |
|  96 | PIEC   | Pinus echinata                         | conifer evergreen   |                     |
|  97 | PIED   | Pinus edulis                           | conifer evergreen   |                     |
|  98 | PIEL2  | Pinus eldarica                         | conifer evergreen   |                     |
|  99 | PIEL   | Pinus elliottii                        | conifer evergreen   |                     |
| 100 | PIHA   | Pinus halepensis                       | conifer evergreen   |                     |
| 101 | PINI   | Pinus nigra                            | conifer evergreen   |                     |
| 102 | PIPO   | Pinus ponderosa                        | conifer evergreen   |                     |
| 103 | PIRA   | Pinus radiata                          | conifer evergreen   |                     |
| 104 | PIST   | Pinus strobus                          | conifer evergreen   |                     |
| 105 | PISY   | Pinus sylvestris                       | conifer evergreen   |                     |
| 106 | PITA   | Pinus taeda                            | conifer evergreen   |                     |
| 107 | PITH   | Pinus thunbergiana                     | conifer evergreen   |                     |
| 108 | PICH   | Pistacia chinensis                     | broadleaf deciduous |                     |
| 109 | PIUN   | Pittosporum undulatum                  | broadleaf evergreen |                     |
| 110 | PLOC   | Platanus occidentalis                  | broadleaf deciduous |                     |
| 111 | PLRA   | Platanus racemosa                      | broadleaf deciduous |                     |
| 112 | PLAC   | Platanus x acerifolia                  | broadleaf deciduous |                     |
| 113 | THOR   | Platycladus orientalis                 | conifer evergreen   |                     |
| 114 | POMA   | Podocarpus macrophyllus                | conifer evergreen   |                     |
| 115 | POAN   | Populus angustifolia                   | broadleaf deciduous |                     |
| 116 | POTR2  | Populus balsamifera subsp. trichocarpa | broadleaf deciduous |                     |
| 117 | PODE   | Populus deltoides                      | broadleaf deciduous |                     |
| 118 | POFR   | Populus fremontii                      | broadleaf deciduous |                     |
| 119 | POSA   | Populus sargentii                      | broadleaf deciduous |                     |
| 120 | PRCH   | Prosopis chilensis                     | broadleaf deciduous |                     |
| 121 | PRCA   | Prunus caroliniana                     | broadleaf evergreen |                     |
| 122 | PRCE   | Prunus cerasifera                      | broadleaf deciduous |                     |
| 123 | PRCE   | Prunus cerasifera cvs.                 | broadleaf deciduous |                     |
| 124 | PRSE2  | Prunus serrulata                       | broadleaf deciduous |                     |
| 125 | PR     | Prunus sp.                             | broadleaf deciduous |                     |
| 126 | PRYE   | Prunus yedoensis                       | broadleaf deciduous |                     |
| 127 | PSME   | Pseudotsuga menziesii                  | conifer evergreen   |                     |
| 128 | PYCA   | Pyrus calleryana                       | broadleaf deciduous |                     |
| 129 | PYCA_B | Pyrus calleryana 'Bradford'            | broadleaf deciduous |                     |
| 130 | PYCA   | Pyrus calleryana cvs.                  | broadleaf deciduous |                     |
| 131 | PYKA   | Pyrus kawakamii                        | broadleaf evergreen |                     |
| 132 | PY     | Pyrus sp.                              | broadleaf deciduous |                     |
| 133 | QUAG   | Quercus agrifolia                      | broadleaf evergreen |                     |
| 134 | QUAL   | Quercus alba                           | broadleaf deciduous |                     |
| 135 | QUIL2  | Quercus ilex                           | broadleaf evergreen |                     |
| 136 | QULA2  | Quercus laurifolia                     | broadleaf deciduous |                     |
| 137 | QULO   | Quercus lobata                         | broadleaf deciduous |                     |
| 138 | QUMA1  | Quercus macrocarpa                     | broadleaf deciduous |                     |
| 139 | QUNI   | Quercus nigra                          | broadleaf deciduous |                     |
| 140 | QUPA   | Quercus palustris                      | broadleaf deciduous |                     |
| 141 | QUPH   | Quercus phellos                        | broadleaf deciduous |                     |
| 142 | QURU   | Quercus rubra                          | broadleaf deciduous |                     |
| 143 | QUSH   | Quercus shumardii                      | broadleaf deciduous |                     |
| 144 | QUVI   | Quercus virginiana                     | broadleaf evergreen |                     |
| 145 | RHLA   | Rhus lancea                            | broadleaf evergreen |                     |
| 146 | ROPS   | Robinia pseudoacacia                   | broadleaf deciduous |                     |
| 147 | SAPA   | Sabal palmetto                         | palm evergreen      |                     |
| 148 | PISA2  | Samanea saman                          | broadleaf deciduous |                     |
| 149 | SCMO   | Schinus molle                          | broadleaf evergreen |                     |
| 150 | SCTE   | Schinus terebinthifolius               | broadleaf evergreen |                     |
| 151 | SESE   | Sequoia sempervirens                   | conifer evergreen   |                     |
| 152 | SWMA   | Swietenia mahagoni                     | broadleaf evergreen |                     |
| 153 | SYRO   | Syagrus romanzoffiana                  | palm evergreen      |                     |
| 154 | TAAR   | Tabebuia aurea                         | broadleaf evergreen |                     |
| 155 | TAPA   | Tabebuia heterophylla                  | broadleaf evergreen |                     |
| 156 | TAOC   | Tabebuia ochracea subsp. neochrysantha | broadleaf evergreen |                     |
| 157 | TIAM   | Tilia americana                        | broadleaf deciduous |                     |
| 158 | TICO   | Tilia cordata                          | broadleaf deciduous |                     |
| 159 | TITO   | Tilia tomentosa                        | broadleaf deciduous |                     |
| 160 | TRSE6  | Triadica sebifera                      | broadleaf deciduous |                     |
| 161 | TRCO   | Tristaniopsis conferta                 | broadleaf evergreen |                     |
| 162 | ULAL   | Ulmus alata                            | broadleaf deciduous |                     |
| 163 | ULAM   | Ulmus americana                        | broadleaf deciduous |                     |
| 164 | ULPA   | Ulmus parvifolia                       | broadleaf deciduous |                     |
| 165 | ULPU   | Ulmus pumila                           | broadleaf deciduous |                     |
| 166 | VEME   | Veitchia merrillii                     | palm evergreen      |                     |
| 167 | WAFI   | Washingtonia filifera                  | palm evergreen      |                     |
| 168 | WARO   | Washingtonia robusta                   | palm evergreen      |                     |
| 169 | ZESE   | Zelkova serrata                        | broadleaf deciduous |                     |
**** species traits
think about species level traits - shade tolerance, water use,
morphology (wood, leaf, etc).

where would these come from, what would they be?  What are the traits
that are important for urban environments?



*** Cities and Climate

#+name: city_climate
| Region | City             |  CDD |  HDD | Precip |
|--------+------------------+------+------+--------|
| CenFla | Orlando, FL      | 1806 |  289 |   1367 |
| GulfCo | Charleston, SC   | 1124 | 1221 |   1555 |
| InlEmp | Claremont, CA    |  134 |  872 |    523 |
| InlVal | Modesto, CA      | 1052 | 1439 |    315 |
| SacVal | Sacramento, CA   |  773 | 1718 |    470 |
| InterW | Albuquerque, NM  |  677 | 2416 |    250 |
| LoMidW | Indianapolis, IN |  510 | 3153 |    392 |
| MidWst | Minneapolis, MN  |  355 | 4436 |    622 |
| NMtnPr | Fort Collins, CO |  349 | 3332 |    452 |
| NoCalC | Berkeley, CA     |   39 | 1786 |    564 |
| NoEast | Queens, NY       |  560 | 2819 |   1041 |
| PacfNW | Longview, WA     |  157 | 2468 |   1059 |
| Piedmt | Charlotte, NC    |  847 | 1891 |   1426 |
| SacVal | Santa Monica, CA |  266 |  710 |    570 |
| SWDsrt | Glendale, AZ     | 2128 |  637 |    174 |
| TpIntW | Boise, ID        |  387 | 3325 |    417 |
| Tropic | Honolulu, HI     | 2416 |    0 |   2206 |


*** Tree Dimensions
| Tree Dimension            | abbr |
|---------------------------+------|
| leaf area                 | la   |
| crown diameter            | cd   |
| crown height              | ch   |
| age                       | age  |
| diameter at breast height | dbh  |
| tree height               | th   |

Equations:

| Independent Variable (IV) | Dependent Variable (DV) |
|---------------------------+-------------------------|
| dbh                       | age                     |
| cd                        | dbh                     |
| dbh                       | cd                      |
| dbh                       | ch                      |
| age                       | dbh                     |
| dbh                       | la                      |
| dbh                       | th                      |

*** tidy data, age and dbh
**** load libraries
#+begin_src R :exports none
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
library(ascii)
library(tidyr)
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
RStudio Community is a great place to get help:
https://community.rstudio.com/c/tidyverse.

Attaching package: ‘tidyr’

The following object is masked from ‘package:ascii’:

    expand
#+end_example
**** functions
#+begin_src R
  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }
#+end_src

#+RESULTS:

**** read in data
#+begin_src R :exports code
d <- read_csv("../data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
#+end_src

#+RESULTS:
#+begin_example
Parsed with column specification:
cols(
  .default = col_integer(),
  Region = col_character(),
  City = col_character(),
  Source = col_character(),
  Zone = col_character(),
  `Park/Street` = col_character(),
  SpCode = col_character(),
  ScientificName = col_character(),
  CommonName = col_character(),
  TreeType = col_character(),
  street = col_character(),
  `DBH (cm)` = col_double(),
  `TreeHt (m)` = col_double(),
  CrnBase = col_double(),
  `CrnHt (m)` = col_double(),
  `CdiaPar (m)` = col_double(),
  `CDiaPerp (m)` = col_double(),
  `AvgCdia (m)` = col_double(),
  `Leaf (m2)` = col_double(),
  dbh1 = col_double()
)
See spec(...) for full column specifications.
Warning: 24255 parsing failures.
row [90m# A tibble: 5 x 5[39m col     row col   expected   actual file                                            expected   [3m[90m<int>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m      [3m[90m<chr>[39m[23m  [3m[90m<chr>[39m[23m                                           actual [90m1[39m  126[90m2[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… file [90m2[39m  126[90m3[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… row [90m3[39m  126[90m4[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… col [90m4[39m  126[90m5[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… expected [90m5[39m  126[90m6[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.…
... ........................... ... ............................................................................... ........ ............ [... truncated]
Warning message:
In rbind(names(probs), probs_f) :
  number of columns of result is not a multiple of vector length (arg 1)
#+end_example


#+begin_src R
#str(d)
#+end_src

#+RESULTS:
**** fix some species things
***** fix lower case species codes
#+begin_src R
d$SpCode <- toupper(d$SpCode)
#+end_src

#+RESULTS:
***** fix QUAG1 to be QUAG
#+begin_src R
d$SpCode[d$SpCode == "QUAG1"] <- "QUAG"
#+end_src

#+RESULTS:
***** fix common names

Not all are fixed!

#+begin_src R
  d$CommonName[d$CommonName == "Kurrajong"] <- "Kurrajong/Bottle tree"
  d$CommonName[d$CommonName == "Bottle tree"] <- "Kurrajong/Bottle tree"

  d$CommonName[d$CommonName == "Apple"] <- "Apple/Crabapple"
  d$CommonName[d$CommonName == "Crabapple"] <- "Apple/Crabapple"


  d$CommonName[d$CommonName == "silver maple"] <- "Silver maple"
  d$CommonName[d$CommonName == "camphor tree"] <- "Camphor tree"
  d$CommonName[d$CommonName == "ginkgo"] <- "Ginkgo"
  d$CommonName[d$CommonName == "honeylocust"] <- "Honeylocust"
  d$CommonName[d$CommonName == "ginkgo"] <- "Ginkgo"
  d$CommonName[d$CommonName == "common crapemyrtle"] <- "Common crapemyrtle"
  d$CommonName[d$CommonName == "sweetgum"] <- "Sweetgum"
  d$CommonName[d$CommonName == "southern magnolia"] <- "Southern magnolia"



#+end_src

#+RESULTS:

**** species are
#+name: tree_types
| TreeType | FunctionalType      |
|----------+---------------------|
| BDL      | broadleaf deciduous |
| BDM      | broadleaf deciduous |
| BDS      | broadleaf deciduous |
| BEL      | broadleaf evergreen |
| BEM      | broadleaf evergreen |
| BES      | broadleaf evergreen |
| CEL      | conifer evergreen   |
| CEM      | conifer evergreen   |
| CES      | conifer evergreen   |
| PEL      | palm evergreen      |
| PEM      | palm evergreen      |
| PES      | palm evergreen      |
I got rid of the small medium and large distinctions for
simplification here.

#+begin_src R :var tt=tree_types
  sp <- d %>% select(SpCode, ScientificName, TreeType) %>%
    left_join(tt) %>%
    select(-TreeType) %>%
    unique() %>%
    arrange(ScientificName) %>%
    ascii.nowarn.print()
#+end_src

#+RESULTS:
#+begin_example
Joining, by = "TreeType"
|     | SpCode | ScientificName                         | FunctionalType      |
|-----+--------+----------------------------------------+---------------------|
| 1   | ACFA   | Acacia farnesiana                      | broadleaf deciduous |
| 2   | ACME   | Acacia melanoxylon                     | broadleaf evergreen |
| 3   | ACSA3  | Acacia salicina                        | broadleaf evergreen |
| 4   | ACMA   | Acer macrophyllum                      | broadleaf deciduous |
| 5   | ACNE   | Acer negundo                           | broadleaf deciduous |
| 6   | ACPA   | Acer palmatum                          | broadleaf deciduous |
| 7   | ACPL   | Acer platanoides                       | broadleaf deciduous |
| 8   | ACRU   | Acer rubrum                            | broadleaf deciduous |
| 9   | ACSA1  | Acer saccharinum                       | broadleaf deciduous |
| 10  | ACSA2  | Acer saccharum                         | broadleaf deciduous |
| 11  | AEHI   | Aesculus hippocastanum                 | broadleaf deciduous |
| 12  | BABL   | Bauhinia x blakeana                    | broadleaf evergreen |
| 13  | BENI   | Betula nigra                           | broadleaf deciduous |
| 14  | BEPE   | Betula pendula                         | broadleaf deciduous |
| 15  | BRPO   | Brachychiton populneum                 | broadleaf evergreen |
| 16  | BUCA   | Butia capitata                         | palm evergreen      |
| 17  | CACI   | Callistemon citrinus                   | broadleaf evergreen |
| 18  | CADE2  | Calocedrus decurrens                   | conifer evergreen   |
| 19  | CAIN4  | Calophyllum inophyllum                 | broadleaf evergreen |
| 20  | CABEF  | Carpinus betulus 'Fastigiata'          | broadleaf deciduous |
| 21  | CAIL   | Carya illinoinensis                    | broadleaf deciduous |
| 22  | CANE33 | Cassia x nealiae                       | broadleaf deciduous |
| 23  | CAEQ   | Casuarina equisetifolia                | broadleaf evergreen |
| 24  | CASP   | Catalpa speciosa                       | broadleaf deciduous |
| 25  | CEDE   | Cedrus deodara                         | conifer evergreen   |
| 26  | CELA   | Celtis laevigata                       | conifer evergreen   |
| 27  | CEOC   | Celtis occidentalis                    | broadleaf deciduous |
| 28  | CESI4  | Celtis sinensis                        | broadleaf deciduous |
| 29  | CESI3  | Ceratonia siliqua                      | broadleaf evergreen |
| 30  | CECA   | Cercis canadensis                      | broadleaf deciduous |
| 31  | CHLI   | Chilopsis linearis                     | broadleaf deciduous |
| 32  | CICA   | Cinnamomum camphora                    | broadleaf evergreen |
| 33  | CISP2  | Citharexylum spinosum                  | broadleaf evergreen |
| 34  | CONU   | Cocos nucifera                         | palm evergreen      |
| 35  | COERA2 | Conocarpus erectus var. argenteus      | broadleaf evergreen |
| 36  | COSU2  | Cordia subcordata                      | broadleaf evergreen |
| 37  | COFL   | Cornus florida                         | broadleaf deciduous |
| 38  | CR     | Crataegus sp.                          | broadleaf deciduous |
| 39  | CRLA   | Crataegus x lavallei                   | broadleaf deciduous |
| 40  | CUAN   | Cupaniopsis anacardioides              | broadleaf evergreen |
| 41  | DERE   | Delonix regia                          | broadleaf deciduous |
| 42  | ELAN   | Elaeagnus angustifolia                 | broadleaf deciduous |
| 43  | ELOR2  | Elaeodendron orientale                 | broadleaf evergreen |
| 44  | ERJA   | Eriobotrya japonica                    | broadleaf evergreen |
| 45  | EUFI81 | Eucalyptus ficifolia                   | broadleaf evergreen |
| 46  | EUGL   | Eucalyptus globulus                    | broadleaf evergreen |
| 47  | EUMI2  | Eucalyptus microtheca                  | broadleaf evergreen |
| 48  | EUSI   | Eucalyptus sideroxylon                 | broadleaf evergreen |
| 49  | FASY   | Fagus sylvatica                        | broadleaf deciduous |
| 50  | FIBE   | Ficus benjamina                        | broadleaf evergreen |
| 51  | FIMI   | Ficus thonningii                       | broadleaf evergreen |
| 52  | FIDE6  | Filicium decipiens                     | broadleaf evergreen |
| 53  | FRAM   | Fraxinus americana                     | broadleaf deciduous |
| 54  | FRAN2  | Fraxinus angustifolia                  | broadleaf deciduous |
| 55  | FRAN_R | Fraxinus angustifolia 'Raywood'        | broadleaf deciduous |
| 56  | FREX_H | Fraxinus excelsior 'Hessei'            | broadleaf deciduous |
| 57  | FRHO   | Fraxinus holotricha                    | broadleaf deciduous |
| 58  | FRLA   | Fraxinus latifolia                     | broadleaf deciduous |
| 59  | FRPE   | Fraxinus pennsylvanica                 | broadleaf deciduous |
| 60  | FRPE_M | Fraxinus pennsylvanica 'Marshall'      | broadleaf deciduous |
| 61  | FRUH   | Fraxinus uhdei                         | broadleaf deciduous |
| 62  | FRVE   | Fraxinus velutina                      | broadleaf deciduous |
| 63  | FRVE_G | Fraxinus velutina 'Modesto'            | broadleaf deciduous |
| 64  | GIBI   | Ginkgo biloba                          | broadleaf deciduous |
| 65  | GLTR   | Gleditsia triacanthos                  | broadleaf deciduous |
| 66  | GYDI   | Gymnocladus dioicus                    | broadleaf deciduous |
| 67  | ILOP   | Ilex opaca                             | broadleaf evergreen |
| 68  | ILPA2  | Ilex paraguariensis                    | broadleaf evergreen |
| 69  | JAMI   | Jacaranda mimosifolia                  | broadleaf deciduous |
| 70  | JUNI   | Juglans nigra                          | broadleaf deciduous |
| 71  | JUVI   | Juniperus virginiana                   | conifer evergreen   |
| 72  | JUSI   | Juniperus virginiana var. silicicola   | conifer evergreen   |
| 73  | KOELFO | Koelreuteria elegans                   | broadleaf deciduous |
| 74  | KOPA   | Koelreuteria paniculata                | broadleaf deciduous |
| 75  | LAIN   | Lagerstroemia indica                   | broadleaf deciduous |
| 76  | LA6    | Lagerstroemia sp.                      | broadleaf deciduous |
| 77  | LASP   | Lagerstroemia speciosa                 | broadleaf deciduous |
| 78  | LIST   | Liquidambar styraciflua                | broadleaf deciduous |
| 79  | LITU   | Liriodendron tulipifera                | broadleaf deciduous |
| 80  | MAGR   | Magnolia grandiflora                   | broadleaf evergreen |
| 81  | PYAN   | Malus angustifolia                     | broadleaf deciduous |
| 82  | MA2    | Malus sp.                              | broadleaf deciduous |
| 83  | MEQU   | Melaleuca quinquenervia                | broadleaf evergreen |
| 84  | MEEX   | Metrosideros excelsa                   | broadleaf evergreen |
| 85  | MOAL   | Morus alba                             | broadleaf deciduous |
| 86  | MO     | Morus sp.                              | broadleaf deciduous |
| 87  | OLEU   | Olea europaea                          | broadleaf evergreen |
| 88  | PAAC   | Parkinsonia aculeata                   | broadleaf deciduous |
| 89  | CEFL   | Parkinsonia florida                    | broadleaf deciduous |
| 90  | PHCA   | Phoenix canariensis                    | palm evergreen      |
| 91  | PHDA4  | Phoenix dactylifera                    | palm evergreen      |
| 92  | PIPU   | Picea pungens                          | conifer evergreen   |
| 93  | PIBR2  | Pinus brutia                           | conifer evergreen   |
| 94  | PICA   | Pinus canariensis                      | conifer evergreen   |
| 95  | PICO   | Pinus contorta                         | conifer evergreen   |
| 96  | PIEC   | Pinus echinata                         | conifer evergreen   |
| 97  | PIED   | Pinus edulis                           | conifer evergreen   |
| 98  | PIEL2  | Pinus eldarica                         | conifer evergreen   |
| 99  | PIEL   | Pinus elliottii                        | conifer evergreen   |
| 100 | PIHA   | Pinus halepensis                       | conifer evergreen   |
| 101 | PINI   | Pinus nigra                            | conifer evergreen   |
| 102 | PIPO   | Pinus ponderosa                        | conifer evergreen   |
| 103 | PIRA   | Pinus radiata                          | conifer evergreen   |
| 104 | PIST   | Pinus strobus                          | conifer evergreen   |
| 105 | PISY   | Pinus sylvestris                       | conifer evergreen   |
| 106 | PITA   | Pinus taeda                            | conifer evergreen   |
| 107 | PITH   | Pinus thunbergiana                     | conifer evergreen   |
| 108 | PICH   | Pistacia chinensis                     | broadleaf deciduous |
| 109 | PIUN   | Pittosporum undulatum                  | broadleaf evergreen |
| 110 | PLOC   | Platanus occidentalis                  | broadleaf deciduous |
| 111 | PLRA   | Platanus racemosa                      | broadleaf deciduous |
| 112 | PLAC   | Platanus x acerifolia                  | broadleaf deciduous |
| 113 | THOR   | Platycladus orientalis                 | conifer evergreen   |
| 114 | POMA   | Podocarpus macrophyllus                | conifer evergreen   |
| 115 | POAN   | Populus angustifolia                   | broadleaf deciduous |
| 116 | POTR2  | Populus balsamifera subsp. trichocarpa | broadleaf deciduous |
| 117 | PODE   | Populus deltoides                      | broadleaf deciduous |
| 118 | POFR   | Populus fremontii                      | broadleaf deciduous |
| 119 | POSA   | Populus sargentii                      | broadleaf deciduous |
| 120 | PRCH   | Prosopis chilensis                     | broadleaf deciduous |
| 121 | PRCA   | Prunus caroliniana                     | broadleaf evergreen |
| 122 | PRCE   | Prunus cerasifera                      | broadleaf deciduous |
| 123 | PRCE   | Prunus cerasifera cvs.                 | broadleaf deciduous |
| 124 | PRSE2  | Prunus serrulata                       | broadleaf deciduous |
| 125 | PR     | Prunus sp.                             | broadleaf deciduous |
| 126 | PRYE   | Prunus yedoensis                       | broadleaf deciduous |
| 127 | PSME   | Pseudotsuga menziesii                  | conifer evergreen   |
| 128 | PYCA   | Pyrus calleryana                       | broadleaf deciduous |
| 129 | PYCA_B | Pyrus calleryana 'Bradford'            | broadleaf deciduous |
| 130 | PYCA   | Pyrus calleryana cvs.                  | broadleaf deciduous |
| 131 | PYKA   | Pyrus kawakamii                        | broadleaf evergreen |
| 132 | PY     | Pyrus sp.                              | broadleaf deciduous |
| 133 | QUAG   | Quercus agrifolia                      | broadleaf evergreen |
| 134 | QUAL   | Quercus alba                           | broadleaf deciduous |
| 135 | QUIL2  | Quercus ilex                           | broadleaf evergreen |
| 136 | QULA2  | Quercus laurifolia                     | broadleaf deciduous |
| 137 | QULO   | Quercus lobata                         | broadleaf deciduous |
| 138 | QUMA1  | Quercus macrocarpa                     | broadleaf deciduous |
| 139 | QUNI   | Quercus nigra                          | broadleaf deciduous |
| 140 | QUPA   | Quercus palustris                      | broadleaf deciduous |
| 141 | QUPH   | Quercus phellos                        | broadleaf deciduous |
| 142 | QURU   | Quercus rubra                          | broadleaf deciduous |
| 143 | QUSH   | Quercus shumardii                      | broadleaf deciduous |
| 144 | QUVI   | Quercus virginiana                     | broadleaf evergreen |
| 145 | RHLA   | Rhus lancea                            | broadleaf evergreen |
| 146 | ROPS   | Robinia pseudoacacia                   | broadleaf deciduous |
| 147 | SAPA   | Sabal palmetto                         | palm evergreen      |
| 148 | PISA2  | Samanea saman                          | broadleaf deciduous |
| 149 | SCMO   | Schinus molle                          | broadleaf evergreen |
| 150 | SCTE   | Schinus terebinthifolius               | broadleaf evergreen |
| 151 | SESE   | Sequoia sempervirens                   | conifer evergreen   |
| 152 | SWMA   | Swietenia mahagoni                     | broadleaf evergreen |
| 153 | SYRO   | Syagrus romanzoffiana                  | palm evergreen      |
| 154 | TAAR   | Tabebuia aurea                         | broadleaf evergreen |
| 155 | TAPA   | Tabebuia heterophylla                  | broadleaf evergreen |
| 156 | TAOC   | Tabebuia ochracea subsp. neochrysantha | broadleaf evergreen |
| 157 | TIAM   | Tilia americana                        | broadleaf deciduous |
| 158 | TICO   | Tilia cordata                          | broadleaf deciduous |
| 159 | TITO   | Tilia tomentosa                        | broadleaf deciduous |
| 160 | TRSE6  | Triadica sebifera                      | broadleaf deciduous |
| 161 | TRCO   | Tristaniopsis conferta                 | broadleaf evergreen |
| 162 | ULAL   | Ulmus alata                            | broadleaf deciduous |
| 163 | ULAM   | Ulmus americana                        | broadleaf deciduous |
| 164 | ULPA   | Ulmus parvifolia                       | broadleaf deciduous |
| 165 | ULPU   | Ulmus pumila                           | broadleaf deciduous |
| 166 | VEME   | Veitchia merrillii                     | palm evergreen      |
| 167 | WAFI   | Washingtonia filifera                  | palm evergreen      |
| 168 | WARO   | Washingtonia robusta                   | palm evergreen      |
| 169 | ZESE   | Zelkova serrata                        | broadleaf deciduous |
#+end_example
**** tidy a few names and select variables of interest here
#+begin_src R
d <- d %>% rename(DBH = `DBH (cm)`, Leaf = `Leaf (m2)`) %>% select(Region, City, TreeID, SpCode, DBH, Leaf, DBH, Age)
#+end_src

#+RESULTS:

#+begin_src R
summary(d$Leaf)
sum(d$Leaf == -1) / length(d$Leaf)
sum(d$DBH == -1) / length(d$DBH)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
:    -1.0    12.9   116.1   302.5   389.2  9516.0
: [1] 0.1143094
: [1] 0

#+begin_src R
  d <- filter(d, DBH != -1, Age != -1) %>%
    rename(AGE = Age)
#+end_src

#+RESULTS:
**** save data
#+begin_src R
saveRDS(d, "../data/tidy_age_dbh.rds")
#+end_src

#+RESULTS:

** Modelling

- Goal is to model tree dimensions as a function of age (and other factors).
  - I'm not doing allometric models (relating dimensions to one
    another) because
    - they are usually log-log, simpler and less interesting
    - But doing them would be a natural extension
- from simple to complex
  - single species, single location, homoskedasticity
  - single species, single location, heteroskedasticity
  - multiple species, single location, heteroskedasticity
  - multiple species, vary by climate, heteroskedasticity
- other possible extensions, but ones I maybe won't do because time constraints:
  - smarter priors (e.g. max dbh based on champion trees)
  - include possible nonlinear effects of climate on growth parameters?
- for each of these approaches follow the workflow:
  - problem
  - model
  - fake data
  - fit
  - diagnostics
  - graph fit
  - PPCs (Posterior Predictive Check)
  - Compare models
- criteria for model form
  - Theoretically realistic
    - follow what we know about biology
    - increase confidence in extrapolation
    - assymetrical sigmoidal for growth
  - Interpretable and parsimonious
    - few parameters that correspond as much as possible to an
      interpretable part of growth
  - Can fit in Stan


*** notes on how to do modeling in brms
IN STAN:
vignette("brms_nonlinear")
http://discourse.mc-stan.org/t/hierarchical-nonlinear-regression/4382/6

https://cran.r-project.org/web/packages/brms/vignettes/brms_nonlinear.html

see notes on bayesian approach in cite:Weiskittel_ForestGrowthAndYieldModeling

Approach:

Generative

Build up Complexity

heteroscedasticity:
http://discourse.mc-stan.org/t/what-prior-model-formula-should-i-use-to-account-for-heteroscedasticity/4271/2
formula = bf(Y ~ X, sigma ~ X)
example 2: https://arxiv.org/pdf/1705.11123.pdf

advanced brms:
https://journal.r-project.org/archive/2018/RJ-2018-017/index.html

about brms:
cite:buerkner_2017

**** great example explaning hamiltonian monte carlo
http://elevanth.org/blog/2017/11/28/build-a-better-markov-chain/
*** model form: Weibull
model form:
cite:Weiskittel_ForestGrowthAndYieldModeling:
"This reality should lead to model forms that are complex enough to
accurately and adequately characterize the expected major behaviors of
the population, but simple enough to avoid being overly influenced by
the sample’s peculiarities."

**** why weibull
it was good for height:

Why Weibull is a decent option:  pg116 cite:Weiskittel_ForestGrowthAndYieldModeling
#+BEGIN_QUOTE
Significant differences between model forms can exist, however, when
limited data are available. For example, Temesgen and von Gadow (2004)
found that the percentage difference in root mean square error between
the best and worst equation for five commonly used model forms varied
from 5 to 33%. Huang et al. (1992) found in their analysis that the
Chapman–Richards, Weibull, and a modified logistic-type function were
consistently among the best performing models because they were
flexible, able to assume a variety of shapes, and extrapolated well.
#+END_QUOTE

It should also be good for dbh.  height and dbh are different though:

#+BEGIN_QUOTE
A diameter growth curve would show much the same trend, except there
is a tendency toward more sustained growth rate as the tree matures
(Hann and Hanus, 2002b). While height increment may nearly cease in
maturity, diameter increment must continue in order to produce the
xylem and phloem needed for tree survival
#+END_QUOTE
**** look at weibull

\[
\beta_0  (1 - exp(\beta_1 * DBH^{\beta_2})
\]


from huang 1992

H = 1.3 + a * (1 - exp(-b*DBH^c)


from wikipedia:
cdf:
\[
1 - e^{-(x/\lambda)^k}
\]


#+begin_src R :exports results :results graphics :file ../figs/weibull_test.png

    dbh <- 1:100

      a <- 31
      b <- .0209
      c <- 1.1973
      y <- 1.3 + a * (1 - exp(-b*dbh^c))

    a <- 100
    b <- .13
    c <- .5
    age <- seq(0,100,.1)
  dbh <- 1.3 + a * (1 - exp(-b * age^c))
    plot(age, dbh)
#+end_src

#+RESULTS:
[[file:../figs/weibull_test.png]]

play with the parameters to understand the flexibility and control.

#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/ageVdbh_fram.png :bg transparent
fram <- filter(d, SpCode == "FRAM")
ggplot(fram, aes( x = AGE, y = DBH)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_fram.png]]

#+begin_src R
#  m <- nls(DBH ~ a * (1 - exp(-b * AGE^c)), fram, list(a = 100, b = .1, c = .5))
  m <- nls(DBH ~ a * (1 - exp(-b * AGE^c)), fram_ftcollins, list(a = 100, b = .1, c = .5))
#+end_src

#+RESULTS:

#+begin_src R
summary(m)
#+end_src

#+RESULTS:
#+begin_example

Formula: DBH ~ a * (1 - exp(-b * AGE^c))

Parameters:
   Estimate Std. Error t value Pr(>|t|)
a 1.298e+02  4.928e+01   2.633 0.013606 *
b 9.289e-03  2.137e-03   4.346 0.000165 ***
c 1.112e+00  1.745e-01   6.373 6.75e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 5.467 on 28 degrees of freedom

Number of iterations to convergence: 18
Achieved convergence tolerance: 1.869e-06
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/fram_test.png

  fram <- fram %>%
      mutate(pred = predict(m)) %>%
      gather(DBH, value, -Region, -City, -SpCode, -TreeID, -Leaf, -AGE)

  ggplot(fram, aes( x = AGE, y = value, color = DBH)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/fram_test.png]]


"a" can't be negative because dbh must be positive
"b" can't be negative because it causes negative growth and negative
dbh values, impossible
"c" can't be negative because it causes negative growth, impossible

#+begin_src R :exports results :results graphics :file ../figs/weibull.png
  x <- 1:100
  a <- seq(80,110,10)
  b <- 10^(-1*1:3)
  c <- seq(.5, 1.5, .5)

  d <- expand.grid(x = x,a = a, b = b, c = c)

  w <- function(a,b,c,x) a * (1 - exp(-b * x^c))

  d <- d %>%
      mutate(y = w(a,b,c,x))

  ggplot(d, aes( x = x, y = y, color =  a, group = interaction(a,b,c))) + geom_line() + facet_grid(b~c)

#+end_src

#+RESULTS:
[[file:../figs/weibull.png]]

#+begin_src R :exports results :results graphics :file ../figs/weibull_colorA.png
  x <- 1:100
  a <- seq(60,100,20)
  b <- c(.003,.006,.009)
  c <- seq(1, 1.5, .25)

  d <- expand.grid(x = x,a = a, b = b, c = c)

  w <- function(a,b,c,x) a * (1 - exp(-b * x^c))

  d <- d %>%
      mutate(y = w(a,b,c,x))

  ggplot(d, aes( x = x, y = y, color =  a, group = interaction(a,b,c))) + geom_line() + facet_grid(b~c)

#+end_src

#+RESULTS:
[[file:../figs/weibull_colorA.png]]


#+begin_src R :exports results :results graphics :file ../figs/weibull_colorB.png
  ggplot(d, aes( x = x, y = y, color =  b, group = interaction(a,b,c))) + geom_line() + facet_grid(a~c)
#+end_src

#+RESULTS:
[[file:../figs/weibull_colorB.png]]

#+begin_src R :exports results :results graphics :file ../figs/weibull_colorC.png
  ggplot(d, aes( x = x, y = y, color =  c, group = interaction(a,b,c))) + geom_line() + facet_grid(a~b)
#+end_src

#+RESULTS:
[[file:../figs/weibull_colorC.png]]

#+begin_src R :exports results :results graphics :file ../figs/w2.png
  x <- 1:100
  b <- c(.003,.006,.009)
  c <- seq(1, 1.5, .25)

  d <- expand.grid(x = x,a = a, b = b, c = c)

  w2 <- function(b,c,x) (1 - exp(-b * x^c))

  d <- d %>%
      mutate(y = w2(b,c,x))

  ggplot(d, aes( x = x, y = y, group = interaction(b,c))) + geom_line() + facet_grid(b~c)
#+end_src

#+RESULTS:
[[file:../figs/w2.png]]

#+begin_src R :exports results :results graphics :file ../figs/w3.png
  x <- 1:100
  b <- c(.003,.006,.009)
  c <- seq(1, 1.5, .25)

  d <- expand.grid(x = x,a = a, b = b, c = c)

  w3 <- function(b,c,x) exp(-b * x^c)

  d <- d %>%
      mutate(y = w3(b,c,x))

  ggplot(d, aes( x = x, y = y, group = interaction(b,c))) + geom_line() + facet_grid(b~c)
#+end_src

#+RESULTS:
[[file:../figs/w3.png]]

#+begin_src R :exports results :results graphics :file ../figs/w4.png
  x <- 1:100
  b <- c(.003,.006,.009)
  c <- seq(1, 1.5, .25)

  d <- expand.grid(x = x,a = a, b = b, c = c)

  w4 <- function(b,c,x) -b * x^c

  d <- d %>%
      mutate(y = w4(b,c,x))

  ggplot(d, aes( x = x, y = y, group = interaction(b,c))) + geom_line() + facet_grid(b~c)
#+end_src

#+RESULTS:
[[file:../figs/w4.png]]

#+begin_src R :exports results :results graphics :file ../figs/w5.png
  x <- 1:100
  c <- seq(1, 1.5, .25)
  d <- expand.grid(x = x,a = a, c = c)

  w5 <- function(c,x) x^c

  d <- d %>%
      mutate(y = w5(c,x))

  ggplot(d, aes( x = x, y = y, group = c)) + geom_line() + facet_grid(1~c)
#+end_src

#+RESULTS:
[[file:../figs/w5.png]]
*** libraries
#+begin_src R
library(dplyr)
library(brms)
library(ggplot2)
#+end_src

#+RESULTS:
: Loading required package: Rcpp
: Loading 'brms' package (version 2.3.1). Useful instructions
: can be found by typing help('brms'). A more detailed introduction
: to the package is available through vignette('brms_overview').
: Run theme_set(theme_default()) to use the default bayesplot theme.
: Warning messages:
: 1: package ‘brms’ was built under R version 3.4.4
: 2: package ‘Rcpp’ was built under R version 3.4.4

*** read in data
#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
#+end_src

#+RESULTS:

*** single species, single location, homoskedasticity
**** generate data

#+begin_src R
  n <- 100
  b0 <- 1.2
  b1 <- 2
  b2 <- 1
  sigma <- 5


  w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))
#  w <- function(a,b,c,x) a * (1 - exp(-b * x^c))

  x <- cumsum(rep((150 - 0) / n, n))
  y <- w(b0,b1,b2, x) + rnorm(n, 0, sigma)

dt <- data.frame(x, y)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/test_data_1.png
  ggplot(dt, aes(x = x, y = y)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/test_data_1.png]]

**** test model on generated data
#+begin_src R
          form <- bf(y ~ 100*b0 * (1 - exp(-(b1/100) * x ^ b2)),
                     b0 ~ 1,
                     b1 ~ 1,
                     b2 ~ 1,
                     nl = T)

  nlprior <- c(prior(normal(1, 1), nlpar = "b0"),
               prior(normal(1, 2), nlpar = "b1"),
               prior(normal(1, 2), nlpar = "b2"))

          m <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)
#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000535 seconds
1000 transitions using 10 leapfrog steps per transition would take 5.35 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000536 seconds
1000 transitions using 10 leapfrog steps per transition would take 5.36 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 18.1295 seconds (Warm-up)
               20.4265 seconds (Sampling)
               38.556 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 17.5867 seconds (Warm-up)
               22.8102 seconds (Sampling)
               40.3969 seconds (Total)
#+end_example

#+begin_src R
summary(m)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: y ~ 100 * b0 * (1 - exp(-(b1/100) * x^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
   Data: dt (Number of observations: 100)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.21      0.04     1.15     1.29        371 1.01
b1_Intercept     2.64      0.36     1.98     3.37        432 1.01
b2_Intercept     0.93      0.05     0.84     1.02        367 1.01

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     5.09      0.38     4.42     5.92        916 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example


#+begin_src R :exports results :results graphics :file ../figs/test_1_plot.png
plot(m)
#+end_src

#+RESULTS:
[[file:../figs/test_1_plot.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_1.png
  marginal_effects(m, points = T)
#+end_src

#+RESULTS:
[[file:../figs/marginal_1.png]]

#+begin_src R :exports results :results graphics :file ../figs/pairs_1.png
pairs(m)
#+end_src

#+RESULTS:
[[file:../figs/pairs_1.png]]

#+begin_src R
#standata(m)
#stancode(m)
#+end_src

**** fit model to real data
#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
fram <- filter(d, SpCode == "FRAM")
fram_ftcollins <- filter(d, SpCode == "FRAM", City == "Fort Collins, CO")
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/fram_age_dbh.png
ggplot(fram, aes(x = AGE, y = DBH,color = City)) + geom_point() + facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/fram_age_dbh.png]]

I divide b0 by 100 and multiply b1 by 100 to get the parameters on the same scale ish, with
the hopes that this speeds things up a bit.


#+begin_src R
            form <- bf(DBH ~ (b0*100) * (1 - exp(-(b1/100) * AGE ^ b2)),
                       b0 ~ 1,
                       b1 ~ 1,
                       b2 ~ 1,
                       nl = T)

     nlprior <- c(prior(gamma(1, 2), nlpar = "b0", lb = 0),
                  prior(gamma(1, 2), nlpar = "b1", lb = 0),
                  prior(gamma(1, 2), nlpar = "b2", lb = 0))


     model_fram_ftcollins_homo <- brm(form, chains = 4, cores = 2, data = fram_ftcollins,
#                                     init_r = 1,
                                     prior = nlprior,  control = list(adapt_delta = 0.8))
#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000362 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.62 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000308 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.08 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 9.83651 seconds (Warm-up)
               10.6709 seconds (Sampling)
               20.5074 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.1129 seconds (Warm-up)
               9.95994 seconds (Sampling)
               20.0729 seconds (Total)


SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 3).

Gradient evaluation took 0.000924 seconds
1000 transitions using 10 leapfrog steps per transition would take 9.24 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 4).

Gradient evaluation took 0.000323 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.23 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.9297 seconds (Warm-up)
               10.449 seconds (Sampling)
               21.3787 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.341 seconds (Warm-up)
               10.9421 seconds (Sampling)
               21.2831 seconds (Total)
#+end_example

**** diagnostics
#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_homo_pairs.png
pairs(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_homo_pairs.png]]

#+begin_src R
summary(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ (b0 * 100) * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
   Data: fram_ftcollins (Number of observations: 31)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.38      0.44     0.88     2.56        810 1.00
b1_Intercept     0.85      0.22     0.47     1.32       1266 1.00
b2_Intercept     1.14      0.13     0.93     1.44        880 1.00

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     5.62      0.80     4.38     7.42       1570 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_homo.png
plot(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_homo_marginal_effects.png
marginal_effects(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_homo_marginal_effects.png]]

**** stan code for model
#+begin_src R
stancode(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:
#+BEGIN_SRC stan
// generated with brms 2.3.1
functions {
}
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K_b0;  // number of population-level effects
  matrix[N, K_b0] X_b0;  // population-level design matrix
  int<lower=1> K_b1;  // number of population-level effects
  matrix[N, K_b1] X_b1;  // population-level design matrix
  int<lower=1> K_b2;  // number of population-level effects
  matrix[N, K_b2] X_b2;  // population-level design matrix
  // covariate vectors
  vector[N] C_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector<lower=0>[K_b0] b_b0;  // population-level effects
  vector<lower=0>[K_b1] b_b1;  // population-level effects
  vector<lower=0>[K_b2] b_b2;  // population-level effects
  real<lower=0> sigma;  // residual SD
}
transformed parameters {
}
model {
  vector[N] mu_b0 = X_b0 * b_b0;
  vector[N] mu_b1 = X_b1 * b_b1;
  vector[N] mu_b2 = X_b2 * b_b2;
  vector[N] mu;
  for (n in 1:N) {
    // compute non-linear predictor
    mu[n] = (mu_b0[n] * 100) * (1 - exp( - (mu_b1[n] / 100) * C_1[n] ^ mu_b2[n]));
  }
  // priors including all constants
  target += gamma_lpdf(b_b0 | 1, 2)
    - 1 * gamma_lccdf(0 | 1, 2);
  target += gamma_lpdf(b_b1 | 1, 2)
    - 1 * gamma_lccdf(0 | 1, 2);
  target += gamma_lpdf(b_b2 | 1, 2)
    - 1 * gamma_lccdf(0 | 1, 2);
  target += student_t_lpdf(sigma | 3, 0, 31)
    - 1 * student_t_lccdf(0 | 3, 0, 31);
  // likelihood including all constants
  if (!prior_only) {
    target += normal_lpdf(Y | mu, sigma);
  }
}
generated quantities {
}
#+END_SRC

*** single species, single location, heteroskedasticity
no sigma at low ages.  the width of a twig is genetically controlled.
There will be very little variation at age 1.
**** a simple linear model test
#+begin_src R
n <- 1000
  a <- 1
  b <- 2
  x <- seq(1,100,length.out = n)
  sigma <- .3 * x
  y <- a + b * x + rnorm(n,0,sigma)
smpl <- data.frame(x,y)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/test.png
plot(x,y)
#+end_src

#+RESULTS:
[[file:../figs/test.png]]

#+begin_src R
  form <- bf(y ~ x,
             sigma ~ x - 1)

  m_smpl <- brm(form, chains = 2, cores = 2, data = smpl, init_r = 1)
#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000411 seconds
1000 transitions using 10 leapfrog steps per transition would take 4.11 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000398 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.98 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 5.64912 seconds (Warm-up)
               4.88615 seconds (Sampling)
               10.5353 seconds (Total)

Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 6.5288 seconds (Warm-up)
               4.50444 seconds (Sampling)
               11.0332 seconds (Total)
#+end_example

#+begin_src R
summary(m_smpl)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: y ~ x
         sigma ~ x - 1
   Data: smpl (Number of observations: 1000)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Population-Level Effects:
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept     1.01      0.15     0.72     1.30       1147 1.00
x             1.99      0.01     1.97     2.01        602 1.00
sigma_x       0.05      0.00     0.05     0.05        851 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example

**** a super simple linear model test
#+begin_src R
  n <- 100
  x <- rep(seq(1,100,length.out = n/2),2)
  my_sigma_x <- 1.2
  sigma <- my_sigma_x * x
  y <- rnorm(n,0,sigma)
  simple <- data.frame(x,y)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/test.png
plot(x,y)
#+end_src

#+RESULTS:
[[file:../figs/test.png]]

#+begin_src R
  form <- bf(y ~ 1,
             sigma ~ x - 1)

  m_simple <- brm(form, chains = 2, cores = 2, data = simple, family = brmsfamily("gaussian", link_sigma = "identity"))
  m_simple <- brm(form, chains = 2, cores = 2, data = simple, family = brmsfamily("gaussian", link_sigma = "identity"))
#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000339 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.39 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).
Rejecting initial value:
  Error evaluating the log probability at the initial value.
Exception: normal_lpdf: Scale parameter[1] is -0.884546, but must be > 0!  (in 'model54b442f488a_file54b470de14ea' at line 26)


Gradient evaluation took 0.000349 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.49 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 1.17937 seconds (Warm-up)
               1.12264 seconds (Sampling)
               2.30201 seconds (Total)

Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 1.6869 seconds (Warm-up)
               1.29451 seconds (Sampling)
               2.98141 seconds (Total)
#+end_example

#+begin_src R
summary(m_simple)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: y ~ 1
         sigma ~ x - 1
   Data: simple (Number of observations: 100)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Population-Level Effects:
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept    -0.96      0.71    -2.32     0.41       1491 1.00
sigma_x       1.08      0.07     0.95     1.24       1444 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example

#+begin_src R
my_sigma_x <- c(.0001, .001,.05,.1,.3, .5, .6,.9,1.2,1.5, 2.5, 5)
stan_sigma_x <- c(-0.056, -0.03, .017, .02617, .05202, 0.0640, .076358, .0879, .10, .116, .14, .19)
d <- data.frame(my_sigma_x, stan_sigma_x)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/f.png
qplot(my_sigma_x, stan_sigma_x, d)
#+end_src

#+RESULTS:
[[file:../figs/f.png]]

#+begin_src R :exports results :results graphics :file ../figs/f_sqrtMysigmaX.png
qplot(my_sigma_x, log(stan_sigma_x), d)
#+end_src

#+RESULTS:
[[file:../figs/f_sqrtMysigmaX.png]]


hmmmmm......

#+begin_src R
linm <- lm(stan_sigma_x ~ sqrt(my_sigma_x), data = d[3:12,])
summary(linm)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = stan_sigma_x ~ sqrt(my_sigma_x), data = d[3:12,
    ])

Residuals:
       Min         1Q     Median         3Q        Max
-0.0064192 -0.0037903  0.0005439  0.0022707  0.0067205

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)
(Intercept)      0.003750   0.003014   1.244    0.249
sqrt(my_sigma_x) 0.086164   0.002680  32.153 9.54e-10 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.004888 on 8 degrees of freedom
Multiple R-squared:  0.9923,	Adjusted R-squared:  0.9914
F-statistic:  1034 on 1 and 8 DF,  p-value: 9.536e-10
#+end_example

#+begin_src R
stancode(m_simple)
#+end_src

#+RESULTS:


#+BEGIN_SRC stan :tangle simple.stan
// generated with brms 2.3.1
functions {
}
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K_sigma;  // number of population-level effects
  matrix[N, K_sigma] X_sigma;  // population-level design matrix
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  real temp_Intercept;  // temporary intercept
  vector[K_sigma] b_sigma;  // population-level effects
}
transformed parameters {
}
model {
  vector[N] mu = rep_vector(0, N) + temp_Intercept;
  vector[N] sigma = X_sigma * b_sigma;
  // priors including all constants
  target += student_t_lpdf(temp_Intercept | 3, -3, 43);
  // likelihood including all constants
  if (!prior_only) {
    target += normal_lpdf(Y | mu, sigma);
  }
}
generated quantities {
  // actual population-level intercept
  real b_Intercept = temp_Intercept;
}

#+END_SRC

#+begin_src R
m2 <- stan("simple.stan", data = standata(m_simple))
#+end_src

#+RESULTS:
#+begin_example
SYNTAX ERROR, MESSAGE(S) FROM PARSER:

Cannot assign to variable outside of declaration block; left-hand-side variable origin=parameter
  error in 'model54b46729212d_simple' at line 22, column 10
  -------------------------------------------------
    20: model {
    21:   vector[N] mu = rep_vector(0, N) + temp_Intercept;
    22:   sigma = X_sigma * b_sigma;
                 ^
    23:   for (n in 1:N) {
  -------------------------------------------------

PARSER EXPECTED: <expression assignable to left-hand side>
Error in stanc(file = file, model_code = model_code, model_name = model_name,  :
  failed to parse Stan model 'simple' due to the above error.
#+end_example

#+begin_src R
m2
#+end_src

#+RESULTS:
#+begin_example
Inference for Stan model: simple.
4 chains, each with iter=2000; warmup=1000; thin=1;
post-warmup draws per chain=1000, total post-warmup draws=4000.

                  mean se_mean   sd    2.5%     25%     50%     75%   97.5%
temp_Intercept   -0.96    0.01 0.70   -2.29   -1.43   -0.94   -0.48    0.43
b_sigma[1]        1.08    0.00 0.08    0.95    1.03    1.08    1.13    1.24
b_Intercept      -0.96    0.01 0.70   -2.29   -1.43   -0.94   -0.48    0.43
lp__           -514.52    0.02 0.99 -517.11 -514.92 -514.22 -513.79 -513.52
               n_eff Rhat
temp_Intercept  3074    1
b_sigma[1]      2818    1
b_Intercept     3074    1
lp__            1739    1

Samples were drawn using NUTS(diag_e) at Thu Aug  2 13:46:58 2018.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at
convergence, Rhat=1).
#+end_example

**** generate data
I should make the generated data have the exact same structure as the
real data, and just create one model..

#+begin_src R
    n <- 30
    b0 <- 1.2
    b1 <- 1  #2
    b2 <- 1
    sigma_x <- 0.05

    w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))

    AGE <- rep(seq(0,150,length.out = n/2),each = 2)
  #cumsum(rep((150 - 0) / n, n))

    sigma <- sigma_x * AGE

    DBH <- w(b0,b1,b2, AGE) + rnorm(n, 0, sigma)

  dt <- data.frame(AGE, DBH)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/generated_data_singleSpeciesLocation.png
  ggplot(dt, aes(x = AGE, y = DBH)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/test_data_1.png]]

**** test model on generated data
Priors
#+begin_src R :exports results :results graphics :file ../figs/ftest.png
post <- dgamma(theta,4, 3)
plot(theta, post, type = "l")
#+end_src

#+RESULTS:
[[file:../figs/ftest.png]]

#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ 1,
                     b1 ~ 1,
                     b2 ~ 1,
                     sigma ~ AGE - 1,
                     nl = T)

  nlprior <- c(prior(gamma(2, 1), nlpar = "b0",lb = 0),
               prior(gamma(2, 1), nlpar = "b1",lb = 0),
               prior(gamma(2, 1), nlpar = "b2",lb = 0))

          m <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+RESULTS:
#+begin_example

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).
Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.
Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.

Gradient evaluation took 0.00017 seconds
1000 transitions using 10 leapfrog steps per transition would take 1.7 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000493 seconds
1000 transitions using 10 leapfrog steps per transition would take 4.93 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 11.2416 seconds (Warm-up)
               12.0861 seconds (Sampling)
               23.3277 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 12.8443 seconds (Warm-up)
               13.1528 seconds (Sampling)
               25.9971 seconds (Total)
#+end_example

#+begin_src R
summary(m)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ AGE - 1
   Data: dt (Number of observations: 30)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.65      0.46     1.12     2.90        259 1.00
b1_Intercept     0.94      0.13     0.65     1.19        467 1.00
b2_Intercept     0.92      0.05     0.82     1.03        310 1.00
sigma_AGE        0.02      0.00     0.01     0.02       1149 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/test_1_plot.png
plot(m)
#+end_src

#+RESULTS:
[[file:../figs/test_1_plot.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_1.png
  me <-   marginal_effects(m)
me

#+end_src

#+RESULTS:
[[file:../figs/marginal_1.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_pts.png
#  me <-   marginal_effects(m)
  ggplot() + geom_line(data = me$AGE, aes(x = AGE, y = estimate__)) +
    geom_ribbon(data = me$AGE, alpha = .2, aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__)) +
      geom_point(data = dt, aes(x = AGE, y = DBH))

#+end_src

#+RESULTS:
[[file:../figs/marginal_pts.png]]


#+begin_src R :exports results :results graphics :file ../figs/pairs_1.png
pairs(m)
#+end_src

#+RESULTS:
[[file:../figs/pairs_1.png]]

***** posterior transform to get back original sigma

Extract the posterior samples via posterior_samples, transform them
via exp and then summarize via posterior_summary. But keep in mind
that a linear effect on the log scale becomes multiplicative effect
after back-transforming on the identity scale.

#+begin_src R
posterior_samples(
#+end_src

**** fit model to real data
#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
fram <- filter(d, SpCode == "FRAM")
fram_ftcollins <- filter(d, SpCode == "FRAM", City == "Fort Collins, CO")
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/fram_age_dbh.png
ggplot(fram, aes(x = AGE, y = DBH,color = City)) + geom_point() + facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/fram_age_dbh.png]]

I divide b0 by 100 and multiply b1 by 100 to get the parameters on the same scale ish, with
the hopes that this speeds things up a bit.

#+begin_src R :exports results :results graphics :file ../figs/fasdfa.png
ggplot(mapping = aes(x = AGE, y = DBH)) + geom_point(data = dt, color = "red") + geom_point(data = fram_ftcollins, color = "blue")
#+end_src

#+RESULTS:
[[file:../figs/fasdfa.png]]

#+begin_src R
  model_fram_ftcollins_hetero <- update(m, newdata = fram_ftcollins)
#+end_src

#+RESULTS:
#+begin_example
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000278 seconds
1000 transitions using 10 leapfrog steps per transition would take 2.78 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.9521 seconds (Warm-up)
               13.461 seconds (Sampling)
               24.4132 seconds (Total)


SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000189 seconds
1000 transitions using 10 leapfrog steps per transition would take 1.89 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.8105 seconds (Warm-up)
               11.6145 seconds (Sampling)
               22.4249 seconds (Total)
#+end_example

**** diagnostics
#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_hetero_pairs.png
pairs(model_fram_ftcollins_hetero)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_hetero_pairs.png]]

#+begin_src R
summary(model_fram_ftcollins_hetero)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ AGE - 1
   Data: fram_ftcollins (Number of observations: 31)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.82      0.85     0.83     3.97        432 1.00
b1_Intercept     0.77      0.26     0.32     1.34        568 1.00
b2_Intercept     1.10      0.07     0.98     1.26        535 1.01
sigma_AGE        0.05      0.00     0.05     0.06        982 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_hetero.png
plot(model_fram_ftcollins_hetero)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_hetero.png]]

#+begin_src R :exports results :results graphics :file ../figs/model_fram_ftcollins_hetero_marginal_effects.png
marginal_effects(model_fram_ftcollins_hetero)
#+end_src

#+RESULTS:
[[file:../figs/model_fram_ftcollins_hetero_marginal_effects.png]]

****
**** stan code for model
#+begin_src R
stancode(model_fram_ftcollins_homo)
#+end_src

#+RESULTS:

*** single species, multiple locations, homoskedasticyt..sysgnsy
**** generate data

#+begin_src R
  k <- 4
  n <- 100
  breaks <- c(0,sort(sample(1:100,(k-1))),n)
  nk <- sapply(1:k, function(i) breaks[i+1] - breaks[i])
  nk

  mu_b0 <- 1.2
  sigma_b0 <- .2
  mu_b1 <- 2
  sigma_b1 <- .2
  mu_b2 <- 1
  sigma_b2 <- .2

  sigma <- 3

  b0 <- rnorm(k, mu_b0, sigma_b0)
  b1 <- rnorm(k, mu_b1, sigma_b1)
  b2 <- rnorm(k, mu_b2, sigma_b2)

  w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))


  AGE <- rep(seq(0,150,length.out = n/2),each = 2) %>%
      sample  #to randomly shuffle

  DBH <- sapply(1:k, function(i) w(b0[i], b1[i], b2[i], AGE[seq(breaks[i]+1,breaks[i+1])]) + rnorm(nk[i], 0, sigma)) %>% unlist

  City <- rep(letters[1:k], times = nk)

  dt <- data.frame(AGE, DBH, City)
#+end_src

#+RESULTS:
: [1]  9 48 15 28

#+begin_src R :exports results :results graphics :file ../figs/test_data_1.png
  ggplot(dt, aes(x = AGE, y = DBH, color = City)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/test_data_1.png]]

**** fit to generated data

#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ (1 | City),
                     b1 ~ (1 | City),
                     b2 ~ (1 | City),
                     nl = T)

  nlprior <- c(prior(gamma(4, 3), nlpar = "b0",lb = 0),
               prior(gamma(4, 3), nlpar = "b1",lb = 0),
               prior(gamma(4, 3), nlpar = "b2",lb = 0))

m_generated_singleSpecies_multipleLocations_homo <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.001119 seconds
1000 transitions using 10 leapfrog steps per transition would take 11.19 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.00073 seconds
1000 transitions using 10 leapfrog steps per transition would take 7.3 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 258.285 seconds (Warm-up)
               273.645 seconds (Sampling)
               531.929 seconds (Total)

Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 262.007 seconds (Warm-up)
               366.854 seconds (Sampling)
               628.861 seconds (Total)

Warning messages:
1: There were 53 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
2: There were 253 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See
http://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded
3: Examine the pairs() plot to diagnose sampling problems
#+end_example

#+begin_src R
summary(m_generated_singleSpecies_multipleLocations_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ (1 | City)
         b1 ~ (1 | City)
         b2 ~ (1 | City)
   Data: dt (Number of observations: 100)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.55      0.39     0.18     1.65        433 1.00
sd(b1_Intercept)     1.06      0.84     0.13     3.34        689 1.01
sd(b2_Intercept)     0.16      0.12     0.02     0.50        544 1.00

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.29      0.28     0.67     1.85        486 1.01
b1_Intercept     1.74      0.46     0.72     2.57        856 1.00
b2_Intercept     0.95      0.10     0.75     1.20        405 1.00

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     2.86      0.23     2.44     3.37       2000 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 53 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/pairs_m_generated_singleSpecies_multipleLocations_homo.png
pairs(m_generated_singleSpecies_multipleLocations_homo)
#+end_src

#+RESULTS:
[[file:../figs/pairs_m_generated_singleSpecies_multipleLocations_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/plot_m_generated_singleSpecies_multipleLocations_homo.png
library(bayesplot)
mcmc_trace(as.matrix(m_generated_singleSpecies_multipleLocations_homo))
#+end_src

#+RESULTS:
[[file:../figs/plot_m_generated_singleSpecies_multipleLocations_homo.png]]


#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_homo.png
  #cond <- data.frame(City = c("a","b","c","d"))
  #marginal_effects(m_generated_singleSpecies_multipleLocations_homo, points = T, conditions = cond)
  me <- marginal_effects(m_generated_singleSpecies_multipleLocations_homo,
                         effects = c("AGE"))
  plot(me)
#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_pts_all.png

    ggplot() +
        geom_ribbon(data = me$AGE, alpha = .3, aes(x = AGE, ymin = estimate__ - se__,  ymax = estimate__ + se__, group = City)) +
        geom_line(data = me$AGE, aes(x = AGE, y = estimate__, color = City)) +
        geom_point(data = dt, aes(x = AGE, y = DBH, color = City))

     #  geom_ribbon(data = me$AGE, alpha = .2, aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__)) +
      #   geom_point(data = dt, aes(x = AGE, y = DBH))

#+end_src

#+RESULTS:
[[file:../figs/marginal_pts_all.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_homo_conditionalCity.png
  cond <- data.frame(City = c("a","b","c","d"))
  #marginal_effects(m_generated_singleSpecies_multipleLocations_homo, points = T)
  me <- marginal_effects(m_generated_singleSpecies_multipleLocations_homo,
                         effects = c("AGE"), conditions = cond)
  plot(me)
#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_homo_conditionalCity.png]]

#+begin_src R :exports results :results graphics :file ../figs/posterior_pred.png
pp_check(m_generated_singleSpecies_multipleLocations_homo)
#+end_src

#+RESULTS:
[[file:../figs/posterior_pred.png]]

#+begin_src R
stancode(m_generated_singleSpecies_multipleLocations_homo)
#+end_src

#+RESULTS:

#+BEGIN_SRC stan
// generated with brms 2.3.1
functions {
}
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K_b0;  // number of population-level effects
  matrix[N, K_b0] X_b0;  // population-level design matrix
  int<lower=1> K_b1;  // number of population-level effects
  matrix[N, K_b1] X_b1;  // population-level design matrix
  int<lower=1> K_b2;  // number of population-level effects
  matrix[N, K_b2] X_b2;  // population-level design matrix
  // covariate vectors
  vector[N] C_1;
  // data for group-level effects of ID 1
  int<lower=1> J_1[N];
  int<lower=1> N_1;
  int<lower=1> M_1;
  vector[N] Z_1_b0_1;
  // data for group-level effects of ID 2
  int<lower=1> J_2[N];
  int<lower=1> N_2;
  int<lower=1> M_2;
  vector[N] Z_2_b1_1;
  // data for group-level effects of ID 3
  int<lower=1> J_3[N];
  int<lower=1> N_3;
  int<lower=1> M_3;
  vector[N] Z_3_b2_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector<lower=0>[K_b0] b_b0;  // population-level effects
  vector<lower=0>[K_b1] b_b1;  // population-level effects
  vector<lower=0>[K_b2] b_b2;  // population-level effects
  real<lower=0> sigma;  // residual SD
  vector<lower=0>[M_1] sd_1;  // group-level standard deviations
  vector[N_1] z_1[M_1];  // unscaled group-level effects
  vector<lower=0>[M_2] sd_2;  // group-level standard deviations
  vector[N_2] z_2[M_2];  // unscaled group-level effects
  vector<lower=0>[M_3] sd_3;  // group-level standard deviations
  vector[N_3] z_3[M_3];  // unscaled group-level effects
}
transformed parameters {
  // group-level effects
  vector[N_1] r_1_b0_1 = sd_1[1] * (z_1[1]);
  // group-level effects
  vector[N_2] r_2_b1_1 = sd_2[1] * (z_2[1]);
  // group-level effects
  vector[N_3] r_3_b2_1 = sd_3[1] * (z_3[1]);
}
model {
  vector[N] mu_b0 = X_b0 * b_b0;
  vector[N] mu_b1 = X_b1 * b_b1;
  vector[N] mu_b2 = X_b2 * b_b2;
  vector[N] mu;
  for (n in 1:N) {
    mu_b0[n] += r_1_b0_1[J_1[n]] * Z_1_b0_1[n];
    mu_b1[n] += r_2_b1_1[J_2[n]] * Z_2_b1_1[n];
    mu_b2[n] += r_3_b2_1[J_3[n]] * Z_3_b2_1[n];
    // compute non-linear predictor
    mu[n] = 100 * mu_b0[n] * (1 - exp( - (mu_b1[n] / 100) * C_1[n] ^ mu_b2[n]));
  }
  // priors including all constants
  target += gamma_lpdf(b_b0 | 2, 1)
    - 1 * gamma_lccdf(0 | 2, 1);
  target += gamma_lpdf(b_b1 | 2, 1)
    - 1 * gamma_lccdf(0 | 2, 1);
  target += gamma_lpdf(b_b2 | 2, 1)
    - 1 * gamma_lccdf(0 | 2, 1);
  target += student_t_lpdf(sigma | 3, 0, 31)
    - 1 * student_t_lccdf(0 | 3, 0, 31);
  target += student_t_lpdf(sd_1 | 3, 0, 31)
    - 1 * student_t_lccdf(0 | 3, 0, 31);
  target += normal_lpdf(z_1[1] | 0, 1);
  target += student_t_lpdf(sd_2 | 3, 0, 31)
    - 1 * student_t_lccdf(0 | 3, 0, 31);
  target += normal_lpdf(z_2[1] | 0, 1);
  target += student_t_lpdf(sd_3 | 3, 0, 31)
    - 1 * student_t_lccdf(0 | 3, 0, 31);
  target += normal_lpdf(z_3[1] | 0, 1);
  // likelihood including all constants
  if (!prior_only) {
    target += normal_lpdf(Y | mu, sigma);
  }
}
generated quantities {
}
#+END_SRC

**** fit to real data
#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
fram <- filter(d, SpCode == "FRAM")
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/fram_age_dbh.png
ggplot(fram, aes(x = AGE, y = DBH,color = City)) + geom_point() + facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/fram_age_dbh.png]]

#+begin_src R

  model_fram_homo <- update(m_generated_singleSpecies_multipleLocations_homo, newdata = fram, cores = 2, control = list(adapt_delta = .9))

#+end_src

#+begin_src R
model_fram_homo
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ (1 | City)
         b1 ~ (1 | City)
         b2 ~ (1 | City)
   Data: fram (Number of observations: 129)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.41      0.52     0.01     1.96        498 1.00
sd(b1_Intercept)     0.40      0.44     0.01     1.47        484 1.01
sd(b2_Intercept)     0.13      0.14     0.00     0.51        454 1.00

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.45      0.37     0.88     2.34        710 1.00
b1_Intercept     1.14      0.28     0.58     1.72        791 1.00
b2_Intercept     1.06      0.11     0.86     1.30        528 1.00

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     6.42      0.41     5.68     7.24       2000 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 32 divergent transitions after warmup. Increasing adapt_delta above 0.9 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

**** diagnostics
#+begin_src R :exports results :results graphics :file ../figs/trace_model_fram_homo.png
mcmc_trace(as.matrix(model_fram_homo))
#+end_src

#+RESULTS:
[[file:../figs/trace_model_fram_homo.png]]

**** marginal effects
#+begin_src R :exports results :results graphics :file ../figs/marginal_fram_homo.png
marginal_effects(model_fram_homo)
#+end_src

#+RESULTS:
[[file:../figs/marginal_fram_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_fram_homo_Cities.png
  cond <- data.frame(City = unique(fram$City))
marginal_effects(model_fram_homo, re_formula = NULL, conditions = cond)
#+end_src

#+RESULTS:
[[file:../figs/marginal_fram_homo_Cities.png]]


#+begin_src R :exports results :results graphics :file ../figs/marginal_fram_homo_city_wPoints.png
  cond <- data.frame(City = unique(fram$City))
  me <- marginal_effects(model_fram_homo, conditions = cond, re_formula = NULL)
  #me
  ggplot(me$AGE) +
      geom_line(aes(x = AGE, y = estimate__)) +
    geom_ribbon(aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__), alpha = .3, fill = "blue") +
    geom_point(data = fram, aes(x = AGE, y = DBH)) +
      facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/marginal_fram_homo_city_wPoints.png]]

*** single species, multiple locations, precipitation predictors for locations, homoskedasticy
I'll do other climate predictors when I have more locations, I only
have 4 now which isn't enough for multiple group level predictors.

**** generate data
#+begin_src R
    k <- 5
    expect_nk <- 30
    n <- k * expect_nk
    breaks <- c(0,sort(sample(1:100,(k-1))),n)
    nk <- sapply(1:k, function(i) breaks[i+1] - breaks[i])
    nk

  precip <- c(600, 400, 400, 250, 800) / 1000
  precip <- precip - mean(precip)

    u_precip_b0 <- 1
    u_precip_b1 <- .5
    u_precip_b2 <- .5

    #with centered city level predictors this is the mean
    u_intercept_b0 <- 1
    u_intercept_b1 <- 1
    u_intercept_b2 <- 1

      mu_b0 <- u_intercept_b0 + u_precip_b0 * precip
      sigma_b0 <- .1
      mu_b1 <-  u_intercept_b1 + u_precip_b1 * precip
      sigma_b1 <- .1
      mu_b2 <-  u_intercept_b2 + u_precip_b2 * precip
      sigma_b2 <- .1

      sigma <- 3

      b0 <- rnorm(k, mu_b0, sigma_b0)
      b1 <- rnorm(k, mu_b1, sigma_b1)
      b2 <- rnorm(k, mu_b2, sigma_b2)

      w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))


      AGE <- rep(seq(0,150,length.out = n/2),each = 2) %>%
          sample  #to randomly shuffle

      DBH <- sapply(1:k, function(i) w(b0[i], b1[i], b2[i], AGE[seq(breaks[i]+1,breaks[i+1])]) + rnorm(nk[i], 0, sigma)) %>% unlist

    City <- rep(letters[1:k], times = nk)
    Precip <- rep(precip, times = nk)


    dt <- data.frame(AGE, DBH, City, Precip)
#+end_src

#+RESULTS:
: [1] 22 16  3 46 63

#+begin_src R :exports results :results graphics :file ../figs/test_data_singleSpecies_multipleLocations_PrecipCityPred.png :height 200
library(gridExtra)
pc <-   ggplot(dt, aes(x = AGE, y = DBH, color = City)) + geom_point()
pp <-   ggplot(dt, aes(x = AGE, y = DBH, color = Precip)) + geom_point()
grid.arrange(pc,pp, nrow =1)
#+end_src

#+RESULTS:
[[file:../figs/test_data_singleSpecies_multipleLocations_PrecipCityPred.png]]

**** fit to generated data

#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ Precip + (1 | City),
                     b1 ~ Precip + (1 | City),
                     b2 ~ Precip + (1 | City),
                     nl = T)

  nlprior <- c(prior(gamma(4, 3), nlpar = "b0",lb = 0),
               prior(gamma(4, 3), nlpar = "b1",lb = 0),
               prior(gamma(4, 3), nlpar = "b2",lb = 0))

m_generated_singleSpecies_multipleLocations_GroupPred_homo <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+begin_src R
summary(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ Precip + (1 | City)
         b1 ~ Precip + (1 | City)
         b2 ~ Precip + (1 | City)
   Data: dt (Number of observations: 150)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 5)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.15      0.18     0.00     0.69        479 1.00
sd(b1_Intercept)     0.24      0.26     0.01     0.92        814 1.00
sd(b2_Intercept)     0.07      0.09     0.00     0.29        536 1.00

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     0.98      0.15     0.75     1.35        608 1.00
b0_Precip        1.06      0.36     0.45     1.80       1521 1.00
b1_Intercept     0.99      0.18     0.68     1.39        939 1.00
b1_Precip        0.82      0.39     0.25     1.71       2000 1.00
b2_Intercept     0.92      0.06     0.80     1.04        908 1.00
b2_Precip        0.57      0.21     0.25     1.09        929 1.00

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     3.00      0.18     2.67     3.38       2000 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 16 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

It recovered the true values pretty well, though there is definitely
more uncertainty.


#+begin_src R :exports results :results graphics :file ../figs/pairs_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png :width 1000 :height 1000
pairs(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
[[file:../figs/pairs_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/plot_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png
library(bayesplot)
mcmc_trace(as.matrix(m_generated_singleSpecies_multipleLocations_GroupPred_homo))
#+end_src

#+RESULTS:
[[file:../figs/plot_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png
  me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo, effects = c("AGE:Precip"))
  me

#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]


#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_Precip.png

me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo, effects = c("Precip"))
  me


#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_Precip.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_City.png
      cond <- data.frame(City = unique(dt$City))
        me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo,
                               conditions = cond,
                               effects = "AGE",
                               re_formula = NULL)
        me

#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_City.png]]

#+begin_src R :exports results :results graphics :file ../figs/posterior_pred.png
pp_check(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
[[file:../figs/posterior_pred.png]]

#+begin_src R
stancode(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+BEGIN_SRC stan
// generated with brms 2.3.1
functions {
}
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K_b0;  // number of population-level effects
  matrix[N, K_b0] X_b0;  // population-level design matrix
  int<lower=1> K_b1;  // number of population-level effects
  matrix[N, K_b1] X_b1;  // population-level design matrix
  int<lower=1> K_b2;  // number of population-level effects
  matrix[N, K_b2] X_b2;  // population-level design matrix
  // covariate vectors
  vector[N] C_1;
  // data for group-level effects of ID 1
  int<lower=1> J_1[N];
  int<lower=1> N_1;
  int<lower=1> M_1;
  vector[N] Z_1_b0_1;
  // data for group-level effects of ID 2
  int<lower=1> J_2[N];
  int<lower=1> N_2;
  int<lower=1> M_2;
  vector[N] Z_2_b1_1;
  // data for group-level effects of ID 3
  int<lower=1> J_3[N];
  int<lower=1> N_3;
  int<lower=1> M_3;
  vector[N] Z_3_b2_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector<lower=0>[K_b0] b_b0;  // population-level effects
  vector<lower=0>[K_b1] b_b1;  // population-level effects
  vector<lower=0>[K_b2] b_b2;  // population-level effects
  real<lower=0> sigma;  // residual SD
  vector<lower=0>[M_1] sd_1;  // group-level standard deviations
  vector[N_1] z_1[M_1];  // unscaled group-level effects
  vector<lower=0>[M_2] sd_2;  // group-level standard deviations
  vector[N_2] z_2[M_2];  // unscaled group-level effects
  vector<lower=0>[M_3] sd_3;  // group-level standard deviations
  vector[N_3] z_3[M_3];  // unscaled group-level effects
}
transformed parameters {
  // group-level effects
  vector[N_1] r_1_b0_1 = sd_1[1] * (z_1[1]);
  // group-level effects
  vector[N_2] r_2_b1_1 = sd_2[1] * (z_2[1]);
  // group-level effects
  vector[N_3] r_3_b2_1 = sd_3[1] * (z_3[1]);
}
model {
  vector[N] mu_b0 = X_b0 * b_b0;
  vector[N] mu_b1 = X_b1 * b_b1;
  vector[N] mu_b2 = X_b2 * b_b2;
  vector[N] mu;
  for (n in 1:N) {
    mu_b0[n] += r_1_b0_1[J_1[n]] * Z_1_b0_1[n];
    mu_b1[n] += r_2_b1_1[J_2[n]] * Z_2_b1_1[n];
    mu_b2[n] += r_3_b2_1[J_3[n]] * Z_3_b2_1[n];
    // compute non-linear predictor
    mu[n] = 100 * mu_b0[n] * (1 - exp( - (mu_b1[n] / 100) * C_1[n] ^ mu_b2[n]));
  }
  // priors including all constants
  target += gamma_lpdf(b_b0 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += gamma_lpdf(b_b1 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += gamma_lpdf(b_b2 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += student_t_lpdf(sigma | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += student_t_lpdf(sd_1 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_1[1] | 0, 1);
  target += student_t_lpdf(sd_2 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_2[1] | 0, 1);
  target += student_t_lpdf(sd_3 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_3[1] | 0, 1);
  // likelihood including all constants
  if (!prior_only) {
    target += normal_lpdf(Y | mu, sigma);
  }
}
generated quantities {
}
#+END_SRC

**** fit to real data
#+begin_src R :var clim=city_climate

    fram_clim <- left_join(fram,clim) %>%
        mutate(Precip = (Precip - mean(Precip))/ 1000)
#+end_src

#+begin_src R :exports results :results graphics :file ../figs/fram_clim.png :height 200 :width 700
pc <-   ggplot(fram_clim, aes(x = AGE, y = DBH, color = City)) + geom_point()
pp <-   ggplot(fram_clim, aes(x = AGE, y = DBH, color = Precip)) + geom_point()
grid.arrange(pc,pp, nrow =1)
#+end_src

#+RESULTS:
[[file:../figs/fram_clim.png]]

#+begin_src R
model_fram_precip_homo <- update(m_generated_singleSpecies_multipleLocations_GroupPred_homo, chains = 2, cores = 2, newdata = fram_clim)
#+end_src

#+RESULTS:
#+begin_example
Joining, by = c("Region", "City")
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).
Rejecting initial value:
  Error evaluating the log probability at the initial value.
Exception: normal_lpdf: Location parameter[1] is -inf, but must be finite!  (in 'model54b426e2cace_file54b451782573' at line 86)

Rejecting initial value:
  Error evaluating the log probability at the initial value.
Exception: normal_lpdf: Location parameter[34] is -inf, but must be finite!  (in 'model54b426e2cace_file54b451782573' at line 86)

Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.

Gradient evaluation took 0.000772 seconds
1000 transitions using 10 leapfrog steps per transition would take 7.72 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).
Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.

Gradient evaluation took 0.000689 seconds
1000 transitions using 10 leapfrog steps per transition would take 6.89 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 202.195 seconds (Warm-up)
               158.382 seconds (Sampling)
               360.577 seconds (Total)

Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 240.758 seconds (Warm-up)
               207.24 seconds (Sampling)
               447.998 seconds (Total)

Warning messages:
1: There were 113 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
2: Examine the pairs() plot to diagnose sampling problems
#+end_example


#+begin_src R
model_fram_precip_homo
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ Precip + (1 | City)
         b1 ~ Precip + (1 | City)
         b2 ~ Precip + (1 | City)
   Data: fram_clim (Number of observations: 129)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.62      0.74     0.01     2.64        478 1.00
sd(b1_Intercept)     0.40      0.37     0.01     1.34        556 1.00
sd(b2_Intercept)     0.36      0.28     0.04     1.12        213 1.01

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.44      0.41     0.78     2.46        764 1.01
b0_Precip        1.20      0.60     0.36     2.68       1262 1.00
b1_Intercept     1.13      0.28     0.62     1.70        546 1.00
b1_Precip        1.25      0.59     0.37     2.68       1483 1.00
b2_Intercept     1.08      0.19     0.67     1.47        298 1.00
b2_Precip        0.96      0.52     0.25     2.23        288 1.01

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     6.39      0.42     5.66     7.28        904 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 113 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

**** diagnostics
#+begin_src R :exports results :results graphics :file ../figs/mcmctrace_fram_precip_homo.png
mcmc_trace(as.matrix(model_fram_precip_homo))
#+end_src

#+RESULTS:
[[file:../figs/mcmctrace_fram_precip_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/pp_check_fram_precip_homo.png
pp_check(model_fram_precip_homo)
#+end_src

#+RESULTS:
[[file:../figs/pp_check_fram_precip_homo.png]]
Not great.  I think the problem arises because the effect of Precip on
the parameters may not be linear.  Also, I may need to include
Temperature related covariates

**** marginal effects
#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_ageprecip_homo.png
marginal_effects(model_fram_precip_homo, effects = "AGE:Precip")
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_ageprecip_homo.png]]


Very cool, as precip increases, so does dbh.  But there is high uncertainty.

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_ageprecip_homo_Points.png
  conditions <- data.frame(Precip = unique(fram_clim$Precip))
  me <- marginal_effects(model_fram_precip_homo, effects = "AGE", conditions = conditions, re_formula = NA)
#me
  ggplot(me$AGE) +
        geom_line(aes(x = AGE, y = estimate__)) +
      geom_ribbon(aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__), alpha = .3, fill = "blue") +
      geom_point(data = fram_clim, aes(x = AGE, y = DBH)) +
      facet_wrap(~Precip)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_ageprecip_homo_Points.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_precip_homo.png
marginal_effects(model_fram_precip_homo, effects = "Precip")
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_precip_homo.png]]

*** single species, multiple locations, multiple climate predictors for locations, homoskedasticy
I'll do other climate predictors when I have more locations, I only
have 4 now which isn't enough for multiple group level predictors.

**** generate data
#+begin_src R
    k <- 5
    expect_nk <- 30
    n <- k * expect_nk
    breaks <- c(0,sort(sample(1:100,(k-1))),n)
    nk <- sapply(1:k, function(i) breaks[i+1] - breaks[i])
    nk

  clim.gen <- filter(clim, Region %in% c("GulfCo", "SWDsrt", "MidWst","NMtnPr", "NoCalC")) %>%
      mutate(CDD = (CDD - mean(CDD)) / 1000,
             HDD = (HDD - mean(HDD)) / 1000,
             Precip = (Precip - mean(Precip)) / 1000)

  precip <- clim.gen$Precip
  hdd <- clim.gen$HDD
  cdd <- clim.gen$CDD

  u_precip_b0 <- 1
    u_precip_b1 <- .5
    u_precip_b2 <- .5

    #with centered city level predictors this is the mean
    u_intercept_b0 <- 1
    u_intercept_b1 <- 1
    u_intercept_b2 <- 1

      mu_b0 <- u_intercept_b0 + u_precip_b0 * precip
      sigma_b0 <- .1
      mu_b1 <-  u_intercept_b1 + u_precip_b1 * precip
      sigma_b1 <- .1
      mu_b2 <-  u_intercept_b2 + u_precip_b2 * precip
      sigma_b2 <- .1

      sigma <- 3

      b0 <- rnorm(k, mu_b0, sigma_b0)
      b1 <- rnorm(k, mu_b1, sigma_b1)
      b2 <- rnorm(k, mu_b2, sigma_b2)

      w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))


      AGE <- rep(seq(0,150,length.out = n/2),each = 2) %>%
          sample  #to randomly shuffle

      DBH <- sapply(1:k, function(i) w(b0[i], b1[i], b2[i], AGE[seq(breaks[i]+1,breaks[i+1])]) + rnorm(nk[i], 0, sigma)) %>% unlist

    City <- rep(letters[1:k], times = nk)
    Precip <- rep(precip, times = nk)


    dt <- data.frame(AGE, DBH, City, Precip)
#+end_src

#+RESULTS:
: [1] 22 16  3 46 63

#+begin_src R :exports results :results graphics :file ../figs/test_data_singleSpecies_multipleLocations_PrecipCityPred.png :height 200
library(gridExtra)
pc <-   ggplot(dt, aes(x = AGE, y = DBH, color = City)) + geom_point()
pp <-   ggplot(dt, aes(x = AGE, y = DBH, color = Precip)) + geom_point()
grid.arrange(pc,pp, nrow =1)
#+end_src

#+RESULTS:
[[file:../figs/test_data_singleSpecies_multipleLocations_PrecipCityPred.png]]

**** fit to generated data

#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ Precip + (1 | City),
                     b1 ~ Precip + (1 | City),
                     b2 ~ Precip + (1 | City),
                     nl = T)

  nlprior <- c(prior(gamma(4, 3), nlpar = "b0",lb = 0),
               prior(gamma(4, 3), nlpar = "b1",lb = 0),
               prior(gamma(4, 3), nlpar = "b2",lb = 0))

m_generated_singleSpecies_multipleLocations_GroupPred_homo <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+begin_src R
summary(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ Precip + (1 | City)
         b1 ~ Precip + (1 | City)
         b2 ~ Precip + (1 | City)
   Data: dt (Number of observations: 150)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 5)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.15      0.18     0.00     0.69        479 1.00
sd(b1_Intercept)     0.24      0.26     0.01     0.92        814 1.00
sd(b2_Intercept)     0.07      0.09     0.00     0.29        536 1.00

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     0.98      0.15     0.75     1.35        608 1.00
b0_Precip        1.06      0.36     0.45     1.80       1521 1.00
b1_Intercept     0.99      0.18     0.68     1.39        939 1.00
b1_Precip        0.82      0.39     0.25     1.71       2000 1.00
b2_Intercept     0.92      0.06     0.80     1.04        908 1.00
b2_Precip        0.57      0.21     0.25     1.09        929 1.00

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     3.00      0.18     2.67     3.38       2000 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 16 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

It recovered the true values pretty well, though there is definitely
more uncertainty.


#+begin_src R :exports results :results graphics :file ../figs/pairs_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png :width 1000 :height 1000
pairs(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
[[file:../figs/pairs_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/plot_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png
library(bayesplot)
mcmc_trace(as.matrix(m_generated_singleSpecies_multipleLocations_GroupPred_homo))
#+end_src

#+RESULTS:
[[file:../figs/plot_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png
  me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo, effects = c("AGE:Precip"))
  me

#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo.png]]


#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_Precip.png

me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo, effects = c("Precip"))
  me


#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_Precip.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_City.png
      cond <- data.frame(City = unique(dt$City))
        me <- marginal_effects(m_generated_singleSpecies_multipleLocations_GroupPred_homo,
                               conditions = cond,
                               effects = "AGE",
                               re_formula = NULL)
        me

#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_singleSpecies_multipleLocations_GroupPred_homo_City.png]]

#+begin_src R :exports results :results graphics :file ../figs/posterior_pred.png
pp_check(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+RESULTS:
[[file:../figs/posterior_pred.png]]

#+begin_src R
stancode(m_generated_singleSpecies_multipleLocations_GroupPred_homo)
#+end_src

#+BEGIN_SRC stan
// generated with brms 2.3.1
functions {
}
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K_b0;  // number of population-level effects
  matrix[N, K_b0] X_b0;  // population-level design matrix
  int<lower=1> K_b1;  // number of population-level effects
  matrix[N, K_b1] X_b1;  // population-level design matrix
  int<lower=1> K_b2;  // number of population-level effects
  matrix[N, K_b2] X_b2;  // population-level design matrix
  // covariate vectors
  vector[N] C_1;
  // data for group-level effects of ID 1
  int<lower=1> J_1[N];
  int<lower=1> N_1;
  int<lower=1> M_1;
  vector[N] Z_1_b0_1;
  // data for group-level effects of ID 2
  int<lower=1> J_2[N];
  int<lower=1> N_2;
  int<lower=1> M_2;
  vector[N] Z_2_b1_1;
  // data for group-level effects of ID 3
  int<lower=1> J_3[N];
  int<lower=1> N_3;
  int<lower=1> M_3;
  vector[N] Z_3_b2_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector<lower=0>[K_b0] b_b0;  // population-level effects
  vector<lower=0>[K_b1] b_b1;  // population-level effects
  vector<lower=0>[K_b2] b_b2;  // population-level effects
  real<lower=0> sigma;  // residual SD
  vector<lower=0>[M_1] sd_1;  // group-level standard deviations
  vector[N_1] z_1[M_1];  // unscaled group-level effects
  vector<lower=0>[M_2] sd_2;  // group-level standard deviations
  vector[N_2] z_2[M_2];  // unscaled group-level effects
  vector<lower=0>[M_3] sd_3;  // group-level standard deviations
  vector[N_3] z_3[M_3];  // unscaled group-level effects
}
transformed parameters {
  // group-level effects
  vector[N_1] r_1_b0_1 = sd_1[1] * (z_1[1]);
  // group-level effects
  vector[N_2] r_2_b1_1 = sd_2[1] * (z_2[1]);
  // group-level effects
  vector[N_3] r_3_b2_1 = sd_3[1] * (z_3[1]);
}
model {
  vector[N] mu_b0 = X_b0 * b_b0;
  vector[N] mu_b1 = X_b1 * b_b1;
  vector[N] mu_b2 = X_b2 * b_b2;
  vector[N] mu;
  for (n in 1:N) {
    mu_b0[n] += r_1_b0_1[J_1[n]] * Z_1_b0_1[n];
    mu_b1[n] += r_2_b1_1[J_2[n]] * Z_2_b1_1[n];
    mu_b2[n] += r_3_b2_1[J_3[n]] * Z_3_b2_1[n];
    // compute non-linear predictor
    mu[n] = 100 * mu_b0[n] * (1 - exp( - (mu_b1[n] / 100) * C_1[n] ^ mu_b2[n]));
  }
  // priors including all constants
  target += gamma_lpdf(b_b0 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += gamma_lpdf(b_b1 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += gamma_lpdf(b_b2 | 4, 3)
    - 2 * gamma_lccdf(0 | 4, 3);
  target += student_t_lpdf(sigma | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += student_t_lpdf(sd_1 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_1[1] | 0, 1);
  target += student_t_lpdf(sd_2 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_2[1] | 0, 1);
  target += student_t_lpdf(sd_3 | 3, 0, 33)
    - 1 * student_t_lccdf(0 | 3, 0, 33);
  target += normal_lpdf(z_3[1] | 0, 1);
  // likelihood including all constants
  if (!prior_only) {
    target += normal_lpdf(Y | mu, sigma);
  }
}
generated quantities {
}
#+END_SRC

**** fit to real data
#+begin_src R :var clim=city_climate

    fram_clim <- left_join(fram,clim) %>%
        mutate(Precip = (Precip - mean(Precip))/ 1000)
#+end_src

#+RESULTS:
: Joining, by = c("Region", "City")

#+begin_src R :exports results :results graphics :file ../figs/fram_clim.png :height 200 :width 700
pc <-   ggplot(fram_clim, aes(x = AGE, y = DBH, color = City)) + geom_point()
pp <-   ggplot(fram_clim, aes(x = AGE, y = DBH, color = Precip)) + geom_point()
grid.arrange(pc,pp, nrow =1)
#+end_src

#+RESULTS:
[[file:../figs/fram_clim.png]]

#+begin_src R
model_fram_precip_homo <- update(m_generated_singleSpecies_multipleLocations_GroupPred_homo, chains = 2, cores = 2, newdata = fram_clim)
#+end_src

#+RESULTS:
#+begin_example
Joining, by = c("Region", "City")
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).
Rejecting initial value:
  Error evaluating the log probability at the initial value.
Exception: normal_lpdf: Location parameter[1] is -inf, but must be finite!  (in 'model54b426e2cace_file54b451782573' at line 86)

Rejecting initial value:
  Error evaluating the log probability at the initial value.
Exception: normal_lpdf: Location parameter[34] is -inf, but must be finite!  (in 'model54b426e2cace_file54b451782573' at line 86)

Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.

Gradient evaluation took 0.000772 seconds
1000 transitions using 10 leapfrog steps per transition would take 7.72 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).
Rejecting initial value:
  Gradient evaluated at the initial value is not finite.
  Stan can't start sampling from this initial value.

Gradient evaluation took 0.000689 seconds
1000 transitions using 10 leapfrog steps per transition would take 6.89 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 202.195 seconds (Warm-up)
               158.382 seconds (Sampling)
               360.577 seconds (Total)

Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 240.758 seconds (Warm-up)
               207.24 seconds (Sampling)
               447.998 seconds (Total)

Warning messages:
1: There were 113 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
2: Examine the pairs() plot to diagnose sampling problems
#+end_example


#+begin_src R
model_fram_precip_homo
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ Precip + (1 | City)
         b1 ~ Precip + (1 | City)
         b2 ~ Precip + (1 | City)
   Data: fram_clim (Number of observations: 129)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.62      0.74     0.01     2.64        478 1.00
sd(b1_Intercept)     0.40      0.37     0.01     1.34        556 1.00
sd(b2_Intercept)     0.36      0.28     0.04     1.12        213 1.01

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.44      0.41     0.78     2.46        764 1.01
b0_Precip        1.20      0.60     0.36     2.68       1262 1.00
b1_Intercept     1.13      0.28     0.62     1.70        546 1.00
b1_Precip        1.25      0.59     0.37     2.68       1483 1.00
b2_Intercept     1.08      0.19     0.67     1.47        298 1.00
b2_Precip        0.96      0.52     0.25     2.23        288 1.01

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     6.39      0.42     5.66     7.28        904 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 113 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

**** diagnostics
#+begin_src R :exports results :results graphics :file ../figs/mcmctrace_fram_precip_homo.png
mcmc_trace(as.matrix(model_fram_precip_homo))
#+end_src

#+RESULTS:
[[file:../figs/mcmctrace_fram_precip_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/pp_check_fram_precip_homo.png
pp_check(model_fram_precip_homo)
#+end_src

#+RESULTS:
[[file:../figs/pp_check_fram_precip_homo.png]]
Not great.  I think the problem arises because the effect of Precip on
the parameters may not be linear.  Also, I may need to include
Temperature related covariates

**** marginal effects
#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_ageprecip_homo.png
marginal_effects(model_fram_precip_homo, effects = "AGE:Precip")
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_ageprecip_homo.png]]


Very cool, as precip increases, so does dbh.  But there is high uncertainty.

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_ageprecip_homo_Points.png
  conditions <- data.frame(Precip = unique(fram_clim$Precip))
  me <- marginal_effects(model_fram_precip_homo, effects = "AGE", conditions = conditions, re_formula = NA)
#me
  ggplot(me$AGE) +
        geom_line(aes(x = AGE, y = estimate__)) +
      geom_ribbon(aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__), alpha = .3, fill = "blue") +
      geom_point(data = fram_clim, aes(x = AGE, y = DBH)) +
      facet_wrap(~Precip)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_ageprecip_homo_Points.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_age_fram_precip_homo.png
marginal_effects(model_fram_precip_homo, effects = "Precip")
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_age_fram_precip_homo.png]]

*** multiple species, multiple locations, no group level predictors, homoskedastic
**** generate data
#+begin_src R
  k <- 2  # number locations
  l <- 4  # number of species
  expect_nkl <- 20
  n <- k * l * expect_nkl
  breaks <- c(0,sort(sample(1:n,(l * k-1))),n)
  nkl <- sapply(1:(k*l), function(i) breaks[i+1] - breaks[i])
  nkl

  mu_b0 <- 1.2
  sigma_b0_k <- .3
  sigma_b0_l <- .05

  mu_b1 <- 1
  sigma_b1_k <- .05
  sigma_b1_l <- .1

  mu_b2 <- 1
  sigma_b2_k <- .1
  sigma_b2_l <- .1

  sigma <- 5

  k_b0 <- rnorm(k, 0, sigma_b0_k)
  l_b0 <- rnorm(l, 0, sigma_b0_l)
  b0 <- outer(k_b0, l_b0, FUN = "+") + mu_b0

  k_b1 <- rnorm(k, 0, sigma_b1_k)
  l_b1 <- rnorm(l, 0, sigma_b1_l)
  b1 <- outer(k_b1, l_b1, FUN = "+") + mu_b1

  k_b2 <- rnorm(k, 0, sigma_b2_k)
  l_b2 <- rnorm(l, 0, sigma_b2_l)
  b2 <- outer(k_b2, l_b2, FUN = "+") + mu_b2

  w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))

  nkl <- matrix(nkl, nrow = k, ncol = l)

  AGE <- lapply(1:k, function(i) {
      lapply(1:l, function(j) {
          runif(nkl[i,j],0,150) %>% round
      })
  })

  dt <- lapply(1:k, function(i) {
      lapply(1:l, function(j) {
          DBH <- w(b0[i,j], b1[i,j], b2[i,j], AGE[[i]][[j]]) + rnorm(nkl[i,j], 0, sigma)
          City <- letters[i]
          Species <- rev(LETTERS)[j]
          data.frame(AGE = AGE[[i]][[j]], DBH = DBH, City = City, Species = Species)
      })
  })

  dt <- bind_rows(unlist(dt,recursive = F))
#+end_src

#+RESULTS:
: [1] 23 37  4 14  8 48  9 17
: There were 15 warnings (use warnings() to see them)

#+begin_src R :exports results :results graphics :file ../figs/test_data_multipleSpecies_multipleLocations_PrecipCityPred.png
p <-   ggplot(dt, aes(x = AGE, y = DBH)) + geom_point() + facet_grid(City ~ Species)
p
#+end_src

#+RESULTS:
[[file:../figs/test_data_multipleSpecies_multipleLocations_PrecipCityPred.png]]

**** fit to generated data

#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ 1 + (1 | City) + (1 | Species),
                     b1 ~ 1 + (1 | City) + (1 | Species),
                     b2 ~ 1 + (1 | City) + (1 | Species),
                     nl = T)

  nlprior <- c(prior(gamma(4, 3), nlpar = "b0",lb = 0),
               prior(gamma(4, 3), nlpar = "b1",lb = 0),
               prior(gamma(4, 3), nlpar = "b2",lb = 0))

m_generated_multipleSpecies_multipleLocations_homo <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+begin_src R
summary(m_generated_multipleSpecies_multipleLocations_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1 + (1 | City) + (1 | Species)
         b1 ~ 1 + (1 | City) + (1 | Species)
         b2 ~ 1 + (1 | City) + (1 | Species)
   Data: dt (Number of observations: 160)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 2)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     1.00      1.06     0.14     4.34        407 1.00
sd(b1_Intercept)     0.81      1.35     0.01     5.27        368 1.00
sd(b2_Intercept)     0.37      0.49     0.00     1.68         29 1.09

~Species (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.22      0.25     0.01     0.90        540 1.00
sd(b1_Intercept)     0.33      0.37     0.02     1.24        631 1.01
sd(b2_Intercept)     0.22      0.19     0.04     0.67         39 1.04

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.37      0.40     0.62     2.21        463 1.00
b1_Intercept     1.09      0.37     0.45     1.94        111 1.02
b2_Intercept     1.15      0.21     0.63     1.59        114 1.01

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     4.79      0.29     4.31     5.39         93 1.02

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 289 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot__multipleSpecies_multipleLocations_homo.png
plot(m_generated_multipleSpecies_multipleLocations_homo, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot__multipleSpecies_multipleLocations_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_multipleSpecies_multipleLocations_homo.png :width 800
     cond <- expand.grid(Species = unique(dt$Species), City = unique(dt$City))
     rownames(cond) <- paste0(cond$Species, cond$City)
    me <- marginal_effects(m_generated_multipleSpecies_multipleLocations_homo,
                       re_formula = NULL, method = "predict",
                          conditions = cond)

  ggplot() +
    geom_line(data = me$AGE, color = "blue", aes(x = AGE, y = estimate__)) +
    geom_ribbon(data = me$AGE, alpha = .3, aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__)) +
    geom_point(data = dt, aes(x = AGE, y = DBH)) +
    facet_grid(City ~ Species)
#+end_src

#+RESULTS:
[[file:../figs/marginal_m_generated_multipleSpecies_multipleLocations_homo.png]]

**** fit real data
#+begin_src R
  species.to.select <- c("ACPL", "ACRU", "ACSA1", "ACSA2", "BEPA", "FRAM","FRPE", "TIAM", "TICO")

  dm <- d %>% filter(SpCode %in% species.to.select) %>%
      filter(City %in% c("Fort Collins, CO", "Minneapolis, MN","Boise, ID",  "Longview, WA")) %>%
      rename(Species = SpCode)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/d_multipleSpecies_multipleLocations.png :height 700 :width 700
p <-   ggplot(dm, aes(x = AGE, y = DBH)) + geom_point(size = .5) + facet_grid(City ~ Species)
p
#+end_src

#+RESULTS:
[[file:../figs/d_multipleSpecies_multipleLocations.png]]

This would be a good figure to plot the existing equations on, and
then plot my equations on.
[[file:../figs/d_multipleSpecies_multipleLocations.png]]

#+begin_src R

  model_multipleSpecies_multipleCities_homo_4chain <- update(m_generated_multipleSpecies_multipleLocations_homo, newdata = dm, cores = 2, chains = 4, control = list(adapt_delta = .9, max_treedepth = 15))

#+end_src

#+begin_src R
  model_multipleSpecies_multipleCities_homo
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1 + (1 | City) + (1 | Species)
         b1 ~ 1 + (1 | City) + (1 | Species)
         b2 ~ 1 + (1 | City) + (1 | Species)
   Data: dm (Number of observations: 1192)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Group-Level Effects:
~City (Number of levels: 4)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     1.07      0.79     0.28     3.35         38 1.11
sd(b1_Intercept)     0.56      0.43     0.16     1.59         62 1.05
sd(b2_Intercept)     0.31      0.22     0.08     0.91         12 1.08

~Species (Number of levels: 8)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.79      0.84     0.13     4.00         14 1.31
sd(b1_Intercept)     0.37      0.22     0.11     1.02         20 1.23
sd(b2_Intercept)     0.11      0.05     0.05     0.23         77 1.04

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.46      0.51     0.65     2.55        102 1.01
b1_Intercept     1.01      0.31     0.54     1.71         87 1.02
b2_Intercept     1.00      0.26     0.30     1.44          8 1.37

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     9.34      6.37     7.86    17.62         25 1.15

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning messages:
1: The model has not converged (some Rhats are > 1.1). Do not analyse the results!
We recommend running more iterations and/or setting stronger priors.
2: There were 251 divergent transitions after warmup. Increasing adapt_delta above 0.9 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

**** marginal
#+begin_src R :exports results :results graphics :file ../figs/marginal_dm_multipleSpecies_multipleCities_homo.png :width 800
     cond <- expand.grid(Species = unique(dm$Species), City = unique(dm$City))
     rownames(cond) <- paste0(cond$Species, cond$City)
    me <- marginal_effects(model_multipleSpecies_multipleCities_homo,
                       re_formula = NULL, method = "predict",
                          conditions = cond)

  ggplot() +
    geom_point(data = dm, aes(x = AGE, y = DBH), size = .8) +
    geom_line(data = me$AGE, color = "blue", aes(x = AGE, y = estimate__)) +
    geom_ribbon(data = me$AGE, alpha = .3, aes(x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__)) +
    facet_grid(City ~ Species)
#+end_src

#+RESULTS:
[[file:../figs/marginal_dm_multipleSpecies_multipleCities_homo.png]]

*** multiple species, nested within Genus, multiple locations, no group level predictors, homoskedastic
**** generate data
#+begin_src R :eval no

  k <- 2  # number locations
  l <- 3  # number of genera
  m <- c(1,2,3) # number of species per genera
  expect_nkl <- 20
  n <- k * sum(m) * expect_nkl
  breaks <- c(0,sort(sample(1:n,(sum(m) * k-1))),n)
  nkl <- sapply(1:(k*sum(m)), function(i) breaks[i+1] - breaks[i])
  nkl

  mu_b0 <- 1.2
  sigma_b0_k <- .3
  sigma_b0_l <- .05
  sigma_b0_m <- .02

  mu_b1 <- 1
  sigma_b1_k <- .05
  sigma_b1_l <- .1
  sigma_b1_m <- .05

  mu_b2 <- 1
  sigma_b2_k <- .1
  sigma_b2_l <- .1
  sigma_b2_m <- .05

  sigma <- 5

  k_b0 <- rnorm(k, 0, sigma_b0_k)
  l_b0 <- rnorm(l, 0, sigma_b0_l)
  l_b0 <-  sapply(seq_along(m), function(i) l_b0[i]  +rnorm(m[i], 0, sigma_b0_l)) %>% unlist()
  b0 <- outer(k_b0, l_b0, FUN = "+") + mu_b0

  k_b1 <- rnorm(k, 0, sigma_b1_k)
  l_b1 <- rnorm(l, 0, sigma_b1_l)
  l_b1 <-  sapply(seq_along(m), function(i) l_b1[i]  +rnorm(m[i], 0, sigma_b1_l)) %>% unlist()
  b1 <- outer(k_b1, l_b1, FUN = "+") + mu_b1

  k_b2 <- rnorm(k, 0, sigma_b2_k)
  l_b2 <- rnorm(l, 0, sigma_b2_l)
  l_b2 <-  sapply(seq_along(m), function(i) l_b2[i]  +rnorm(m[i], 0, sigma_b2_l)) %>% unlist()
  b2 <- outer(k_b2, l_b2, FUN = "+") + mu_b2

  w <- function(a,b,c,x) 100 * a * (1 - exp(-(b/100) * x^c))

  nkl <- matrix(nkl, nrow = k, ncol = sum(m))

  AGE <- lapply(1:k, function(i) {
      lapply(1:sum(m), function(j) {
          runif(nkl[i,j],0,150) %>% round
      })
  })

  dt <- lapply(1:k, function(i) {
      lapply(1:sum(m), function(j) {
          DBH <- w(b0[i,j], b1[i,j], b2[i,j], AGE[[i]][[j]]) + rnorm(nkl[i,j], 0, sigma)
          City <- letters[i]
          Species <- rev(LETTERS)[j]
          Genus <- rev(LETTERS)[rep(m,m)[j]]
          data.frame(AGE = AGE[[i]][[j]], DBH = DBH, City = City, Species = Species, Genus = Genus)
      })
  })

  dt <- bind_rows(unlist(dt,recursive = F)) %>%
    mutate(GenusSpecies = paste0(Genus, Species))

nested <- dt
#+end_src

#+RESULTS:
:
: [1]  8 33  1  8 22 16 31 18  9  8 56 30
: There were 34 warnings (use warnings() to see them)

#+begin_src R :exports results :results graphics :file ../figs/test_data_multipleGenusSpecies_multipleLocations_PrecipCityPred.png :height 400
p <-   ggplot(dt, aes(x = AGE, y = DBH, color = GenusSpecies)) + geom_point() + facet_grid(City ~ Genus)
p
#+end_src

#+RESULTS:
[[file:../figs/test_data_multipleGenusSpecies_multipleLocations_PrecipCityPred.png]]
**** fit model to generated data
y ~

b ~ (1 | genus / species)

**** fit to generated data
#+begin_src R :results output
          form <- bf(DBH ~ 100*b0 * (1 - exp(-(b1/100) * AGE ^ b2)),
                     b0 ~ 1 + (1 | City) + (1 | Genus/Species),
                     b1 ~ 1 + (1 | City) + (1 | Genus/Species),
                     b2 ~ 1 + (1 | City) + (1 | Genus/Species),
                     nl = T)

  nlprior <- c(prior(gamma(4, 3), nlpar = "b0",lb = 0),
               prior(gamma(4, 3), nlpar = "b1",lb = 0),
               prior(gamma(4, 3), nlpar = "b2",lb = 0))

m_generated_multipleSpecies_nestedGenus_multipleLocations_homo <- brm(form, chains = 2, cores = 2, data = dt, prior = nlprior)

#+end_src

#+begin_src R
summary(m_generated_multipleSpecies_nestedGenus_multipleLocations_homo)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = identity
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1 + (1 | City) + (1 | Genus/Species)
         b1 ~ 1 + (1 | City) + (1 | Genus/Species)
         b2 ~ 1 + (1 | City) + (1 | Genus/Species)
   Data: dt (Number of observations: 240)
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 2000

Group-Level Effects:
~City (Number of levels: 2)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     1.74      2.18     0.23     8.91        104 1.01
sd(b1_Intercept)     1.19      2.17     0.01     8.28        119 1.02
sd(b2_Intercept)     1.05      1.21     0.10     4.73        139 1.03

~Genus (Number of levels: 3)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.31      0.54     0.01     1.74        349 1.00
sd(b1_Intercept)     0.89      1.24     0.03     4.53        228 1.00
sd(b2_Intercept)     0.46      0.55     0.04     1.81        103 1.00

~Genus:Species (Number of levels: 6)
                 Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(b0_Intercept)     0.09      0.07     0.02     0.27        194 1.00
sd(b1_Intercept)     0.34      0.27     0.03     1.03        266 1.00
sd(b2_Intercept)     0.13      0.14     0.01     0.43        115 1.00

Population-Level Effects:
             Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
b0_Intercept     1.09      0.45     0.42     2.21        223 1.00
b1_Intercept     1.17      0.48     0.40     2.27        154 1.01
b2_Intercept     1.15      0.43     0.49     2.28        203 1.03

Family Specific Parameters:
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     4.90      0.24     4.48     5.40        383 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 116 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot__multipleSpecies_nestedGenus_multipleLocations_homo.png
plot(m_generated_multipleSpecies_nestedGenus_multipleLocations_homo, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot__multipleSpecies_nestedGenus_multipleLocations_homo.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_m_generated_multipleSpecies_nestedGenus_multipleLocations_homo.png :width 800
     cond <- unique(select(dt, City, Species, Genus))
    me <- marginal_effects(m_generated_multipleSpecies_nestedGenus_multipleLocations_homo,
                       re_formula = NULL, method = "predict",
                          conditions = cond)

  ggplot() +
    geom_line(data = me$AGE, aes(color = Species, x = AGE, y = estimate__)) +
    geom_ribbon(data = me$AGE, alpha = .3, aes(group = Species, x = AGE, ymin = estimate__ - se__, ymax = estimate__ + se__)) +
    geom_point(data = dt, aes(x = AGE, y = DBH)) +
    facet_grid(City ~ Genus)
#+end_src

#+RESULTS:
[[file:../figs/1marginal_m_generated_multipleSpecies_nestedGenus_multipleLocations_homo.png]]

Look at Genus Y, Species X, in City a.  There are only two
observations, but because the model includes information of genus and
city, the line has a pretty close fit.



*** Full model

\[
DBH \sim N(\beta_0 * (1 - \exp(-\beta_1 * AGE ^ {\beta_2})), \sigma)
\]

\[
\beta_0, \beta_1, \beta_2 \sim
\]

\[
\sigma \sim
\]

species within genus within ...

I need to test whether just \beta_0 varies by group, or if all three
\beta's do

It might be worth doing this test on a reasonable subset of the data.
It might vary by climate but not species, or vice versa.

possibilities
- \beta_0 + \beta_1 + \beta_2 ~ group1 + group2
- \beta_0 ~ group1 + group2, \beta_1 + \beta_2 ~ 1
- \beta_0 ~ group1 + group2, \beta_1 + \beta_2 ~ group1
- \beta_0 ~ group1 + group2, \beta_1 + \beta_2 ~ group2




*** explaining priors
can't be negative...  in brms nonlinear advanced, mention the
importance of setting strong priors.  Also non negative.

* Exploring age and dbh
** load libraries
#+begin_src R :exports none
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
library(ascii)
library(tidyr)
#+end_src

#+RESULTS:
** functions
#+begin_src R
  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }
#+end_src

#+RESULTS:

** read in data
#+begin_src R :exports code
d <- read_csv("../data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
#+end_src

#+RESULTS:
#+begin_example
Parsed with column specification:
cols(
  .default = col_integer(),
  Region = col_character(),
  City = col_character(),
  Source = col_character(),
  Zone = col_character(),
  `Park/Street` = col_character(),
  SpCode = col_character(),
  ScientificName = col_character(),
  CommonName = col_character(),
  TreeType = col_character(),
  street = col_character(),
  `DBH (cm)` = col_double(),
  `TreeHt (m)` = col_double(),
  CrnBase = col_double(),
  `CrnHt (m)` = col_double(),
  `CdiaPar (m)` = col_double(),
  `CDiaPerp (m)` = col_double(),
  `AvgCdia (m)` = col_double(),
  `Leaf (m2)` = col_double(),
  dbh1 = col_double()
)
See spec(...) for full column specifications.
Warning: 24255 parsing failures.
row [90m# A tibble: 5 x 5[39m col     row col   expected   actual file                                            expected   [3m[90m<int>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m      [3m[90m<chr>[39m[23m  [3m[90m<chr>[39m[23m                                           actual [90m1[39m  126[90m2[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… file [90m2[39m  126[90m3[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… row [90m3[39m  126[90m4[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… col [90m4[39m  126[90m5[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.… expected [90m5[39m  126[90m6[39m side  an integer C      '../data/RDS-2016-0005/Data/TS3_Raw_tree_data.…
... ........................... ... ............................................................................... ........ ............ [... truncated]
Warning message:
In rbind(names(probs), probs_f) :
  number of columns of result is not a multiple of vector length (arg 1)
#+end_example


#+begin_src R
#str(d)
#+end_src

#+RESULTS:
** fix some species things
*** fix lower case species codes
#+begin_src R
d$SpCode <- toupper(d$SpCode)
#+end_src

#+RESULTS:
*** fix QUAG1 to be QUAG
#+begin_src R
d$SpCode[d$SpCode == "QUAG1"] <- "QUAG"
#+end_src

#+RESULTS:
*** fix common names

Not all are fixed!

#+begin_src R
  d$CommonName[d$CommonName == "Kurrajong"] <- "Kurrajong/Bottle tree"
  d$CommonName[d$CommonName == "Bottle tree"] <- "Kurrajong/Bottle tree"

  d$CommonName[d$CommonName == "Apple"] <- "Apple/Crabapple"
  d$CommonName[d$CommonName == "Crabapple"] <- "Apple/Crabapple"


  d$CommonName[d$CommonName == "silver maple"] <- "Silver maple"
  d$CommonName[d$CommonName == "camphor tree"] <- "Camphor tree"
  d$CommonName[d$CommonName == "ginkgo"] <- "Ginkgo"
  d$CommonName[d$CommonName == "honeylocust"] <- "Honeylocust"
  d$CommonName[d$CommonName == "ginkgo"] <- "Ginkgo"
  d$CommonName[d$CommonName == "common crapemyrtle"] <- "Common crapemyrtle"
  d$CommonName[d$CommonName == "sweetgum"] <- "Sweetgum"
  d$CommonName[d$CommonName == "southern magnolia"] <- "Southern magnolia"



#+end_src

#+RESULTS:

** species are
#+name: tree_types
| TreeType | FunctionalType      |
|----------+---------------------|
| BDL      | broadleaf deciduous |
| BDM      | broadleaf deciduous |
| BDS      | broadleaf deciduous |
| BEL      | broadleaf evergreen |
| BEM      | broadleaf evergreen |
| BES      | broadleaf evergreen |
| CEL      | conifer evergreen   |
| CEM      | conifer evergreen   |
| CES      | conifer evergreen   |
| PEL      | palm evergreen      |
| PEM      | palm evergreen      |
| PES      | palm evergreen      |
I got rid of the small medium and large distinctions for
simplification here.

#+begin_src R :var tt=tree_types
  sp <- d %>% select(SpCode, ScientificName, TreeType) %>%
    left_join(tt) %>%
    select(-TreeType) %>%
    unique() %>%
    arrange(ScientificName) %>%
    ascii.nowarn.print()
#+end_src

#+RESULTS:
#+begin_example
Joining, by = "TreeType"
|     | SpCode | ScientificName                         | FunctionalType      |
|-----+--------+----------------------------------------+---------------------|
| 1   | ACFA   | Acacia farnesiana                      | broadleaf deciduous |
| 2   | ACME   | Acacia melanoxylon                     | broadleaf evergreen |
| 3   | ACSA3  | Acacia salicina                        | broadleaf evergreen |
| 4   | ACMA   | Acer macrophyllum                      | broadleaf deciduous |
| 5   | ACNE   | Acer negundo                           | broadleaf deciduous |
| 6   | ACPA   | Acer palmatum                          | broadleaf deciduous |
| 7   | ACPL   | Acer platanoides                       | broadleaf deciduous |
| 8   | ACRU   | Acer rubrum                            | broadleaf deciduous |
| 9   | ACSA1  | Acer saccharinum                       | broadleaf deciduous |
| 10  | ACSA2  | Acer saccharum                         | broadleaf deciduous |
| 11  | AEHI   | Aesculus hippocastanum                 | broadleaf deciduous |
| 12  | BABL   | Bauhinia x blakeana                    | broadleaf evergreen |
| 13  | BENI   | Betula nigra                           | broadleaf deciduous |
| 14  | BEPE   | Betula pendula                         | broadleaf deciduous |
| 15  | BRPO   | Brachychiton populneum                 | broadleaf evergreen |
| 16  | BUCA   | Butia capitata                         | palm evergreen      |
| 17  | CACI   | Callistemon citrinus                   | broadleaf evergreen |
| 18  | CADE2  | Calocedrus decurrens                   | conifer evergreen   |
| 19  | CAIN4  | Calophyllum inophyllum                 | broadleaf evergreen |
| 20  | CABEF  | Carpinus betulus 'Fastigiata'          | broadleaf deciduous |
| 21  | CAIL   | Carya illinoinensis                    | broadleaf deciduous |
| 22  | CANE33 | Cassia x nealiae                       | broadleaf deciduous |
| 23  | CAEQ   | Casuarina equisetifolia                | broadleaf evergreen |
| 24  | CASP   | Catalpa speciosa                       | broadleaf deciduous |
| 25  | CEDE   | Cedrus deodara                         | conifer evergreen   |
| 26  | CELA   | Celtis laevigata                       | conifer evergreen   |
| 27  | CEOC   | Celtis occidentalis                    | broadleaf deciduous |
| 28  | CESI4  | Celtis sinensis                        | broadleaf deciduous |
| 29  | CESI3  | Ceratonia siliqua                      | broadleaf evergreen |
| 30  | CECA   | Cercis canadensis                      | broadleaf deciduous |
| 31  | CHLI   | Chilopsis linearis                     | broadleaf deciduous |
| 32  | CICA   | Cinnamomum camphora                    | broadleaf evergreen |
| 33  | CISP2  | Citharexylum spinosum                  | broadleaf evergreen |
| 34  | CONU   | Cocos nucifera                         | palm evergreen      |
| 35  | COERA2 | Conocarpus erectus var. argenteus      | broadleaf evergreen |
| 36  | COSU2  | Cordia subcordata                      | broadleaf evergreen |
| 37  | COFL   | Cornus florida                         | broadleaf deciduous |
| 38  | CR     | Crataegus sp.                          | broadleaf deciduous |
| 39  | CRLA   | Crataegus x lavallei                   | broadleaf deciduous |
| 40  | CUAN   | Cupaniopsis anacardioides              | broadleaf evergreen |
| 41  | DERE   | Delonix regia                          | broadleaf deciduous |
| 42  | ELAN   | Elaeagnus angustifolia                 | broadleaf deciduous |
| 43  | ELOR2  | Elaeodendron orientale                 | broadleaf evergreen |
| 44  | ERJA   | Eriobotrya japonica                    | broadleaf evergreen |
| 45  | EUFI81 | Eucalyptus ficifolia                   | broadleaf evergreen |
| 46  | EUGL   | Eucalyptus globulus                    | broadleaf evergreen |
| 47  | EUMI2  | Eucalyptus microtheca                  | broadleaf evergreen |
| 48  | EUSI   | Eucalyptus sideroxylon                 | broadleaf evergreen |
| 49  | FASY   | Fagus sylvatica                        | broadleaf deciduous |
| 50  | FIBE   | Ficus benjamina                        | broadleaf evergreen |
| 51  | FIMI   | Ficus thonningii                       | broadleaf evergreen |
| 52  | FIDE6  | Filicium decipiens                     | broadleaf evergreen |
| 53  | FRAM   | Fraxinus americana                     | broadleaf deciduous |
| 54  | FRAN2  | Fraxinus angustifolia                  | broadleaf deciduous |
| 55  | FRAN_R | Fraxinus angustifolia 'Raywood'        | broadleaf deciduous |
| 56  | FREX_H | Fraxinus excelsior 'Hessei'            | broadleaf deciduous |
| 57  | FRHO   | Fraxinus holotricha                    | broadleaf deciduous |
| 58  | FRLA   | Fraxinus latifolia                     | broadleaf deciduous |
| 59  | FRPE   | Fraxinus pennsylvanica                 | broadleaf deciduous |
| 60  | FRPE_M | Fraxinus pennsylvanica 'Marshall'      | broadleaf deciduous |
| 61  | FRUH   | Fraxinus uhdei                         | broadleaf deciduous |
| 62  | FRVE   | Fraxinus velutina                      | broadleaf deciduous |
| 63  | FRVE_G | Fraxinus velutina 'Modesto'            | broadleaf deciduous |
| 64  | GIBI   | Ginkgo biloba                          | broadleaf deciduous |
| 65  | GLTR   | Gleditsia triacanthos                  | broadleaf deciduous |
| 66  | GYDI   | Gymnocladus dioicus                    | broadleaf deciduous |
| 67  | ILOP   | Ilex opaca                             | broadleaf evergreen |
| 68  | ILPA2  | Ilex paraguariensis                    | broadleaf evergreen |
| 69  | JAMI   | Jacaranda mimosifolia                  | broadleaf deciduous |
| 70  | JUNI   | Juglans nigra                          | broadleaf deciduous |
| 71  | JUVI   | Juniperus virginiana                   | conifer evergreen   |
| 72  | JUSI   | Juniperus virginiana var. silicicola   | conifer evergreen   |
| 73  | KOELFO | Koelreuteria elegans                   | broadleaf deciduous |
| 74  | KOPA   | Koelreuteria paniculata                | broadleaf deciduous |
| 75  | LAIN   | Lagerstroemia indica                   | broadleaf deciduous |
| 76  | LA6    | Lagerstroemia sp.                      | broadleaf deciduous |
| 77  | LASP   | Lagerstroemia speciosa                 | broadleaf deciduous |
| 78  | LIST   | Liquidambar styraciflua                | broadleaf deciduous |
| 79  | LITU   | Liriodendron tulipifera                | broadleaf deciduous |
| 80  | MAGR   | Magnolia grandiflora                   | broadleaf evergreen |
| 81  | PYAN   | Malus angustifolia                     | broadleaf deciduous |
| 82  | MA2    | Malus sp.                              | broadleaf deciduous |
| 83  | MEQU   | Melaleuca quinquenervia                | broadleaf evergreen |
| 84  | MEEX   | Metrosideros excelsa                   | broadleaf evergreen |
| 85  | MOAL   | Morus alba                             | broadleaf deciduous |
| 86  | MO     | Morus sp.                              | broadleaf deciduous |
| 87  | OLEU   | Olea europaea                          | broadleaf evergreen |
| 88  | PAAC   | Parkinsonia aculeata                   | broadleaf deciduous |
| 89  | CEFL   | Parkinsonia florida                    | broadleaf deciduous |
| 90  | PHCA   | Phoenix canariensis                    | palm evergreen      |
| 91  | PHDA4  | Phoenix dactylifera                    | palm evergreen      |
| 92  | PIPU   | Picea pungens                          | conifer evergreen   |
| 93  | PIBR2  | Pinus brutia                           | conifer evergreen   |
| 94  | PICA   | Pinus canariensis                      | conifer evergreen   |
| 95  | PICO   | Pinus contorta                         | conifer evergreen   |
| 96  | PIEC   | Pinus echinata                         | conifer evergreen   |
| 97  | PIED   | Pinus edulis                           | conifer evergreen   |
| 98  | PIEL2  | Pinus eldarica                         | conifer evergreen   |
| 99  | PIEL   | Pinus elliottii                        | conifer evergreen   |
| 100 | PIHA   | Pinus halepensis                       | conifer evergreen   |
| 101 | PINI   | Pinus nigra                            | conifer evergreen   |
| 102 | PIPO   | Pinus ponderosa                        | conifer evergreen   |
| 103 | PIRA   | Pinus radiata                          | conifer evergreen   |
| 104 | PIST   | Pinus strobus                          | conifer evergreen   |
| 105 | PISY   | Pinus sylvestris                       | conifer evergreen   |
| 106 | PITA   | Pinus taeda                            | conifer evergreen   |
| 107 | PITH   | Pinus thunbergiana                     | conifer evergreen   |
| 108 | PICH   | Pistacia chinensis                     | broadleaf deciduous |
| 109 | PIUN   | Pittosporum undulatum                  | broadleaf evergreen |
| 110 | PLOC   | Platanus occidentalis                  | broadleaf deciduous |
| 111 | PLRA   | Platanus racemosa                      | broadleaf deciduous |
| 112 | PLAC   | Platanus x acerifolia                  | broadleaf deciduous |
| 113 | THOR   | Platycladus orientalis                 | conifer evergreen   |
| 114 | POMA   | Podocarpus macrophyllus                | conifer evergreen   |
| 115 | POAN   | Populus angustifolia                   | broadleaf deciduous |
| 116 | POTR2  | Populus balsamifera subsp. trichocarpa | broadleaf deciduous |
| 117 | PODE   | Populus deltoides                      | broadleaf deciduous |
| 118 | POFR   | Populus fremontii                      | broadleaf deciduous |
| 119 | POSA   | Populus sargentii                      | broadleaf deciduous |
| 120 | PRCH   | Prosopis chilensis                     | broadleaf deciduous |
| 121 | PRCA   | Prunus caroliniana                     | broadleaf evergreen |
| 122 | PRCE   | Prunus cerasifera                      | broadleaf deciduous |
| 123 | PRCE   | Prunus cerasifera cvs.                 | broadleaf deciduous |
| 124 | PRSE2  | Prunus serrulata                       | broadleaf deciduous |
| 125 | PR     | Prunus sp.                             | broadleaf deciduous |
| 126 | PRYE   | Prunus yedoensis                       | broadleaf deciduous |
| 127 | PSME   | Pseudotsuga menziesii                  | conifer evergreen   |
| 128 | PYCA   | Pyrus calleryana                       | broadleaf deciduous |
| 129 | PYCA_B | Pyrus calleryana 'Bradford'            | broadleaf deciduous |
| 130 | PYCA   | Pyrus calleryana cvs.                  | broadleaf deciduous |
| 131 | PYKA   | Pyrus kawakamii                        | broadleaf evergreen |
| 132 | PY     | Pyrus sp.                              | broadleaf deciduous |
| 133 | QUAG   | Quercus agrifolia                      | broadleaf evergreen |
| 134 | QUAL   | Quercus alba                           | broadleaf deciduous |
| 135 | QUIL2  | Quercus ilex                           | broadleaf evergreen |
| 136 | QULA2  | Quercus laurifolia                     | broadleaf deciduous |
| 137 | QULO   | Quercus lobata                         | broadleaf deciduous |
| 138 | QUMA1  | Quercus macrocarpa                     | broadleaf deciduous |
| 139 | QUNI   | Quercus nigra                          | broadleaf deciduous |
| 140 | QUPA   | Quercus palustris                      | broadleaf deciduous |
| 141 | QUPH   | Quercus phellos                        | broadleaf deciduous |
| 142 | QURU   | Quercus rubra                          | broadleaf deciduous |
| 143 | QUSH   | Quercus shumardii                      | broadleaf deciduous |
| 144 | QUVI   | Quercus virginiana                     | broadleaf evergreen |
| 145 | RHLA   | Rhus lancea                            | broadleaf evergreen |
| 146 | ROPS   | Robinia pseudoacacia                   | broadleaf deciduous |
| 147 | SAPA   | Sabal palmetto                         | palm evergreen      |
| 148 | PISA2  | Samanea saman                          | broadleaf deciduous |
| 149 | SCMO   | Schinus molle                          | broadleaf evergreen |
| 150 | SCTE   | Schinus terebinthifolius               | broadleaf evergreen |
| 151 | SESE   | Sequoia sempervirens                   | conifer evergreen   |
| 152 | SWMA   | Swietenia mahagoni                     | broadleaf evergreen |
| 153 | SYRO   | Syagrus romanzoffiana                  | palm evergreen      |
| 154 | TAAR   | Tabebuia aurea                         | broadleaf evergreen |
| 155 | TAPA   | Tabebuia heterophylla                  | broadleaf evergreen |
| 156 | TAOC   | Tabebuia ochracea subsp. neochrysantha | broadleaf evergreen |
| 157 | TIAM   | Tilia americana                        | broadleaf deciduous |
| 158 | TICO   | Tilia cordata                          | broadleaf deciduous |
| 159 | TITO   | Tilia tomentosa                        | broadleaf deciduous |
| 160 | TRSE6  | Triadica sebifera                      | broadleaf deciduous |
| 161 | TRCO   | Tristaniopsis conferta                 | broadleaf evergreen |
| 162 | ULAL   | Ulmus alata                            | broadleaf deciduous |
| 163 | ULAM   | Ulmus americana                        | broadleaf deciduous |
| 164 | ULPA   | Ulmus parvifolia                       | broadleaf deciduous |
| 165 | ULPU   | Ulmus pumila                           | broadleaf deciduous |
| 166 | VEME   | Veitchia merrillii                     | palm evergreen      |
| 167 | WAFI   | Washingtonia filifera                  | palm evergreen      |
| 168 | WARO   | Washingtonia robusta                   | palm evergreen      |
| 169 | ZESE   | Zelkova serrata                        | broadleaf deciduous |
#+end_example
** tidy a few names and select variables of interest here
#+begin_src R
d <- d %>% rename(DBH = `DBH (cm)`, Leaf = `Leaf (m2)`) %>% select(Region, City, TreeID, SpCode, DBH, Leaf, DBH, Age)
#+end_src

#+RESULTS:

#+begin_src R
summary(d$Leaf)
sum(d$Leaf == -1) / length(d$Leaf)
sum(d$DBH == -1) / length(d$DBH)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
:    -1.0    12.9   116.1   302.5   389.2  9516.0
: [1] 0.1143094
: [1] 0

#+begin_src R
  d <- filter(d, DBH != -1, Age != -1) %>%
    rename(AGE = Age)
#+end_src

#+RESULTS:

** plot age versus dbh for all trees
#+begin_src R :exports results :results graphics :file ../figs/ageVdbh_all.png :bg transparent
ggplot(d, aes( x = AGE, y = DBH)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_all.png]]


** AGE versus dbh by cities
#+begin_src R :exports results :results graphics :file figs/ageVdbh_byCity_focusCoords.png :height 1000 :width 1000
      ggplot(d, aes( x = AGE, y = DBH, color = SpCode)) + geom_point(alpha = .7, size = .5) +
          facet_wrap(~City) +
          coord_cartesian(xlim = c(0, 70), ylim = c(0,100)) +
          theme_minimal() +
          theme(text = element_text(size = 20),
                legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_byCity_focusCoords.png]]

** AGE versus DBH by species
#+begin_src R :exports results :results graphics :file figs/ageVdbh_bySpecies_focusCoords.png :height 1500 :width 800
      ggplot(d, aes( x = AGE, y = DBH, color = City)) + geom_point(alpha = .2, size = .5) +
          facet_wrap(~SpCode, ncol = 8) +
          theme_minimal() +
          theme(text = element_text(size = 20),
                legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_bySpecies_focusCoords.png]]

Woah, there are lots of species.  Clearly there is some variability in
the relationship between age and dbh across species.

** AGE versus DBH by species for species that are in more than 1 city
Does the relationship between AGE and DBH for a species change
depending on the city where it is?

Is there evidence for a different equation for every species city
combination?  Or can we use one equation for each species, regardless
of city?
#+begin_src R
  sp.w.multiple.cities <- d %>% group_by(City, SpCode) %>% summarize(n = n()) %>% ungroup() %>% group_by(SpCode) %>%
    summarize(n_cities_per_species = n()) %>%
    filter(n_cities_per_species > 1) %>%
    pull(SpCode)

d.sp.w.multiple.cities <- filter(d, SpCode %in% sp.w.multiple.cities)

#+end_src

#+RESULTS:


*** Each panel is a species, Each color is a different city
#+begin_src R :exports results :results graphics :file figs/ageVdbh_bySpecies_focusCoords_multiplecities.png :height 1000 :width 800
  ggplot(d.sp.w.multiple.cities, aes( x = AGE, y = DBH, color = City)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free", ncol = 8) +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_bySpecies_focusCoords_multiplecities.png]]
*** Adding Loess trend lines

#+begin_src R :exports results :results graphics :file figs/ageVdbh_bySpecies_focusCoords_multiplecities_trendlines.png :height 1100 :width 800
  ggplot(d.sp.w.multiple.cities, aes( x = AGE, y = DBH, color = City)) +
      geom_point(alpha = .7, size = .8) +
      facet_wrap(~SpCode, scales = "free", ncol = 8) +
    #  coord_cartesian(xlim = c(0, 200), ylim = c(0,40)) +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
    stat_smooth()
#+end_src

#+RESULTS:
[[file:../figs/ageVdbh_bySpecies_focusCoords_multiplecities_trendlines.png]]

ACPL's cities
#+begin_src R
filter(d.sp.w.multiple.cities, SpCode == "ACPL") %>% pull(City) %>% unique
#+end_src

#+RESULTS:
: [1] "Fort Collins, CO" "Minneapolis, MN"  "Queens, NY"       "Boise, ID"
: [5] "Longview, WA"

MOAL's cities
#+begin_src R
filter(d.sp.w.multiple.cities, SpCode == "MOAL") %>% pull(City) %>% unique
#+end_src

#+RESULTS:
: [1] "Glendale, AZ" "Longview, WA"
** Plot Urban Tree Allometric equations on top of data

#+begin_src R
          predict.allo <- function(x, EqName, a, b, c, d, e) {
              if(EqName == "loglogw1") {
                  y = exp(a + b*log(log(x + 1) + c/2))
                  }
              else if(EqName == "loglogw2") {
                y = exp(a + b*log(log(x + 1))+(sqrt(x) * (c/2)))
              }
              else if (EqName == "loglogw3") {
                y = exp(a + b*log(log(x + 1)) + x * c/2)
              }
              else if (EqName == "loglogw4") {
                y = exp(a + b*log(log(x + 1)) + x^2 * c/2)
              }
              else if (EqName == "expow1") {
                  y = exp(a+ b * (x) + (c/2))
              }
              else if (EqName == "lin") {
                      y = a + b * x
                  }
              else if (EqName == "quad") {
                      y = a + b * x + c* x^2
                  }
              else if (EqName == "cub") {
                      y = a+b * x+c *x^2 + d * x^3
                  }
              else if (EqName == "quart") {
                      y = a+b * x+c *x^2 + d * x^3 + e * x^4
                  }
              return(y)
          }

#+end_src

#+RESULTS:


#+begin_src R
        eqn <- read.csv("data/RDS-2016-0005/Data/TS6_Growth_coefficients_fromNatalie.csv", stringsAsFactors = F) %>%
              mutate(a = as.numeric(a))

          eqn <- eqn %>%
              filter(Predicts.component %in% c("dbh"), Independent.variable == "age")

    age_min_max = d %>%
      group_by(Region, SpCode) %>%
      summarize(minAGE = min(AGE, na.rm = T),
                maxAGE = max(AGE, na.rm = T))

    eqn <- left_join(eqn, age_min_max)

    DBH_min_max = d %>%
      group_by(Region, SpCode) %>%
      summarize(minDBH = min(DBH, na.rm = T),
                maxDBH = max(DBH, na.rm = T))

    eqn <- left_join(eqn, DBH_min_max)


                                            # fill in the NAs due to equations existing for species in regions where they weren't sampled.
    eqn$minAGE[is.na(eqn$minAGE)] <- 0
    eqn$maxAGE[is.na(eqn$maxAGE)] <- 100

        newdata <- lapply(1:nrow(eqn), function(i) {
            x <- seq(eqn$minAGE[i], eqn$maxAGE[i],  (eqn$maxAGE[i] - eqn$minAGE[i]) / 20)
            cbind(x, eqn[i,])
            })

      newdata <- bind_rows(newdata)

        predictions <- newdata %>% rowwise %>% mutate(predicted_dbh = predict.allo(x = x, EqName = EqName, a = a, b = b, c = c, d = d, e = e))



  #filter out predictions that are outside range of data and label those in range of appsmin and appsmax
  predictions_apprange <- predictions %>%
      filter(predicted_dbh > Apps.min & predicted_dbh < Apps.max)

  predictions_datarange <- predictions %>%
      filter(predicted_dbh > minDBH & predicted_dbh < maxDBH)

#+end_src

#+RESULTS:
: Joining, by = c("Region", "SpCode")
: Joining, by = c("Region", "SpCode")
: There were 50 or more warnings (use warnings() to see the first 50)



#+begin_src R :exports results :results graphics :file figs/predictions_dbh__byRegion.png

  ggplot(predictions_apprange, aes(x = x, y = predicted_dbh, group = SpCode)) +
      geom_line() +
    facet_wrap(~Region, scales = "free")

#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh__byRegion.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpecies.png :height 1200 :width 1200

  ggplot(predictions_apprange, aes(x = x, y = predicted_dbh, group = Region)) +
      geom_line() +
    facet_wrap(~SpCode, scales = "free")

#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_bySpecies.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpeciesFull_wData.png :height 1200 :width 1200
    predictions_apprange <- predictions_apprange %>% mutate(AGE = x, DBH = predicted_dbh)

  ggplot(d, aes( x = AGE, y = DBH, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_apprange, aes(group = Region), size = 1.5)

#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_bySpeciesFull_wData.png]]


#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpecies_wData.png :height 1200 :width 1200
    predictions_apprange.sp.w.multiple.cities <- predictions_apprange %>%       filter(SpCode %in% d.sp.w.multiple.cities$SpCode)


  ggplot(d.sp.w.multiple.cities, aes( x = AGE, y = DBH, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_apprange.sp.w.multiple.cities, aes(group = Region), size = 1.5)

#+end_src


#+RESULTS:
[[file:../figs/predictions_dbh_bySpecies_wData.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpecies_wData_ACPL.png
    predictions_apprange.acpl <- predictions_apprange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "ACPL")

    predictions_datarange.acpl <- predictions_datarange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "ACPL")

  ggplot(filter(d, SpCode == "ACPL"), aes( x = AGE, y = DBH, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_datarange.acpl, aes(group = Region), size = 2, linetype = "1111") +
      geom_line(data = predictions_apprange.acpl, aes(group = Region), size = 2)


#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_bySpecies_wData_ACPL.png]]

Funny thing about the Apps range is that for functions that eventually
decrease, they don't properly stop inference.  Look at the pink line
above.  The application range should be given for both the predictor
and the response variable.

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpecies_wData_ACPL_facet.png
    predictions_apprange.acpl <- predictions_apprange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "ACPL")

    predictions_datarange.acpl <- predictions_datarange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "ACPL")

  ggplot(filter(d, SpCode == "ACPL"), aes( x = AGE, y = DBH)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_datarange.acpl, aes(group = Region, color = Region), size = 1, linetype = "1111") +
      geom_line(data = predictions_apprange.acpl, aes(group = Region, color = Region), size = 1) +
    facet_wrap(~Region)


#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_bySpecies_wData_ACPL_facet.png]]

We should be able to borrow information from other regions to extend
the applicable range for regions with smaller ranges.

There is an equation for the lower midwest, but no data?

#+begin_src R :results org
ascii.nowarn.print(filter(eqn, SpCode == "ACPL"))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | Region | Scientific.Name  | SpCode | Independent.variable | Predicts.component | Units.of.predicted.components | Model.weight | EqName |     a |    b |     c |     d | e | Apps.min | Apps.max | Sigma |     n | adj.R2 | Data.min..from.raw.data. | Data.max..from.raw.data. |    DF | minAGE | maxAGE | minDBH | maxDBH |
|---+--------+------------------+--------+----------------------+--------------------+-------------------------------+--------------+--------+-------+------+-------+-------+---+----------+----------+-------+-------+--------+--------------------------+--------------------------+-------+--------+--------+--------+--------|
| 1 | LoMidW | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1/age        | cub    |  0.98 | 0.25 |  0.04 | -0.00 |   |     0.98 |   103.07 |  0.48 | 13.00 |   0.98 |                     4.80 |                    98.60 |  9.00 |   0.00 | 100.00 |        |        |
| 2 | MidWst | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1            | cub    | -7.95 | 3.81 | -0.09 |  0.00 |   |     2.66 |    93.26 |  8.92 | 48.00 |   0.97 |                     4.60 |                    77.50 | 44.00 |   2.00 |  44.00 |   4.60 |  77.50 |
| 3 | NMtnPr | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1/age^2      | quad   |  2.84 | 1.32 | -0.00 |       |   |     2.84 |    92.73 |  0.08 | 60.00 |   0.94 |                     2.90 |                   103.10 | 57.00 |   0.00 |  88.00 |   2.90 | 103.10 |
| 4 | NoEast | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1            | lin    |  5.62 | 0.92 |       |       |   |     5.62 |   114.66 | 36.41 | 48.00 |   0.91 |                     2.70 |                   120.70 | 46.00 |   0.00 |  75.00 |   3.80 |  87.10 |
| 5 | PacfNW | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1/age        | cub    | -0.85 | 2.44 | -0.03 |  0.00 |   |     1.56 |   146.78 |  1.40 | 74.00 |   0.98 |                     1.10 |                   129.40 | 70.00 |   1.00 |  81.00 |   1.10 | 129.40 |
| 6 | TpIntW | Acer platanoides | ACPL   | age                  | dbh                | centimeters                   | 1/age        | cub    |  4.42 | 1.08 |  0.01 | -0.00 |   |     4.42 |    79.42 |  0.81 | 62.00 |   0.96 |                     5.30 |                    95.00 | 58.00 |   1.00 | 105.00 |   5.30 |  95.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(filter(d, SpCode == "ACPL", Region == "NoEast"))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | Region | City       |    TreeID | SpCode |   DBH |   Leaf |   Age |   AGE |
|---+--------+------------+-----------+--------+-------+--------+-------+-------|
| 1 | NoEast | Queens, NY | 900243.00 | ACPL   |  3.80 |   3.10 |  0.00 |  0.00 |
| 2 | NoEast | Queens, NY |  46681.00 | ACPL   | 87.10 | 445.50 | 75.00 | 75.00 |
#+END_SRC

The reason that the equation for ACPL in the North East is linear is
because there are only two observations.  Yikes.


TIAM TpIntW
#+begin_src R :exports results :results graphics :file figs/predictions_dbh_bySpecies_wData_TIAM.pdf :height 3 :width 5

    theme_set(theme_classic(base_size = 12))
  predictions_apprange.tiam <- predictions_apprange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "TIAM", Region == "TpIntW")

    predictions_datarange.tiam <- predictions_datarange %>% mutate(AGE = x, DBH = predicted_dbh) %>%
      filter(SpCode == "TIAM", Region == "TpIntW")

  ggplot(filter(d, SpCode == "TIAM", Region == "TpIntW"), aes( x = AGE, y = DBH)) +
      geom_point(alpha = .7, size = 1) +
        theme(text = element_text(size = 20)) +
      geom_line(data = predictions_datarange.tiam, aes(group = Region), size = 1, linetype = "1111") +
      geom_line(data = predictions_apprange.tiam, aes(group = Region), size = 1)


#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_bySpecies_wData_TIAM.pdf]]


#+begin_src R :exports results :results graphics :file figs/quadratic.png :height 1200 :width 1200
  ggplot(predictions_apprange %>% filter(EqName == "quad"), aes(x = AGE, y = DBH)) +
    geom_line() +
    facet_wrap(~interaction(SpCode, Region))
#+end_src

#+RESULTS:
[[file:../figs/quadratic.png]]

TIAM TpIntW

** NEXT modelling

Just do the climate effects now

Subset down to 5 species
#+begin_src R
sp.sub <- c("ACPL", "QURU", "PIST", "CEOC", "FRPE")
ds <- filter(d, SpCode %in% sp.sub)
#+end_src

#+RESULTS:

*** lme4
#+begin_src R
library(lme4)
#+end_src

#+RESULTS:

#+begin_src R
ds <- mutate(ds, logDBH = log(DBH), logAGE = log(AGE + 1), AGE2 = AGE^2, AGE2scaled = AGE2/100)
#mod <- lmer(DBH ~ AGE + (1 + AGE | SpCode) + ( 1 + AGE | Region), data = ds)
#mod <- lmer(DBH ~ poly(AGE,2) + (1 + poly(AGE,2) | SpCode) + ( 1 + poly(AGE,2) | Region), data = ds)
#mod <- lmer(DBH ~ poly(AGE,2) + (1 + poly(AGE,2) | SpCode) + ( 1 + AGE | Region), data = ds)
#mod <- lmer(DBH ~ sqrt(AGE) + (1 + sqrt(AGE) | SpCode) + ( 1 + sqrt(AGE) | Region), data = ds)
#mod <- lmer(DBH ~ AGE + (1 + AGE | SpCode) + ( 1 + AGE | Region), data = ds)


#no intercept.  This is a good looking model.
mod <- lmer(DBH ~ AGE + AGE2scaled - 1 + (AGE + AGE2scaled - 1 | SpCode) + (AGE - 1 | Region), data = ds)

#+end_src

#+RESULTS:

#+begin_src R
summary(mod)
#+end_src

#+RESULTS:
#+begin_example
Linear mixed model fit by REML ['lmerMod']
Formula:
DBH ~ AGE + AGE2scaled - 1 + (AGE + -1 | SpCode) + (AGE + AGE2scaled -
    1 | Region)
   Data: ds

REML criterion at convergence: 6096.9

Scaled residuals:
    Min      1Q  Median      3Q     Max
-3.4742 -0.5288 -0.0049  0.5247  3.8558

Random effects:
 Groups   Name       Variance Std.Dev. Corr
 Region   AGE         0.16326 0.40406
          AGE2scaled  0.08519 0.29187  -0.93
 SpCode   AGE         0.00158 0.03975
 Residual            91.47154 9.56408
Number of obs: 822, groups:  Region, 8; SpCode, 4

Fixed effects:
           Estimate Std. Error t value
AGE          1.8479     0.1511  12.233
AGE2scaled  -0.8656     0.1199  -7.221

Correlation of Fixed Effects:
           AGE
AGE2scaled -0.895
#+end_example

#+begin_src R

    dsAGE_min_max = ds %>%
      group_by(Region, SpCode) %>%
      summarize(minAGE = min(AGE, na.rm = T),
                maxAGE = max(AGE, na.rm = T)) %>%
        data.frame()

  newdata <- lapply(1:nrow(dsAGE_min_max), function(i) {
      x <- seq(dsAGE_min_max$minAGE[i], dsAGE_min_max$maxAGE[i],  (dsAGE_min_max$maxAGE[i] - dsAGE_min_max$minAGE[i]) / 9)
      cbind(dsAGE_min_max[i,], AGE = x)
  })

  newdata <- bind_rows(newdata)

  newdata <- mutate(newdata, logAGE = log(AGE + 1), AGE2scaled = AGE^2/100)

#+end_src

#+RESULTS:
: There were 17 warnings (use warnings() to see them)

#+begin_src R
  pred <- predict(mod, newdata)

  pred <- cbind(newdata, pred) %>%
    mutate(DBH = pred)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1.png
  ggplot(pred, aes(x = AGE, y = DBH)) + geom_line() +
    facet_grid(Region~SpCode)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1.png]]


#+begin_src R

      dsAGE_min_max = ds %>%
        group_by(SpCode) %>%
        summarize(minAGE = min(AGE, na.rm = T),
                  maxAGE = max(AGE, na.rm = T)) %>%
          data.frame()

    newdata <- lapply(1:nrow(dsAGE_min_max), function(i) {
        x <- seq(dsAGE_min_max$minAGE[i], dsAGE_min_max$maxAGE[i],  (dsAGE_min_max$maxAGE[i] - dsAGE_min_max$minAGE[i]) / 9)
        cbind(dsAGE_min_max[i,], AGE = x)
    })

    newdata <- bind_rows(newdata)

  newdata <- mutate(newdata, logAGE = log(AGE + 1), AGE2scaled = AGE^2/100)


  regions <- rep(unique(ds$Region), each = nrow(newdata))

newdata <- do.call("rbind", replicate(length(unique(regions)), newdata, simplify = FALSE))

  newdata$Region <- regions

#+end_src

#+RESULTS:
: Warning messages:
: 1: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 2: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 3: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 4: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded

#+begin_src R
  pred <- predict(mod, newdata)

  pred <- cbind(newdata, pred) %>%
    mutate(DBH = pred)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1_RegionsWoSpecies.png
  ggplot(pred, aes(x = AGE, y = DBH)) + geom_line() +
    facet_grid(Region~SpCode)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1_RegionsWoSpecies.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1_RegionsWoSpecies_wData.png :width 600 :height 600
  ggplot(pred, aes(x = AGE, y = DBH)) + geom_line() +
    facet_grid(Region~SpCode) +
geom_point(data = ds, size = .5, alpha = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1_RegionsWoSpecies_wData.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetSpCode.png :width 1000 :height 300
  ggplot(pred, aes(x = AGE, y = DBH, color = Region)) + geom_line() +
  facet_wrap(~SpCode, ncol = 5) +
  geom_point(data = ds, size = .5, alpha = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetSpCode.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetRegion_ACPL.png :width 420 :height 400
  ggplot(filter(pred, SpCode == "ACPL", Region %in% unique(filter(ds, SpCode == "ACPL")$Region)), aes(x = AGE, y = DBH, color = Region)) + geom_line() +
  geom_point(data = filter(ds, SpCode == "ACPL"), size = .5, alpha = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetRegion_ACPL.png]]


#+begin_src R :exports results :results graphics :file figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetRegion_ACPL_wUTDeqn.png :width 1000 :height 400
    ggplot(filter(pred, SpCode == "ACPL", Region %in% unique(filter(ds, SpCode == "ACPL")$Region)), aes(x = AGE, y = DBH)) +
        geom_line(aes(color = Region)) +
    facet_wrap(~Region, ncol = 3) +
    geom_point(data = filter(ds, SpCode == "ACPL"), size = .5, alpha = .5) +
        geom_line(data = predictions_apprange.acpl, aes(group = Region), color = "black", size = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_dbh_m1_RegionsWoSpecies_wData_facetRegion_ACPL_wUTDeqn.png]]


#+begin_src R
filter(d, SpCode == "ACPL") %>% group_by(Region) %>% summarize(n = n())
#+end_src

#+RESULTS:
: # A tibble: 5 x 2
:   Region     n
:    <chr> <int>
: 1 MidWst    48
: 2 NMtnPr    60
: 3 NoEast     2
: 4 PacfNW    74
: 5 TpIntW    62

#+begin_src R :results org :eval no
ascii.nowarn.print(filter(eqn, SpCode == "ACPL"))
#+end_src


| Region | SpCode | Independent.variable | Predicts.component | Model.weight | EqName |     a |    b |     c |     d | Apps.min | Apps.max | Sigma |     n | adj.R2 | Data.min..from.raw.data. | Data.max..from.raw.data. |    DF | minAGE | maxAGE | minDBH | maxDBH |
|--------+--------+----------------------+--------------------+--------------+--------+-------+------+-------+-------+----------+----------+-------+-------+--------+--------------------------+--------------------------+-------+--------+--------+--------+--------|
| LoMidW | ACPL   | age                  | dbh                | 1/age        | cub    |  0.98 | 0.25 |  0.04 | -0.00 |     0.98 |   103.07 |  0.48 | 13.00 |   0.98 |                     4.80 |                    98.60 |  9.00 |   0.00 | 100.00 |        |        |
| MidWst | ACPL   | age                  | dbh                | 1            | cub    | -7.95 | 3.81 | -0.09 |  0.00 |     2.66 |    93.26 |  8.92 | 48.00 |   0.97 |                     4.60 |                    77.50 | 44.00 |   2.00 |  44.00 |   4.60 |  77.50 |
| NMtnPr | ACPL   | age                  | dbh                | 1/age^2      | quad   |  2.84 | 1.32 | -0.00 |       |     2.84 |    92.73 |  0.08 | 60.00 |   0.94 |                     2.90 |                   103.10 | 57.00 |   0.00 |  88.00 |   2.90 | 103.10 |
| NoEast | ACPL   | age                  | dbh                | 1            | lin    |  5.62 | 0.92 |       |       |     5.62 |   114.66 | 36.41 | 48.00 |   0.91 |                     2.70 |                   120.70 | 46.00 |   0.00 |  75.00 |   3.80 |  87.10 |
| PacfNW | ACPL   | age                  | dbh                | 1/age        | cub    | -0.85 | 2.44 | -0.03 |  0.00 |     1.56 |   146.78 |  1.40 | 74.00 |   0.98 |                     1.10 |                   129.40 | 70.00 |   1.00 |  81.00 |   1.10 | 129.40 |
| TpIntW | ACPL   | age                  | dbh                | 1/age        | cub    |  4.42 | 1.08 |  0.01 | -0.00 |     4.42 |    79.42 |  0.81 | 62.00 |   0.96 |                     5.30 |                    95.00 | 58.00 |   1.00 | 105.00 |   5.30 |  95.00 |

There are 5 regions with data for dbh and age of ACPL.  the North east
has two data points.  Even though there are no data for the LoMidW
region, there is an equation for it with a reported n of 13.  Where
does this equation come from?  The n for the north east is reportedly
48, but is really 2.



**** What about adding climate?
#+begin_src R
sp.sub <- c("ACPL", "QURU", "PIST", "CEOC", "FRPE")
ds <- filter(d, SpCode %in% sp.sub)
#+end_src

#+RESULTS:

#+begin_src R
ds <- mutate(ds, logDBH = log(DBH), logAGE = log(AGE + 1), AGE2 = AGE^2, AGE2scaled = AGE2/100)
#+end_src

#+RESULTS:

from table 1 see above

#+begin_src R :var climate=city_climate
str(climate)
#+end_src

#+RESULTS:
: 'data.frame':	17 obs. of  5 variables:
:  $ Region: chr  "CenFla" "GulfCo" "InlEmp" "InlVal" ...
:  $ City  : chr  "Orlando, FL" "Charleston, SC" "Claremont, CA" "Modesto, CA" ...
:  $ CDD   : int  1806 1124 134 1052 773 677 510 355 349 39 ...
:  $ HDD   : int  289 1221 872 1439 1718 2416 3153 4436 3332 1786 ...
:  $ Precip: int  1367 1555 523 315 470 250 392 622 452 564 ...


#+begin_src R :exports results :results graphics :file figs/climatespace.png
ggplot(climate, aes(x = HDD, y = CDD,label = City)) + geom_point(aes(size = Precip)) + geom_text(hjust = .5, nudge_y = 80)
#+end_src

#+RESULTS:
[[file:../figs/climatespace.png]]

Rescale precip, HDD, and CDD by dividing by 100
#+begin_src R
climate <- climate %>% mutate(HDD = HDD/100, CDD = CDD/100, Precip = Precip/100)
ds <- left_join(ds, climate)
#+end_src

#+RESULTS:
: Joining, by = c("Region", "City")


Just precip for now
#+begin_src R
mod_precip <- lmer(DBH ~ AGE + AGE2scaled - 1 + Precip + Precip:AGE +(AGE + AGE2scaled - 1 | SpCode) + (AGE - 1 | Region), data = ds)
#+end_src

#+RESULTS:

#+begin_src R
      dsAGE_min_max = ds %>%
        group_by(SpCode) %>%
        summarize(minAGE = min(AGE, na.rm = T),
                  maxAGE = max(AGE, na.rm = T)) %>%
          data.frame()

  newdata <- lapply(1:nrow(dsAGE_min_max), function(i) {
          x <- seq(dsAGE_min_max$minAGE[i], dsAGE_min_max$maxAGE[i],  (dsAGE_min_max$maxAGE[i] - dsAGE_min_max$minAGE[i]) / 9)
          cbind(dsAGE_min_max[i,], AGE = x)
      })

      newdata <- bind_rows(newdata)

    newdata <- mutate(newdata, logAGE = log(AGE + 1), AGE2scaled = AGE^2/100)

  regions <- rep(c("wet","dry"), each = nrow(newdata))
  newprecip <- rep(c(2.5,14), each = nrow(newdata))

  newdata <- do.call("rbind", replicate(length(unique(regions)), newdata, simplify = FALSE))

  newdata$Region <- regions
  newdata$Precip <- newprecip


#+end_src

#+RESULTS:
: Warning messages:
: 1: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 2: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 3: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded
: 4: In data.frame(..., check.names = FALSE) :
:   row names were found from a short variable and have been discarded

#+begin_src R
  pred <- predict(mod_precip, newdata, allow.new.levels = T)

  pred <- cbind(newdata, pred) %>%
    mutate(DBH = pred)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/precip_pred.png
  ggplot(pred, aes(x = AGE, y = DBH, color = Precip, group = interaction(Region,Precip))) + geom_line() +
    facet_wrap(~SpCode)
#+end_src

#+RESULTS:
[[file:../figs/precip_pred.png]]

#+begin_src R :exports results :results graphics :file figs/precip_pred_wsomedata.png
  ggplot(pred, aes(x = AGE, y = DBH, color = Precip, group = interaction(Region,Precip))) + geom_line() +
    facet_wrap(~SpCode) +
    geom_point(data = ds)
#+end_src

#+RESULTS:
[[file:../figs/precip_pred_wsomedata.png]]


#+begin_src R
  ggplot() +

#+end_src

* Exploring dbh and crown diameter
show plots of dbh versus biomass and the published equations on a
figure.

look specifically for places where pooling might help (same species in
two regions)

** load libraries
#+begin_src R :exports none
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
#+end_src

#+RESULTS:
** read in data
#+begin_src R :exports code
d <- read_csv("data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
#+end_src

#+RESULTS:
#+begin_example
Parsed with column specification:
cols(
  .default = col_integer(),
  Region = col_character(),
  City = col_character(),
  Source = col_character(),
  Zone = col_character(),
  `Park/Street` = col_character(),
  SpCode = col_character(),
  ScientificName = col_character(),
  CommonName = col_character(),
  TreeType = col_character(),
  street = col_character(),
  `DBH (cm)` = col_double(),
  `TreeHt (m)` = col_double(),
  CrnBase = col_double(),
  `CrnHt (m)` = col_double(),
  `CdiaPar (m)` = col_double(),
  `CDiaPerp (m)` = col_double(),
  `AvgCdia (m)` = col_double(),
  `Leaf (m2)` = col_double(),
  dbh1 = col_double()
)
See spec(...) for full column specifications.
Warning: 24255 parsing failures.
row # A tibble: 5 x 5 col     row   col   expected actual                                            file expected   <int> <chr>      <chr>  <chr>                                           <chr> actual 1  1262  side an integer      C 'data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv' file 2  1263  side an integer      C 'data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv' row 3  1264  side an integer      C 'data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv' col 4  1265  side an integer      C 'data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv' expected 5  1266  side an integer      C 'data/RDS-2016-0005/Data/TS3_Raw_tree_data.csv'
... ................. ... ............................................................................... ........ ............................................................................... ...... ............................................................................... .... ................................................................. [... truncated]
Warning message:
In rbind(names(probs), probs_f) :
  number of columns of result is not a multiple of vector length (arg 1)
#+end_example


#+begin_src R
#str(d)
#+end_src

#+RESULTS:

** tidy a few names and select variables of interest here
#+begin_src R
d <- d %>% rename(DBH = `DBH (cm)`, Leaf = `Leaf (m2)`, AvgCdia = `AvgCdia (m)`) %>% select(Region, City, TreeID, SpCode, DBH, Leaf, AvgCdia, Age)
#+end_src

#+RESULTS:

#+begin_src R
summary(d$Leaf)
sum(d$Leaf == -1) / length(d$Leaf)
sum(d$AvgCdia == -1) / length(d$AvgCdia)
sum(d$DBH == -1) / length(d$DBH)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
:    -1.0    12.9   116.1   302.5   389.2  9516.0
: [1] 0.1143094
: [1] 0.003244288
: [1] 0

#+begin_src R
d <- filter(d, AvgCdia != -1)
#+end_src

#+RESULTS:

** plot dbh versus average crown diamter for all trees
#+begin_src R :exports results :results graphics :file figs/dbhVcdia_all.png :bg transparent
ggplot(d, aes( x = DBH, y = AvgCdia)) + geom_point()
#+end_src

#+RESULTS:
[[file:../figs/dbhVcdia_all.png]]

** DBH versus Cdia by cities
Constraining scales to 0-200 dbh and 0-40 AvgCdia.  Much of
variability within regions is due to species, colored in the plot below.
#+begin_src R :exports results :results graphics :file figs/dbhVcdia_byCity_focusCoords.png :height 1000 :width 1000
      ggplot(d, aes( x = DBH, y = AvgCdia, color = SpCode)) + geom_point(alpha = .7, size = .5) +
          facet_wrap(~City) +
          coord_cartesian(xlim = c(0, 200), ylim = c(0,40)) +
          theme_minimal() +
          theme(text = element_text(size = 20),
                legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/dbhVcdia_byCity_focusCoords.png]]

** DBH versus Cdia by species
#+begin_src R :exports results :results graphics :file figs/dbhVcdia_bySpecies_focusCoords.png :height 1500 :width 800
      ggplot(d, aes( x = DBH, y = AvgCdia, color = City)) + geom_point(alpha = .2, size = .5) +
          facet_wrap(~SpCode, ncol = 8) +
          coord_cartesian(xlim = c(0, 200), ylim = c(0,40)) +
          theme_minimal() +
          theme(text = element_text(size = 20),
                legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/dbhVcdia_bySpecies_focusCoords.png]]

Woah, there are lots of species.  Clearly there is some variability in
the relationship between dbh and crown diameter across species.

** DBH versus Cdia by species for species that are in more than 1 city
Does the relationship between DBH and AvgCdia for a species change
depending on the city where it is?

Is there evidence for a different equation for every species city
combination?  Or can we use one equation for each species, regardless
of city?
#+begin_src R
  sp.w.multiple.cities <- d %>% group_by(City, SpCode) %>% summarize(n = n()) %>% ungroup() %>% group_by(SpCode) %>%
    summarize(n_cities_per_species = n()) %>%
    filter(n_cities_per_species > 1) %>%
    pull(SpCode)

d.sp.w.multiple.cities <- filter(d, SpCode %in% sp.w.multiple.cities)

#+end_src

#+RESULTS:


*** Each panel is a species, Each color is a different city
#+begin_src R :exports results :results graphics :file figs/dbhVcdia_bySpecies_focusCoords_multiplecities.png :height 1000 :width 800
  ggplot(d.sp.w.multiple.cities, aes( x = DBH, y = AvgCdia, color = City)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free", ncol = 8) +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none")
#+end_src

#+RESULTS:
[[file:../figs/dbhVcdia_bySpecies_focusCoords_multiplecities.png]]
*** Adding Loess trend lines
It looks like some species have the same relationship (e.g. ACPL),
others may have a different relationship (e.g. LAIN, MOAL), and for
some it is hard to tell because the data don't fully overlap
(e.g. LITU).  This is a very informal assessment, but I think there's
something here.  Similarities are likely due to the cities having
similar climates.  Differences are likely due to cities having
different climates.  There could be a genetic component too.
#+begin_src R :exports results :results graphics :file figs/dbhVcdia_bySpecies_focusCoords_multiplecities_trendlines.png :height 1100 :width 800
  ggplot(d.sp.w.multiple.cities, aes( x = DBH, y = AvgCdia, color = City)) +
      geom_point(alpha = .7, size = .8) +
      facet_wrap(~SpCode, scales = "free", ncol = 8) +
    #  coord_cartesian(xlim = c(0, 200), ylim = c(0,40)) +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
    stat_smooth()
#+end_src

#+RESULTS:
[[file:../figs/dbhVcdia_bySpecies_focusCoords_multiplecities_trendlines.png]]

ACPL's cities
#+begin_src R
filter(d.sp.w.multiple.cities, SpCode == "ACPL") %>% pull(City) %>% unique
#+end_src

#+RESULTS:
: [1] "Fort Collins, CO" "Minneapolis, MN"  "Indianapolis, IN" "Queens, NY"
: [5] "Boise, ID"        "Longview, WA"

MOAL's cities
#+begin_src R
filter(d.sp.w.multiple.cities, SpCode == "MOAL") %>% pull(City) %>% unique
#+end_src

#+RESULTS:
: [1] "Glendale, AZ" "Longview, WA"
** Concluding thoughts
Clearly the relationship between DBH and AvgCdia varies with species
and with location.  However, for many species there is little

** Plot Urban Tree Allometric equations on top of data

#+begin_src R
                predict.allo <- function(x, EqName, a, b, c, d, e) {
              if(EqName == "loglogw1") {
                  y = exp(a + b*log(log(x + 1) + c/2))
                  }
              else if(EqName == "loglogw2") {
                y = exp(a + b*log(log(x + 1))+(sqrt(x) * (c/2)))
              }
              else if (EqName == "loglogw3") {
                y = exp(a + b*log(log(x + 1)) + x * c/2)
              }
              else if (EqName == "loglogw4") {
                y = exp(a + b*log(log(x + 1)) + x^2 * c/2)
              }
              else if (EqName == "expow1") {
                  y = exp(a+ b * (x) + (c/2))
              }
              else if (EqName == "lin") {
                      y = a + b * x
                  }
              else if (EqName == "quad") {
                      y = a + b * x + c* x^2
                  }
              else if (EqName == "cub") {
                      y = a+b * x+c *x^2 + d * x^3
                  }
              else if (EqName == "quart") {
                      y = a+b * x+c *x^2 + d * x^3 + e * x^4
                  }
              return(y)
          }


#+end_src

#+RESULTS:


#+begin_src R
        eqn <- read.csv("data/RDS-2016-0005/Data/TS6_Growth_coefficients_fromNatalie.csv", stringsAsFactors = F) %>%
              mutate(a = as.numeric(a))

          eqn <- eqn %>%
              filter(Predicts.component %in% c("crown dia"), Independent.variable == "dbh")

    dbh_min_max = d %>%
      group_by(Region, SpCode) %>%
      summarize(minDBH = min(DBH, na.rm = T),
                maxDBH = max(DBH, na.rm = T))

    eqn <- left_join(eqn, dbh_min_max)

    cdia_min_max = d %>%
      group_by(Region, SpCode) %>%
      summarize(minCdia = min(AvgCdia, na.rm = T),
                maxCdia = max(AvgCdia, na.rm = T))

    eqn <- left_join(eqn, cdia_min_max)


                                            # fill in the NAs due to equations existing for species in regions where they weren't sampled.
    eqn$minDBH[is.na(eqn$minDBH)] <- 5
    eqn$maxDBH[is.na(eqn$maxDBH)] <- 90

        newdata <- lapply(1:nrow(eqn), function(i) {
            x <- seq(eqn$minDBH[i], eqn$maxDBH[i],  (eqn$maxDBH[i] - eqn$minDBH[i]) / 9)
            cbind(x, eqn[i,])
            })

      newdata <- bind_rows(newdata)

        predictions <- newdata %>% rowwise %>% mutate(predicted_Cdia = predict.allo(x = x, EqName = EqName, a = a, b = b, c = c, d = d, e = e))



  #filter out predictions that are outside range of data and label those in range of appsmin and appsmax
  predictions_apprange <- predictions %>%
      filter(predicted_Cdia > Apps.min & predicted_Cdia < Apps.max)

  predictions_datarange <- predictions %>%
      filter(predicted_Cdia > minCdia & predicted_Cdia < maxCdia)

#+end_src

#+RESULTS:
: Joining, by = c("Region", "SpCode")
: Joining, by = c("Region", "SpCode")
: There were 50 or more warnings (use warnings() to see the first 50)



#+begin_src R :exports results :results graphics :file figs/predictions_byRegion.png

  ggplot(predictions_apprange, aes(x = x, y = predicted_Cdia, group = SpCode)) +
      geom_line() +
    facet_wrap(~Region, scales = "free")

#+end_src

#+RESULTS:
[[file:../figs/predictions_byRegion.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_bySpecies.png :height 1200 :width 1200

  ggplot(predictions_apprange, aes(x = x, y = predicted_Cdia, group = Region)) +
      geom_line() +
    facet_wrap(~SpCode, scales = "free")

#+end_src

#+RESULTS:
[[file:../figs/predictions_bySpecies.png]]

What's up with BUCA and PIPO?  Those equations seem wrong.

#+begin_src R :exports results :results graphics :file figs/GulfCo_BUCA.png
gcbuca <- filter(predictions, Region == "GulfCo", SpCode == "BUCA") %>% mutate(DBH = x)

  ggplot(gcbuca, aes(x = DBH, y = predicted_Cdia)) + geom_line()
#+end_src

#+RESULTS:
[[file:../figs/GulfCo_BUCA.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_bySpeciesFull_wData.png :height 1200 :width 1200
    predictions_apprange <- predictions_apprange %>% mutate(DBH = x, AvgCdia = predicted_Cdia)

  ggplot(d, aes( x = DBH, y = AvgCdia, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_apprange, aes(group = Region), size = 1.5)

#+end_src

#+RESULTS:
[[file:../figs/predictions_bySpeciesFull_wData.png]]


#+begin_src R :exports results :results graphics :file figs/predictions_bySpecies_wData.png :height 1200 :width 1200
    predictions_apprange.sp.w.multiple.cities <- predictions_apprange %>%       filter(SpCode %in% d.sp.w.multiple.cities$SpCode)


  ggplot(d.sp.w.multiple.cities, aes( x = DBH, y = AvgCdia, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_apprange.sp.w.multiple.cities, aes(group = Region), size = 1.5)

#+end_src


#+RESULTS:
[[file:../figs/predictions_bySpecies_wData.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_bySpecies_wData_ACPL.png
    predictions_apprange.acpl <- predictions_apprange %>% mutate(DBH = x, AvgCdia = predicted_Cdia) %>%
      filter(SpCode == "ACPL")

    predictions_datarange.acpl <- predictions_datarange %>% mutate(DBH = x, AvgCdia = predicted_Cdia) %>%
      filter(SpCode == "ACPL")

  ggplot(filter(d, SpCode == "ACPL"), aes( x = DBH, y = AvgCdia, color = Region)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_datarange.acpl, aes(group = Region), size = 2, linetype = "1111") +
      geom_line(data = predictions_apprange.acpl, aes(group = Region), size = 2)


#+end_src

#+RESULTS:
[[file:../figs/predictions_bySpecies_wData_ACPL.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_bySpecies_wData_ACPL_facet.png
    predictions_apprange.acpl <- predictions_apprange %>% mutate(DBH = x, AvgCdia = predicted_Cdia) %>%
      filter(SpCode == "ACPL")

    predictions_datarange.acpl <- predictions_datarange %>% mutate(DBH = x, AvgCdia = predicted_Cdia) %>%
      filter(SpCode == "ACPL")

  ggplot(filter(d, SpCode == "ACPL"), aes( x = DBH, y = AvgCdia)) +
      geom_point(alpha = .7, size = .5) +
      facet_wrap(~SpCode, scales = "free") +
      theme_minimal() +
      theme(text = element_text(size = 20),
            legend.position = "none") +
      geom_line(data = predictions_datarange.acpl, aes(group = Region, color = Region), size = 1, linetype = "1111") +
      geom_line(data = predictions_apprange.acpl, aes(group = Region, color = Region), size = 1) +
    facet_wrap(~Region)


#+end_src

#+RESULTS:
[[file:../figs/predictions_bySpecies_wData_ACPL_facet.png]]

We should be able to borrow information from other regions to extend
the applicable range for regions with smaller ranges.

** Model
the slope between dbh and the other tree characteristic would be a
function of the species characteristics and the city's climate.


** COMMENT Thinking about writing out the model

This follows Gelman and Hill 2007 notation:

see page 291.

\[
y_i \sim lognormal(\alpha + \beta_{j[i],k[i]} x_i , \sigma_y)
\]

\[
\beta_j \sim normal(\gamma_0 + \gamma_1 u_j, \sigma_\beta)
\]

where
- y is our target tree characteristic, average crown diameter, say.
- x is the diameter at breast height
- u is the "climate" e.g. growing degree days of a city
- \gamma's  are the coefficients for climate on the slope between x
  and y
-
-
  -

** COMMENT climate data
https://www.ncdc.noaa.gov/data-access/land-based-station-data/land-based-datasets/climate-normals/1981-2010-normals-data

see also table 1 in https://www.fs.fed.us/psw/publications/documents/psw_gtr253/psw_gtr_253.pdf

** NEXT modelling

Just do the climate effects now

Subset down to 5 species
#+begin_src R
sp.sub <- c("ACPL", "QURU", "PIST", "CEOC", "FRPE")
ds <- filter(d, SpCode %in% sp.sub)
#+end_src

#+RESULTS:

*** lme4
#+begin_src R
library(lme4)
#+end_src

#+RESULTS:

#+begin_src R
ds <- mutate(ds, logAvgCdia = log(AvgCdia))
mod <- lmer(logAvgCdia ~ log(DBH) + (1 + log(DBH) | SpCode) + ( 1 + log(DBH) | Region), data = ds)
#+end_src

#+RESULTS:

#+begin_src R
mod
#+end_src

#+RESULTS:
#+begin_example
Linear mixed model fit by REML ['lmerMod']
Formula: logAvgCdia ~ log(DBH) | SpCode
   Data: ds
REML criterion at convergence: -439.0436
Random effects:
 Groups   Name        Std.Dev. Corr
 SpCode   (Intercept) 4.5990
          log(DBH)    0.7474   -1.00
 Residual             0.1977
Number of obs: 1224, groups:  SpCode, 5
Fixed Effects:
(Intercept)
      4.168
#+end_example

#+begin_src R

    dsDBH_min_max = ds %>%
      group_by(Region, SpCode) %>%
      summarize(minDBH = min(DBH, na.rm = T),
                maxDBH = max(DBH, na.rm = T)) %>%
        data.frame()

  newdata <- lapply(1:nrow(dsDBH_min_max), function(i) {
      x <- seq(dsDBH_min_max$minDBH[i], dsDBH_min_max$maxDBH[i],  (dsDBH_min_max$maxDBH[i] - dsDBH_min_max$minDBH[i]) / 9)
      cbind(dsDBH_min_max[i,], DBH = x)
  })

  newdata <- bind_rows(newdata)

  newdata <- mutate(newdata, logDBH = log(DBH))

#+end_src

#+begin_src R
  pred <- predict(mod, newdata)

  pred <- cbind(newdata, pred) %>%
    mutate(Cdia = exp(pred))

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/predictions_m1.png
  ggplot(pred, aes(x = DBH, y = Cdia)) + geom_line() +
    facet_grid(Region~SpCode)
#+end_src

#+RESULTS:
[[file:../figs/predictions_m1.png]]


#+begin_src R

      dsDBH_min_max = ds %>%
        group_by(SpCode) %>%
        summarize(minDBH = min(DBH, na.rm = T),
                  maxDBH = max(DBH, na.rm = T)) %>%
          data.frame()

    newdata <- lapply(1:nrow(dsDBH_min_max), function(i) {
        x <- seq(dsDBH_min_max$minDBH[i], dsDBH_min_max$maxDBH[i],  (dsDBH_min_max$maxDBH[i] - dsDBH_min_max$minDBH[i]) / 9)
        cbind(dsDBH_min_max[i,], DBH = x)
    })

    newdata <- bind_rows(newdata)

    newdata <- mutate(newdata, logDBH = log(DBH))


  regions <- rep(unique(ds$Region), each = nrow(newdata))

newdata <- do.call("rbind", replicate(length(unique(regions)), newdata, simplify = FALSE))

  newdata$Region <- regions

#+end_src

#+RESULTS:
#+begin_example
Warning messages:
1: In data.frame(..., check.names = FALSE) :
  row names were found from a short variable and have been discarded
2: In data.frame(..., check.names = FALSE) :
  row names were found from a short variable and have been discarded
3: In data.frame(..., check.names = FALSE) :
  row names were found from a short variable and have been discarded
4: In data.frame(..., check.names = FALSE) :
  row names were found from a short variable and have been discarded
5: In data.frame(..., check.names = FALSE) :
  row names were found from a short variable and have been discarded
#+end_example

#+begin_src R
  pred <- predict(mod, newdata)

  pred <- cbind(newdata, pred) %>%
    mutate(AvgCdia = exp(pred))

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/predictions_m1_RegionsWoSpecies.png
  ggplot(pred, aes(x = DBH, y = AvgCdia)) + geom_line() +
    facet_grid(Region~SpCode)
#+end_src

#+RESULTS:
[[file:../figs/predictions_m1_RegionsWoSpecies.png]]

#+begin_src R :exports results :results graphics :file figs/predictions_m1_RegionsWoSpecies_wData.png :width 600 :height 600
  ggplot(pred, aes(x = DBH, y = AvgCdia)) + geom_line() +
    facet_grid(Region~SpCode) +
geom_point(data = ds, size = .5, alpha = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_m1_RegionsWoSpecies_wData.png]]


#+begin_src R :exports results :results graphics :file figs/predictions_m1_RegionsWoSpecies_wData_facetSpCode.png :width 1000 :height 300
  ggplot(pred, aes(x = DBH, y = AvgCdia, color = Region)) + geom_line() +
  facet_wrap(~SpCode, ncol = 5) +
  geom_point(data = ds, size = .5, alpha = .5)
#+end_src

#+RESULTS:
[[file:../figs/predictions_m1_RegionsWoSpecies_wData_facetSpCode.png]]

Obviously, the lines extrapolate quite a bit.  Differences across
regions appear to be pretty small.  Looking at the model summary it is
clear that there is little evidence distinguishing the different
regions and even the different species.  The is much variation not
explained by region or species.

If I used age instead of dbh, I'd probably find stronger differences
across regions.

**** What about adding climate?
from table 1

#+name: city_climate
| Region | City             |  CDD |  HDD | Precip |
|--------+------------------+------+------+--------|
| CenFla | Orlando, FL      | 1806 |  289 |   1367 |
| GulfCo | Charleston, SC   | 1124 | 1221 |   1555 |
| InlEmp | Claremont, CA    |  134 |  872 |    523 |
| InlVal | Modesto, CA      | 1052 | 1439 |    315 |
| SacVal | Sacramento, CA   |  773 | 1718 |    470 |
| InterW | Albuquerque, NM  |  677 | 2416 |    250 |
| LoMidW | Indianapolis, IN |  510 | 3153 |    392 |
| MidWst | Minneapolis, MN  |  355 | 4436 |    622 |
| NMtnPr | Fort Collins, CO |  349 | 3332 |    452 |
| NoCalC | Berkeley, CA     |   39 | 1786 |    564 |
| NoEast | Queens, NY       |  560 | 2819 |   1041 |
| PacfNW | Longview, WA     |  157 | 2468 |   1059 |
| Piedmt | Charlotte, NC    |  847 | 1891 |   1426 |
| SacVal | Santa Monica, CA |  266 |  710 |    570 |
| SWDsrt | Glendale, AZ     | 2128 |  637 |    174 |
| TpIntW | Boise, ID        |  387 | 3325 |    417 |
| Tropic | Honolulu, HI     | 2416 |    0 |   2206 |

These values for CDD and HDD are surprising to me, but maybe I don't
really understand how they are calcuated.  Maybe the theshold
temperature is what's driving it.  I don't think it matters here.

#+begin_src R :var climate=city_climate
str(climate)
#+end_src

#+RESULTS:
: 'data.frame':	17 obs. of  5 variables:
:  $ Region: chr  "CenFla" "GulfCo" "InlEmp" "InlVal" ...
:  $ City  : chr  "Orlando, FL" "Charleston, SC" "Claremont, CA" "Modesto, CA" ...
:  $ CDD   : int  1806 1124 134 1052 773 677 510 355 349 39 ...
:  $ HDD   : int  289 1221 872 1439 1718 2416 3153 4436 3332 1786 ...
:  $ Precip: int  1367 1555 523 315 470 250 392 622 452 564 ...


#+begin_src R :exports results :results graphics :file figs/climatespace.png
ggplot(climate, aes(x = HDD, y = CDD,label = City)) + geom_point(aes(size = Precip)) + geom_text(hjust = .5, nudge_y = 80)
#+end_src

#+RESULTS:
[[file:../figs/climatespace.png]]

Rescale precip, HDD, and CDD by dividing by 100
#+begin_src R
climate <- climate %>% mutate(HDD = HDD/100, CDD = CDD/100, Precip = Precip/100)
ds <- left_join(ds, climate)
#+end_src

#+RESULTS:
: Joining, by = c("Region", "City")


#+begin_src R

#+end_src

Just precip for now
#+begin_src R
mod_precip <- lmer(logAvgCdia ~ log(DBH) + Precip + Precip:log(DBH) + (1 + log(DBH) | SpCode) + ( 1 + log(DBH) | Region), data = ds)
#+end_src

#+RESULTS:

#+begin_src R
mod_hdd <- lmer(logAvgCdia ~ log(DBH) + HDD + HDD:log(DBH) + (1 + log(DBH) | SpCode) + ( 1 + log(DBH) | Region), data = ds)
#+end_src

#+RESULTS:



*** rstanarm
#+begin_src R
library(rstanarm)
options(mc.cores = parallel::detectCores())
#+end_src

#+RESULTS:

#+begin_src R
smod <- stan_glm(log(AvgCdia) ~ DBH, data = d, family = gaussian(link = "identity"))
#+end_src

#+RESULTS:
#+begin_example

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).

Gradient evaluation took 0.003692 seconds
1000 transitions using 10 leapfrog steps per transition would take 36.92 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).

Gradient evaluation took 0.003201 seconds
1000 transitions using 10 leapfrog steps per transition would take 32.01 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).

Gradient evaluation took 0.005202 seconds
1000 transitions using 10 leapfrog steps per transition would take 52.02 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).

Gradient evaluation took 0.006159 seconds
1000 transitions using 10 leapfrog steps per transition would take 61.59 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 19.5348 seconds (Warm-up)
               17.1469 seconds (Sampling)
               36.6817 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 19.8768 seconds (Warm-up)
               16.8117 seconds (Sampling)
               36.6885 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 21.2892 seconds (Warm-up)
               16.3886 seconds (Sampling)
               37.6777 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 19.5799 seconds (Warm-up)
               17.5401 seconds (Sampling)
               37.12 seconds (Total)
#+end_example

#+begin_src R
summary(smod)
#+end_src

#+RESULTS:
#+begin_example

Model Info:

 function:     stan_glm
 family:       gaussian [identity]
 formula:      log(AvgCdia) ~ DBH
 algorithm:    sampling
 priors:       see help('prior_summary')
 sample:       4000 (posterior sample size)
 observations: 14440
 predictors:   2

Estimates:
                mean    sd      2.5%    25%     50%     75%     97.5%
(Intercept)       1.2     0.0     1.2     1.2     1.2     1.2     1.2
DBH               0.0     0.0     0.0     0.0     0.0     0.0     0.0
sigma             0.4     0.0     0.4     0.4     0.4     0.5     0.5
mean_PPD          2.0     0.0     2.0     2.0     2.0     2.0     2.1
log-posterior -8910.8     1.2 -8914.0 -8911.4 -8910.5 -8909.9 -8909.4

Diagnostics:
              mcse Rhat n_eff
(Intercept)   0.0  1.0  3986
DBH           0.0  1.0  4000
sigma         0.0  1.0  2642
mean_PPD      0.0  1.0  3693
log-posterior 0.0  1.0  1848

For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).
#+end_example

#+begin_src R
print(smod, digits = 5)
#+end_src

#+RESULTS:


#+begin_src R
smod_Sp <- stan_glmer(log(AvgCdia) ~ DBH | SpCode, data = d, family = gaussian(link = "identity"))
#+end_src

#+RESULTS:
: Error: Using '|' in model formula not allowed. Maybe you meant to use 'stan_(g)lmer'?

posterior predict with exp transform

* COMMENT scratch
|                               |                |
|-------------------------------+----------------|
| Region                        | GulfCo         |
| Scientific.Name               | Butia capitata |
| SpCode                        | BUCA           |
| Independent.variable          | dbh            |
| Predicts.component            | crown dia      |
| Units.of.predicted.components | meters         |
| Model.weight                  | 1/ht^2         |
| EqName                        | cub            |
| a                             | -0.0575        |
| b                             | 0.10884        |
| c                             | 1.87801        |
| d                             | -0.45639       |
| e                             |                |
| Apps.min                      | 0.12           |
| Apps.max                      | 4.63           |
| Sigma                         |                |
| n                             |                |
| adj.R2                        |                |
| Data.min..from.raw.data.      | 0.7            |
| Data.max..from.raw.data.      | 7.4            |
| DF                            |                |



#+begin_src R
x <- 1:100
a <- seq(-.2, -1, -.2)
b <- seq(1.2,2, .2)
dq <- expand.grid(x = x, a = a,b = b)
dq <- mutate(dq, y = a*(x^2)/100 + b * x)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/understand_quad.png
  ggplot(dq, aes(x = x, y = y)) +
    geom_line() +
    facet_grid(a~ b)
#+end_src

#+RESULTS:
[[file:../figs/understand_quad.png]]

* Issues
1) Inconsistent naming of regions.  Is sacramento in the sacramento valley or the inland valley?
2) SpCode: "lain" instead of "LAIN"; "list" instead of "LIST"

* junk
 +
geom_vline(xintercept = -coef(m)[1]/(2*coef(m)[2]), linetype = "dashed", color = "blue")
