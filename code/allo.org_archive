#    -*- mode: org -*-


Archived entries from file /Users/erker/git/allo/code/allo.org


* some old modelling ideas.
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-07-17 Tue 10:26
  :ARCHIVE_FILE: ~/git/allo/code/allo.org
  :ARCHIVE_OLPATH: Methods/Data
  :ARCHIVE_CATEGORY: allo
  :ARCHIVE_ITAGS: work allo
  :END:
test different functions:
1) linear; y = a + bx
2) quadratic; y = a + bx + cx^2
3) log-log; log(y) = log(a + bx)

Allow none, some, or all of the parameters of these functions to vary
by species and with climate.  Use AIC to select the best model.

Palms are so different, it doesn't make much sense to pool them with
the other species.

model form:
cite:Weiskittel_ForestGrowthAndYieldModeling:
"This reality should lead to model forms that are complex enough to
accurately and adequately characterize the expected major behaviors of
the population, but simple enough to avoid being overly influenced by
the sampleâ€™s peculiarities."

see notes on bayesian approach in cite:Weiskittel_ForestGrowthAndYieldModeling

** priors

think about looking at champion tree datasets to get maximum sizes.

** COMMENT monotonic quadratic
https://stats.stackexchange.com/questions/197509/how-to-smooth-data-and-force-monotonicity

I wonder if I could find a way to do this for a multilevel model.
biometry project implementing this monotonic constraint in stan?


* constrain -b/2a >= max(x) in quadratic model
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-30 Mon 16:29
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
  acpl = readRDS("data/ACPL.rds") %>%
    select(-Leaf, -AGE, -SpCode, -TreeID) %>%
    mutate(Age2 = Age^2)
#+end_src

#+RESULTS:

** just TpIntW
*** unconstrained
#+begin_src R
  a <- filter(acpl, Region == "TpIntW") %>%
      arrange(Age) %>%
      .[seq(10,60,10),]


#+end_src

#+RESULTS:
: Error in filter(acpl, Region == "TpIntW") %>% arrange(Age) %>% .[seq(10,  :
:   could not find function "%>%"

#+begin_src R
m <- lm(DBH ~ Age + Age2 - 1, data = a)
unconstrained_model <- m
#+end_src

#+RESULTS:

#+begin_src R
  pdf <- data.frame(Age = seq(0,105, 5)) %>%
      mutate(Age2 = Age^2)

pdf$DBH <- predict(m, pdf)

#+end_src

#+RESULTS:


#+begin_src R
    y <- c(15, 34.5, 39.6, 51.6, 91.7, 73.7)
    x <- c(10L, 20L, 25L, 40L, 75L, 100L)

  a <- data.frame(y = y, x = x)

    m <- lm(y ~ x + I(x^2) - 1)

    p <- data.frame(x = seq(0,105, 5))

    p$y <- predict(m, p)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/acpl_tpintw_quadfit_nodash.pdf :height 3 :width 3
theme_set(theme_classic(base_size = 16))
ggplot(a, aes(x = x, y = y))  +
geom_point() +
geom_line(data = p) +
ggtitle("unconstrained fit")
#+end_src

#+RESULTS:
[[file:../figs/acpl_tpintw_quadfit_nodash.pdf]]

The predictions decrease at the high end, which cannot be correct.
Trying to constrain the curve so that it cannot decrease within the
range of the data.

\[
DBH = a(Age)^2 + b(Age)


\[
DBH = a(Age)^2 + b(Age)
\]

\[
y = ax^2 + bx + \epsilon
\]

\[
\epsilon \sim N(0,\sigma^2)
\]


\[
2ax + b > 0
\]
*** constrained
https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r?rq=1
y = ax^2 + bx

The positive part of the curve.
2ax + b > 0
b > 0 also


max(x) > -b/2a


#+begin_src R
maxage <- 105
unconstrained_model <- m
#+end_src

#+RESULTS:

#+begin_src R
  library(limSolve)

  A <- matrix(ncol = 2, c(x, x^2))
  B <- y
  G <- matrix(nrow = 1, ncol = 2, byrow = T, data = c(1,200))
  H <- c(0)

  constrained_model <- lsei(A = A,B = B, G = G, H = H, type = 2)

      my_predict <- function(x,coefficients){
      X <- cbind(x,x^2)
      predictions <- X%*%coefficients
      }

      # compute predictions
      xpred <- seq(0,105,5)
      predictions_constrained <- my_predict(xpred,constrained_model$X)
  df2 <- data.frame(xpred,predictions_constrained)
#+end_src

#+RESULTS:

#+begin_src R :eval no
  zhiwei.coef <- c(1.7, -0.0085)
  predictions_constrained <- my_predict(xpred,zhiwei.coef)
    df2 <- data.frame(xpred, predictions_constrained)
#+end_src

#+RESULTS:

#+begin_src R
(200* constrained_model$X[2]) + constrained_model$X[1]
-constrained_model$X[1] / (2* constrained_model$X[2])
#+end_src

#+RESULTS:
: [1] 0
: [1] 100

#+begin_src R :exports results :results graphics :file figs/constrained_quad.pdf :height 3 :width 3
theme_set(theme_classic(base_size = 12))
  ggplot(a, aes(x = x, y = y))  +
  geom_point() +
  geom_line(data = df2, aes(x = xpred, y = predictions_constrained)) +
ggtitle("constrained")
#+end_src

#+RESULTS:
[[file:../figs/constrained_quad.pdf]]

pcls
#+begin_src R
x <-
#+end_src

https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r?rq=1
#+begin_src R
  x <- c(0.01041667, 0.30208333, 0.61458333, 0.65625000, 0.83333333)
  y <- c(772, 607, 576, 567, 550)

  unconstrained_model <- lm(y ~ x + I(x^2) +I(x^3))

  df <- data.frame(x,y)
  library(ggplot2)
  (p <- ggplot(data=df,aes(x=x,y=y)) + geom_line()+geom_point()+geom_smooth())


  library(limSolve)
  A <- cbind(rep(1,length(x)),x,x^2,x^3)
  b <- y
  G <- matrix(nrow=3,ncol=4,byrow = TRUE,data = c(0, -1,-2,-3,0,-1,-2,0,0,-1,0,0))
  h <- rep(0,3)
  constrained_model <- lsei(A = A, B = b, G = G, H = h, type=2)


  my_predict <- function(x,coefficients){
  X <- cbind(rep(1,length(x)),x,x^2,x^3)
  predictions <- X%*%coefficients
  }
                                          # compute predictions
  xpred <- seq(0,1,len=100)
  predictions_constrained <- my_predict(xpred,constrained_model$X)
  predictions_unconstrained <-    my_predict(xpred,unconstrained_model$coefficients)
  df2 <- data.frame(xpred,predictions_unconstrained,predictions_constrained)

  # plot results
  p <- ggplot(data = df,aes(x = x, y = y,color = "data")) +
  geom_point() +
  geom_line(data = df2, aes(x = xpred, y = predictions_unconstrained, color = "unconstrained fit")) +
  geom_line(data = df2, aes(x = xpred, y = predictions_constrained, color = "constrained fit"))
  p

#+end_src

#+RESULTS:

*** so question
There are many questions on this site about restricted or constrained regression parameters.
https://stats.stackexchange.com/questions/206058/regularized-linear-regression-with-specific-parameter-constraints-in-r, https://stats.stackexchange.com/questions/61733/linear-regression-with-slope-constraint, https://stats.stackexchange.com/questions/228750/1d-linear-regression-with-inequality-constraint, https://stats.stackexchange.com/questions/32641/is-there-an-r-package-for-constrained-regression-that-has-both-a-formula-and-pre, https://stats.stackexchange.com/questions/172748/sparse-coding-with-constraints-in-the-optimization, https://stats.stackexchange.com/questions/123930/linear-regression-with-an-inequality-constraint, https://math.stackexchange.com/questions/60610/polynomial-fitting-where-polynomial-must-be-monotonically-increasing, and more I'm sure.

I've read these and am trying to fit a quadratic relationship that is constrained to be monotonic increasing over the range of my data:

$$y = ax^2 + bx + \epsilon$$   (the $c$ term is zero, $\epsilon$ ~ iid
$N(0,\sigma)$)

To constrain $f(x)$ to be increasing over all values of $x$:
$2ax + b > 0$

Sadly I am not having success implementing this, so this may be more of a "what am I doing wrong question".  My apologies if that's not appropriate here.

Here is the data and the unconstrained fit.  I'm following the approach from this question: https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r

    y <- c(15, 34.5, 39.6, 51.6, 91.7, 73.7)
    x <- c(10L, 20L, 25L, 40L, 75L, 100L)

    a <- data.frame(y = y, x = x)

    m <- lm(y ~ x + I(x^2) - 1)

    p <- data.frame(x = seq(0,105, 5))

    p$y <- predict(m, p)

    library(ggplot2)
    theme_set(theme_classic(base_size = 24))
    ggplot(a, aes(x = x, y = y))  +
    geom_point() +
    geom_line(data = p)

[![enter image description here][1]][1]

Now trying to fit the curve with inequality constraint.

    library(limSolve)
    A <- matrix(ncol = 2, c(x, x^2))
    B <- y
    G <- matrix(nrow = 1, ncol = 2, byrow = T, data = c(1,2)) # corresponding to 2ax + b
    H <- c(0)

    constrained_model <- lsei(A = A,B = B, G = G, H = H, type = 2)

    my_predict <- function(x,coefficients){
        X <- cbind(x,x^2)
        predictions <- X%*%coefficients
    }

     # compute predictions
     xpred <- seq(0,105,5)
     predictions_constrained <- my_predict(xpred,constrained_model$X)
     df2 <- data.frame(xpred,predictions_constrained)


    ggplot(a, aes(x = x, y = y))  +
      geom_point() +
      geom_line(data = df2, aes(x = xpred, y = predictions_constrained)) +
      ggtitle("constrained fit")

[![enter image description here][2]][2]

As the figure shows, the constraint is having no effect.

Am I not entering the constraint correctly?  Do I have the wrong constraint?

I know there are other packages like mgcv to fit monotonic increasing curves, maybe that would be a better choice?  I'd like to stick with the simple quadratic relationship.

Update: A friend fit this curve in Julia using the same constraints and got a proper curve.  b = 1.7, a = -0.0085.  Here's the curve with those values.  As you can see the function is increasing over the range of x, as desired.
[![proper][3]][3]


  [1]: https://i.stack.imgur.com/IlLJB.png
  [2]: https://i.stack.imgur.com/SBXV0.png
  [3]: https://i.stack.imgur.com/Kq3bK.png


* Full model
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-03 Fri 15:39
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:

\[
DBH \sim N(\beta_0 * (1 - \exp(-\beta_1 * AGE ^ {\beta_2})), \sigma)

#\b_0, \b

\]

species within genus within ...

