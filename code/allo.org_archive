#    -*- mode: org -*-


Archived entries from file /Users/erker/git/allo/code/allo.org


* some old modelling ideas.
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-07-17 Tue 10:26
  :ARCHIVE_FILE: ~/git/allo/code/allo.org
  :ARCHIVE_OLPATH: Methods/Data
  :ARCHIVE_CATEGORY: allo
  :ARCHIVE_ITAGS: work allo
  :END:
test different functions:
1) linear; y = a + bx
2) quadratic; y = a + bx + cx^2
3) log-log; log(y) = log(a + bx)

Allow none, some, or all of the parameters of these functions to vary
by species and with climate.  Use AIC to select the best model.

Palms are so different, it doesn't make much sense to pool them with
the other species.

model form:
cite:Weiskittel_ForestGrowthAndYieldModeling:
"This reality should lead to model forms that are complex enough to
accurately and adequately characterize the expected major behaviors of
the population, but simple enough to avoid being overly influenced by
the sampleâ€™s peculiarities."

see notes on bayesian approach in cite:Weiskittel_ForestGrowthAndYieldModeling

** priors

think about looking at champion tree datasets to get maximum sizes.

** COMMENT monotonic quadratic
https://stats.stackexchange.com/questions/197509/how-to-smooth-data-and-force-monotonicity

I wonder if I could find a way to do this for a multilevel model.
biometry project implementing this monotonic constraint in stan?


* constrain -b/2a >= max(x) in quadratic model
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-30 Mon 16:29
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
  acpl = readRDS("data/ACPL.rds") %>%
    select(-Leaf, -AGE, -SpCode, -TreeID) %>%
    mutate(Age2 = Age^2)
#+end_src

#+RESULTS:

** just TpIntW
*** unconstrained
#+begin_src R
  a <- filter(acpl, Region == "TpIntW") %>%
      arrange(Age) %>%
      .[seq(10,60,10),]


#+end_src

#+RESULTS:
: Error in filter(acpl, Region == "TpIntW") %>% arrange(Age) %>% .[seq(10,  :
:   could not find function "%>%"

#+begin_src R
m <- lm(DBH ~ Age + Age2 - 1, data = a)
unconstrained_model <- m
#+end_src

#+RESULTS:

#+begin_src R
  pdf <- data.frame(Age = seq(0,105, 5)) %>%
      mutate(Age2 = Age^2)

pdf$DBH <- predict(m, pdf)

#+end_src

#+RESULTS:


#+begin_src R
    y <- c(15, 34.5, 39.6, 51.6, 91.7, 73.7)
    x <- c(10L, 20L, 25L, 40L, 75L, 100L)

  a <- data.frame(y = y, x = x)

    m <- lm(y ~ x + I(x^2) - 1)

    p <- data.frame(x = seq(0,105, 5))

    p$y <- predict(m, p)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/acpl_tpintw_quadfit_nodash.pdf :height 3 :width 3
theme_set(theme_classic(base_size = 16))
ggplot(a, aes(x = x, y = y))  +
geom_point() +
geom_line(data = p) +
ggtitle("unconstrained fit")
#+end_src

#+RESULTS:
[[file:../figs/acpl_tpintw_quadfit_nodash.pdf]]

The predictions decrease at the high end, which cannot be correct.
Trying to constrain the curve so that it cannot decrease within the
range of the data.

\[
DBH = a(Age)^2 + b(Age)


\[
DBH = a(Age)^2 + b(Age)
\]

\[
y = ax^2 + bx + \epsilon
\]

\[
\epsilon \sim N(0,\sigma^2)
\]


\[
2ax + b > 0
\]
*** constrained
https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r?rq=1
y = ax^2 + bx

The positive part of the curve.
2ax + b > 0
b > 0 also


max(x) > -b/2a


#+begin_src R
maxage <- 105
unconstrained_model <- m
#+end_src

#+RESULTS:

#+begin_src R
  library(limSolve)

  A <- matrix(ncol = 2, c(x, x^2))
  B <- y
  G <- matrix(nrow = 1, ncol = 2, byrow = T, data = c(1,200))
  H <- c(0)

  constrained_model <- lsei(A = A,B = B, G = G, H = H, type = 2)

      my_predict <- function(x,coefficients){
      X <- cbind(x,x^2)
      predictions <- X%*%coefficients
      }

      # compute predictions
      xpred <- seq(0,105,5)
      predictions_constrained <- my_predict(xpred,constrained_model$X)
  df2 <- data.frame(xpred,predictions_constrained)
#+end_src

#+RESULTS:

#+begin_src R :eval no
  zhiwei.coef <- c(1.7, -0.0085)
  predictions_constrained <- my_predict(xpred,zhiwei.coef)
    df2 <- data.frame(xpred, predictions_constrained)
#+end_src

#+RESULTS:

#+begin_src R
(200* constrained_model$X[2]) + constrained_model$X[1]
-constrained_model$X[1] / (2* constrained_model$X[2])
#+end_src

#+RESULTS:
: [1] 0
: [1] 100

#+begin_src R :exports results :results graphics :file figs/constrained_quad.pdf :height 3 :width 3
theme_set(theme_classic(base_size = 12))
  ggplot(a, aes(x = x, y = y))  +
  geom_point() +
  geom_line(data = df2, aes(x = xpred, y = predictions_constrained)) +
ggtitle("constrained")
#+end_src

#+RESULTS:
[[file:../figs/constrained_quad.pdf]]

pcls
#+begin_src R
x <-
#+end_src

https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r?rq=1
#+begin_src R
  x <- c(0.01041667, 0.30208333, 0.61458333, 0.65625000, 0.83333333)
  y <- c(772, 607, 576, 567, 550)

  unconstrained_model <- lm(y ~ x + I(x^2) +I(x^3))

  df <- data.frame(x,y)
  library(ggplot2)
  (p <- ggplot(data=df,aes(x=x,y=y)) + geom_line()+geom_point()+geom_smooth())


  library(limSolve)
  A <- cbind(rep(1,length(x)),x,x^2,x^3)
  b <- y
  G <- matrix(nrow=3,ncol=4,byrow = TRUE,data = c(0, -1,-2,-3,0,-1,-2,0,0,-1,0,0))
  h <- rep(0,3)
  constrained_model <- lsei(A = A, B = b, G = G, H = h, type=2)


  my_predict <- function(x,coefficients){
  X <- cbind(rep(1,length(x)),x,x^2,x^3)
  predictions <- X%*%coefficients
  }
                                          # compute predictions
  xpred <- seq(0,1,len=100)
  predictions_constrained <- my_predict(xpred,constrained_model$X)
  predictions_unconstrained <-    my_predict(xpred,unconstrained_model$coefficients)
  df2 <- data.frame(xpred,predictions_unconstrained,predictions_constrained)

  # plot results
  p <- ggplot(data = df,aes(x = x, y = y,color = "data")) +
  geom_point() +
  geom_line(data = df2, aes(x = xpred, y = predictions_unconstrained, color = "unconstrained fit")) +
  geom_line(data = df2, aes(x = xpred, y = predictions_constrained, color = "constrained fit"))
  p

#+end_src

#+RESULTS:

*** so question
There are many questions on this site about restricted or constrained regression parameters.
https://stats.stackexchange.com/questions/206058/regularized-linear-regression-with-specific-parameter-constraints-in-r, https://stats.stackexchange.com/questions/61733/linear-regression-with-slope-constraint, https://stats.stackexchange.com/questions/228750/1d-linear-regression-with-inequality-constraint, https://stats.stackexchange.com/questions/32641/is-there-an-r-package-for-constrained-regression-that-has-both-a-formula-and-pre, https://stats.stackexchange.com/questions/172748/sparse-coding-with-constraints-in-the-optimization, https://stats.stackexchange.com/questions/123930/linear-regression-with-an-inequality-constraint, https://math.stackexchange.com/questions/60610/polynomial-fitting-where-polynomial-must-be-monotonically-increasing, and more I'm sure.

I've read these and am trying to fit a quadratic relationship that is constrained to be monotonic increasing over the range of my data:

$$y = ax^2 + bx + \epsilon$$   (the $c$ term is zero, $\epsilon$ ~ iid
$N(0,\sigma)$)

To constrain $f(x)$ to be increasing over all values of $x$:
$2ax + b > 0$

Sadly I am not having success implementing this, so this may be more of a "what am I doing wrong question".  My apologies if that's not appropriate here.

Here is the data and the unconstrained fit.  I'm following the approach from this question: https://stats.stackexchange.com/questions/220614/linear-regression-polynomial-slope-constraint-in-r

    y <- c(15, 34.5, 39.6, 51.6, 91.7, 73.7)
    x <- c(10L, 20L, 25L, 40L, 75L, 100L)

    a <- data.frame(y = y, x = x)

    m <- lm(y ~ x + I(x^2) - 1)

    p <- data.frame(x = seq(0,105, 5))

    p$y <- predict(m, p)

    library(ggplot2)
    theme_set(theme_classic(base_size = 24))
    ggplot(a, aes(x = x, y = y))  +
    geom_point() +
    geom_line(data = p)

[![enter image description here][1]][1]

Now trying to fit the curve with inequality constraint.

    library(limSolve)
    A <- matrix(ncol = 2, c(x, x^2))
    B <- y
    G <- matrix(nrow = 1, ncol = 2, byrow = T, data = c(1,2)) # corresponding to 2ax + b
    H <- c(0)

    constrained_model <- lsei(A = A,B = B, G = G, H = H, type = 2)

    my_predict <- function(x,coefficients){
        X <- cbind(x,x^2)
        predictions <- X%*%coefficients
    }

     # compute predictions
     xpred <- seq(0,105,5)
     predictions_constrained <- my_predict(xpred,constrained_model$X)
     df2 <- data.frame(xpred,predictions_constrained)


    ggplot(a, aes(x = x, y = y))  +
      geom_point() +
      geom_line(data = df2, aes(x = xpred, y = predictions_constrained)) +
      ggtitle("constrained fit")

[![enter image description here][2]][2]

As the figure shows, the constraint is having no effect.

Am I not entering the constraint correctly?  Do I have the wrong constraint?

I know there are other packages like mgcv to fit monotonic increasing curves, maybe that would be a better choice?  I'd like to stick with the simple quadratic relationship.

Update: A friend fit this curve in Julia using the same constraints and got a proper curve.  b = 1.7, a = -0.0085.  Here's the curve with those values.  As you can see the function is increasing over the range of x, as desired.
[![proper][3]][3]


  [1]: https://i.stack.imgur.com/IlLJB.png
  [2]: https://i.stack.imgur.com/SBXV0.png
  [3]: https://i.stack.imgur.com/Kq3bK.png


* Full model
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-03 Fri 15:39
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:

\[
DBH \sim N(\beta_0 * (1 - \exp(-\beta_1 * AGE ^ {\beta_2})), \sigma)

#\b_0, \b

\]

species within genus within ...


* fit model to real data
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-17 Fri 14:55
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling/genus: none;  species: single; cities: single; climate: none; hetero: no
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:

#+begin_src R
d <- readRDS("../data/tidy_age_dbh.rds")
fram <- filter(d, SpCode == "FRAM")
fram_ftcollins <- filter(d, SpCode == "FRAM", City == "Fort Collins, CO")
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/fram_age_dbh.png
ggplot(fram, aes(x = AGE, y = DBH,color = City)) + geom_point() + facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/fram_age_dbh.png]]

I divide b0 by 100 and multiply b1 by 100 to get the parameters on the same scale ish, with
the hopes that this speeds things up a bit.


#+begin_src R
              form <- bf(DBH ~ (b0*100) * (1 - exp(-(b1/100) * AGE ^ b2)),
                         b0 ~ 1,
                         b1 ~ 1,
                         b2 ~ 1,
                         nl = T)

       nlprior <- c(prior(gamma(1, 2), nlpar = "b0", lb = 0),
                    prior(gamma(1, 2), nlpar = "b1", lb = 0),
                    prior(gamma(1, 2), nlpar = "b2", lb = 0))


       model_fram_ftcollins_homo <- brm(form, chains = 4, cores = 2, data = fram_ftcollins,
  #                                     init_r = 1,
                                       prior = nlprior,  control = list(adapt_delta = 0.8))
#+end_src

#+RESULTS:
#+begin_example
Compiling the C++ model
Start sampling

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 1).

Gradient evaluation took 0.000362 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.62 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 2).

Gradient evaluation took 0.000308 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.08 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 9.83651 seconds (Warm-up)
               10.6709 seconds (Sampling)
               20.5074 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.1129 seconds (Warm-up)
               9.95994 seconds (Sampling)
               20.0729 seconds (Total)


SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 3).

Gradient evaluation took 0.000924 seconds
1000 transitions using 10 leapfrog steps per transition would take 9.24 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'gaussian brms-model' NOW (CHAIN 4).

Gradient evaluation took 0.000323 seconds
1000 transitions using 10 leapfrog steps per transition would take 3.23 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.9297 seconds (Warm-up)
               10.449 seconds (Sampling)
               21.3787 seconds (Total)

Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 10.341 seconds (Warm-up)
               10.9421 seconds (Sampling)
               21.2831 seconds (Total)
#+end_example


* look at duplicates
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-20 Mon 11:36
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Data/tidy data, age and dbh
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
d <- readRDS("../data/age_dbh_testing.rds")
dupID <- d$TreeID[duplicated(interaction(d$TreeID, d$City))]
dups <- d %>% filter(TreeID %in% dupID)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/duplicates.png
  ggplot(dups, aes( x = AGE, y = DBH, color = factor(TreeID))) + geom_point() +
    facet_wrap(~City)
#+end_src

#+RESULTS:
[[file:../figs/duplicates.png]]


* genus: none;  species: single; cities: single; climate: none; hetero: smooth3
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle genus_none_species_single_cities_single_climate_none_hetero_smooth3.R
:ARCHIVE_TIME: 2018-08-30 Thu 18:43
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
** libraries and functions
#+begin_src R
  library(dplyr)
  library(brms)
  source("allo_functions.R")

#+end_src

#+RESULTS:

** set values
#+begin_src R
  genus <- "none"
  species <- "single"
  cities <- "single"
  climate <- "none"
  hetero <- "smooth3"
#+end_src

#+RESULTS:
** generate formula and priors
#+begin_src R

  model_table <- read.csv("../data/model_table.csv", stringsAsFactors = F)

  form <- generate_formula(model_table, genus, species, cities, climate, hetero)

  nlprior <- generate_prior(genus, species, cities, climate)
#+end_src

#+RESULTS:

** fit model to real data
#+begin_src R
  d <- readRDS("../data/age_dbh_testing.rds")

  mod <- brm(form, chains = 4, cores = 4, data = d, init_r = .3, prior = nlprior, iter = 2000)

  saveRDS(mod, paste0("../models/genus_",genus,"_species_",species,"_cities_", cities, "_climate_", climate, "_hetero_", hetero, ".rds"))
#+end_src

** tangle
C-c C-v t

** send to krusty
#+BEGIN_SRC sh :session a :results verbatim

  rsync -avz genus_none_species_single_cities_single_climate_none_hetero_smooth3.R erker@krusty:~/allo/code/

#+END_SRC

#+RESULTS:
: erker@krusty's password:
: Permission denied, please try again.
: erker@krusty's password:
: building file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth3.R
:
: sent 663 bytes  received 42 bytes  128.18 bytes/sec
: total size is 1146  speedup is 1.63

** run on krusty

run from krusty terminal

#+BEGIN_SRC sh :session b :results raw
  ssh krusty
  cd allo/code
  nohup R CMD BATCH genus_none_species_single_cities_single_climate_none_hetero_smooth3.R &
  exit
#+END_SRC

** pull back from krusty

#+BEGIN_SRC sh :session a :results raw
rsync -avz erker@krusty:~/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth3.rds ~/git/allo/models/
#+END_SRC

#+RESULTS:
erker@krusty's password:
receiving file list ... done
genus_none_species_single_cities_single_climate_none_hetero_smooth3.rds

sent 21302 bytes  received 12404826 bytes  1911712.00 bytes/sec
total size is 12505253  speedup is 1.01
erker@krusty's password:
receiving file list ... done
genus_none_species_single_cities_single_climate_none_hetero_smooth3.rds

sent 38 bytes  received 12405422 bytes  1305837.89 bytes/sec
total size is 12501434  speedup is 1.01
erker@krusty's password:
receiving file list ... done

sent 16 bytes  received 145 bytes  46.00 bytes/sec
total size is 12029334  speedup is 74716.36
You have new mail in /var/mail/erker
erker@krusty's password:
receiving file list ... done
genus_none_species_single_cities_single_climate_none_hetero_no.rds

sent 20666 bytes  received 11936322 bytes  2173997.82 bytes/sec
total size is 12029334  speedup is 1.01

** diagnostics
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle no
:END:
#+begin_src R
mod <- readRDS("~/git/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth3.rds")
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png
  pairs(mod)
#+end_src

#+RESULTS:
[[file:../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png]]

#+begin_src R
  summary(mod)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ s(AGE, k = 3)
   Data: d (Number of observations: 2272)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Smooth Terms:
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sds(sigma_sAGE_1)    14.81      8.72     3.84    34.54        193 1.03

Population-Level Effects:
                Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma_Intercept     2.45      0.02     2.42     2.48       1573 1.00
b0_Intercept        1.11      0.06     1.01     1.24       1208 1.00
b1_Intercept        1.65      0.08     1.50     1.81       1470 1.00
b2_Intercept        1.03      0.02     0.98     1.07       1063 1.01
sigma_sAGE_1       -0.21      0.02    -0.24    -0.17       1881 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 346 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png
  plot(mod, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png
  marginal_effects(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_smooth3s_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png
  marginal_smooths(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_smooth3s_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png]]



#+begin_src R :exports results :results graphics :file ../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png
  pp_check(mod)
#+end_src

#+RESULTS:
[[file:../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth3.png]]


* genus: none;  species: single; cities: single; climate: none; hetero: smooth5
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle genus_none_species_single_cities_single_climate_none_hetero_smooth5.R
:ARCHIVE_TIME: 2018-08-30 Thu 18:43
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
** libraries and functions
#+begin_src R
  library(dplyr)
  library(brms)
  source("allo_functions.R")

#+end_src

#+RESULTS:

** set values
#+begin_src R
  genus <- "none"
  species <- "single"
  cities <- "single"
  climate <- "none"
  hetero <- "smooth5"
#+end_src

#+RESULTS:
** generate formula and priors
#+begin_src R

  model_table <- read.csv("../data/model_table.csv", stringsAsFactors = F)

  form <- generate_formula(model_table, genus, species, cities, climate, hetero)

  nlprior <- generate_prior(genus, species, cities, climate)
#+end_src

#+RESULTS:

** fit model to real data
#+begin_src R
  d <- readRDS("../data/age_dbh_testing.rds")

  mod <- brm(form, chains = 4, cores = 4, data = d, init_r = .3, prior = nlprior, iter = 2000)

  saveRDS(mod, paste0("../models/genus_",genus,"_species_",species,"_cities_", cities, "_climate_", climate, "_hetero_", hetero, ".rds"))
#+end_src

** tangle
C-c C-v t

** send to krusty
#+BEGIN_SRC sh :session a :results verbatim

  rsync -avz genus_none_species_single_cities_single_climate_none_hetero_smooth5.R erker@krusty:~/allo/code/

#+END_SRC

#+RESULTS:
: erker@krusty's password:
: building file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth5.R
:
: sent 182 bytes  received 54 bytes  67.43 bytes/sec
: total size is 1146  speedup is 4.86

** run on krusty

run from krusty terminal

#+BEGIN_SRC sh :session b :results raw
  ssh krusty
  cd allo/code
  nohup R CMD BATCH genus_none_species_single_cities_single_climate_none_hetero_smooth5.R &
  exit
#+END_SRC

** pull back from krusty

#+BEGIN_SRC sh :session a :results verbatim
rsync -avz erker@krusty:~/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth5.rds ~/git/allo/models/
#+END_SRC

#+RESULTS:
: erker@krusty's password:
: receiving file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth5.rds
:
: sent 21398 bytes  received 12530484 bytes  2282160.36 bytes/sec
: total size is 12627223  speedup is 1.01


** diagnostics
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle no
:END:
#+begin_src R
mod <- readRDS("~/git/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth5.rds")
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png
  pairs(mod)
#+end_src

#+RESULTS:
[[file:../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png]]

#+begin_src R
  summary(mod)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ s(AGE, k = 5)
   Data: d (Number of observations: 2272)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Smooth Terms:
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sds(sigma_sAGE_1)     6.78      4.06     2.37    16.74         16 1.32

Population-Level Effects:
                Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma_Intercept     2.43      0.01     2.40     2.46        157 1.03
b0_Intercept        1.23      0.08     1.09     1.41        110 1.03
b1_Intercept        1.58      0.07     1.45     1.72        788 1.02
b2_Intercept        1.00      0.02     0.96     1.05        217 1.02
sigma_sAGE_1        0.76      0.11     0.59     0.99         50 1.08

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning messages:
1: The model has not converged (some Rhats are > 1.1). Do not analyse the results!
We recommend running more iterations and/or setting stronger priors.
2: There were 301 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png
  plot(mod, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png
  marginal_effects(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_smooth5s_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png
  marginal_smooths(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_smooth5s_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png]]



#+begin_src R :exports results :results graphics :file ../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png
  pp_check(mod) +xlim(c(-20,130))
#+end_src

#+RESULTS:
[[file:../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth5.png]]


* genus: none;  species: single; cities: single; climate: none; hetero: smooth7
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle genus_none_species_single_cities_single_climate_none_hetero_smooth7.R
:ARCHIVE_TIME: 2018-08-30 Thu 18:43
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
** libraries and functions
#+begin_src R
  library(dplyr)
  library(brms)
  source("allo_functions.R")

#+end_src

#+RESULTS:

** set values
#+begin_src R
  genus <- "none"
  species <- "single"
  cities <- "single"
  climate <- "none"
  hetero <- "smooth7"
#+end_src

#+RESULTS:
** generate formula and priors
#+begin_src R

  model_table <- read.csv("../data/model_table.csv", stringsAsFactors = F)

  form <- generate_formula(model_table, genus, species, cities, climate, hetero)

  nlprior <- generate_prior(genus, species, cities, climate)
#+end_src

#+RESULTS:

** fit model to real data
#+begin_src R
  d <- readRDS("../data/age_dbh_testing.rds")

  mod <- brm(form, chains = 4, cores = 4, data = d, init_r = .3, prior = nlprior, iter = 2000)

  saveRDS(mod, paste0("../models/genus_",genus,"_species_",species,"_cities_", cities, "_climate_", climate, "_hetero_", hetero, ".rds"))
#+end_src

** tangle
C-c C-v t

** send to krusty
#+BEGIN_SRC sh :session a :results verbatim

  rsync -avz genus_none_species_single_cities_single_climate_none_hetero_smooth7.R erker@krusty:~/allo/code/

#+END_SRC

#+RESULTS:
: erker@krusty's password:
: building file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth7.R
:
: sent 663 bytes  received 42 bytes  201.43 bytes/sec
: total size is 1146  speedup is 1.63

** run on krusty

run from krusty terminal

#+BEGIN_SRC sh :session b :results raw
  ssh krusty
  cd allo/code
  nohup R CMD BATCH genus_none_species_single_cities_single_climate_none_hetero_smooth7.R &
  exit
#+END_SRC

** pull back from krusty

#+BEGIN_SRC sh :session a :results verbatim
rsync -avz erker@krusty:~/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth7.rds ~/git/allo/models/
#+END_SRC

#+RESULTS:
: erker@krusty's password:
: receiving file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth7.rds
:
: sent 21476 bytes  received 12656193 bytes  2305030.73 bytes/sec
: total size is 12752049  speedup is 1.01


** diagnostics
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle no
:END:
#+begin_src R
mod <- readRDS("~/git/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth7.rds")
mod7 <- mod
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png
  pairs(mod)
#+end_src

#+RESULTS:
[[file:../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png]]

#+begin_src R
  summary(mod)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ s(AGE, k = 7)
   Data: d (Number of observations: 2272)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Smooth Terms:
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sds(sigma_sAGE_1)     4.83      2.03     2.19    10.23        743 1.00

Population-Level Effects:
                Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma_Intercept     2.42      0.02     2.39     2.45       3588 1.00
b0_Intercept        1.27      0.09     1.12     1.48       1748 1.00
b1_Intercept        1.56      0.08     1.40     1.71       2287 1.00
b2_Intercept        0.99      0.02     0.95     1.03       2232 1.00
sigma_sAGE_1        1.09      0.22     0.69     1.55       1683 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 36 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png
  plot(mod, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png
  marginal_effects(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_smooth7s_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png
  marginal_smooths(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_smooth7s_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png]]



#+begin_src R :exports results :results graphics :file ../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png
  pp_check(mod)
#+end_src

#+RESULTS:
[[file:../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth7.png]]


* genus: none;  species: single; cities: single; climate: none; hetero: smooth8
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle genus_none_species_single_cities_single_climate_none_hetero_smooth8.R
:ARCHIVE_TIME: 2018-08-30 Thu 18:43
:ARCHIVE_FILE: ~/git/allo/code/allo.org
:ARCHIVE_OLPATH: Methods/Modelling
:ARCHIVE_CATEGORY: allo
:ARCHIVE_ITAGS: work allo
:END:
** libraries and functions
#+begin_src R
  library(dplyr)
  library(brms)
  source("allo_functions.R")

#+end_src

#+RESULTS:

** set values
#+begin_src R
  genus <- "none"
  species <- "single"
  cities <- "single"
  climate <- "none"
  hetero <- "smooth8"
#+end_src

#+RESULTS:
** generate formula and priors
#+begin_src R

  model_table <- read.csv("../data/model_table.csv", stringsAsFactors = F)

  form <- generate_formula(model_table, genus, species, cities, climate, hetero)

  nlprior <- generate_prior(genus, species, cities, climate)
#+end_src

#+RESULTS:

** fit model to real data
#+begin_src R
  d <- readRDS("../data/age_dbh_testing.rds")

  mod <- brm(form, chains = 4, cores = 4, data = d, init_r = .3, prior = nlprior, iter = 2000)

  saveRDS(mod, paste0("../models/genus_",genus,"_species_",species,"_cities_", cities, "_climate_", climate, "_hetero_", hetero, ".rds"))
#+end_src

** tangle
C-c C-v t

** send to krusty
#+BEGIN_SRC sh :session a :results verbatim

  rsync -avz genus_none_species_single_cities_single_climate_none_hetero_smooth8.R erker@krusty:~/allo/code/

#+END_SRC

#+RESULTS:
: erker@krusty's password:
: building file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth8.R
:
: sent 663 bytes  received 42 bytes  282.00 bytes/sec
: total size is 1146  speedup is 1.63

** run on krusty

run from krusty terminal

#+BEGIN_SRC sh :session b :results raw
  ssh krusty
  cd allo/code
  nohup R CMD BATCH genus_none_species_single_cities_single_climate_none_hetero_smooth8.R &
  exit
#+END_SRC

** pull back from krusty

#+BEGIN_SRC sh :session a :results verbatim
rsync -avz erker@krusty:~/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth8.rds ~/git/allo/models/
#+END_SRC

#+RESULTS:
: erker@krusty's password:
: receiving file list ... done
: genus_none_species_single_cities_single_climate_none_hetero_smooth8.rds
:
: sent 38 bytes  received 12708937 bytes  2824216.67 bytes/sec
: total size is 12810335  speedup is 1.01
: You have new mail in /var/mail/erker


** diagnostics
:PROPERTIES:
:header-args:R: :cache no :results output :exports both :comments link :session *R:allo3* :eval yes :tangle no
:END:
#+begin_src R
mod <- readRDS("~/git/allo/models/genus_none_species_single_cities_single_climate_none_hetero_smooth8.rds")
mod8 <- mod
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png
  pairs(mod)
#+end_src

#+RESULTS:
[[file:../figs/pairs_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png]]

#+begin_src R
  summary(mod)
#+end_src

#+RESULTS:
#+begin_example
 Family: gaussian
  Links: mu = identity; sigma = log
Formula: DBH ~ 100 * b0 * (1 - exp(-(b1/100) * AGE^b2))
         b0 ~ 1
         b1 ~ 1
         b2 ~ 1
         sigma ~ s(AGE, k = 8)
   Data: d (Number of observations: 3403)
Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup samples = 4000

Smooth Terms:
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sds(sigma_sAGE_1)     3.48      1.38     1.74     7.22        741 1.01

Population-Level Effects:
                Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma_Intercept     2.41      0.01     2.38     2.43       3127 1.00
b0_Intercept        1.40      0.09     1.24     1.60       2023 1.00
b1_Intercept        1.50      0.07     1.36     1.63       2448 1.00
b2_Intercept        0.97      0.02     0.94     1.01       2392 1.00
sigma_sAGE_1        1.65      0.29     1.11     2.23       1588 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample
is a crude measure of effective sample size, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning message:
There were 29 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help.
See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
#+end_example

#+begin_src R :exports results :results graphics :file ../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png
  plot(mod, ask = F)
#+end_src

#+RESULTS:
[[file:../figs/plot_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png
  marginal_effects(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_effects_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png]]

#+begin_src R :exports results :results graphics :file ../figs/marginal_smooth8s_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png
  marginal_smooths(mod)
#+end_src

#+RESULTS:
[[file:../figs/marginal_smooth8s_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png]]



#+begin_src R :exports results :results graphics :file ../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png
  pp_check(mod)
#+end_src

#+RESULTS:
[[file:../figs/pp_check_genus_none_species_single_cities_single_climate_none_hetero_smooth8.png]]

